<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~  Copyright (c) 2010, Red Hat, Inc. and/or its affiliates or third-party contributors as
  ~  indicated by the @author tags or express copyright attribution
  ~  statements applied by the authors.  All third-party contributions are
  ~  distributed under license by Red Hat, Inc.
  ~
  ~  This copyrighted material is made available to anyone wishing to use, modify,
  ~  copy, or redistribute it subject to the terms and conditions of the GNU
  ~  Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~  This program is distributed in the hope that it will be useful,
  ~  but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~  for more details.
  ~
  ~  You should have received a copy of the GNU Lesser General Public License
  ~  along with this distribution; if not, write to:
  ~  Free Software Foundation, Inc.
  ~  51 Franklin Street, Fifth Floor
  ~  Boston, MA  02110-1301  USA
  -->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../hsearch.ent">
%BOOK_ENTITIES;
]>
<chapter id="search-optimize">
  <title>Index Optimization</title>

  <para>This section explains some low level tricks to keep your indexes at
  peak performance. We cover some Lucene details which in most cases you don't
  have to know about: Hibernate Search will handle these operations optimally
  and transparently in most cases without the need for further configuration.
  Still, it is good to know that there are ways to configure the behaviour,
  if the need arises.</para>

  <para>The index is physically stored in several smaller segments. Each
  segment is immutable and represents a generation of index writes. Index
  segments are periodically compacted, both to merge smaller segments and to
  remove stale entries; this merging process happens constantly in the
  background and can be tuned with the options specified in <xref
  linkend="lucene-indexing-performance"/>, but you can also define policies to
  fully run index optimizations when it is most suited for your specific
  workload.</para>

  <para>With older versions of Lucene it was important to frequently optimize
  the index to maintain good performance, but with current Lucene versions
  this doesn't apply anymore. The benefit of explicit optimization is very low,
  and in certain cases even counter-productive. During an explicit optimization the
  whole index is processed and rewritten inflicting a significant performance
  cost. Optimization is for this reason a double-edged sword.</para>

  <para>Another reason to avoid optimizing the index too often is that an
  optimization will, as a side effect, invalidate cached filters and field caches
  and internal buffers need to be refreshed. <tip>
      <para>Optimizing the index is often not needed, does not benefit write
      (update) performance at all, and is a slow operation: make sure you need
      it before activating it.</para>
    </tip></para>

  <para>Of course optimizing the index does not only present drawbacks: after
  the optimization process is completed and new
  <classname>IndexReader</classname> instances have loaded their buffers,
  queries will perform at peak performance and you will have reclaimed all
  disk space potentially used by stale entries.</para>

  <para>It is recommended to not schedule any optimization, but if you wish to
  perform it periodically you should run it:</para>

  <itemizedlist>
    <listitem>
      <para>on an idle system or when the searches are less frequent</para>
    </listitem>

    <listitem>
      <para>after a lot of index modifications</para>
    </listitem>
  </itemizedlist>

  <para>When using a <classname>MassIndexer</classname> (see <xref
  linkend="search-batchindex-massindexer"/>) it will optimize involved indexes
  by default at the start and at the end of processing; you can change this
  behavior by using
  <classname>MassIndexer</classname>.<methodname>optimizeAfterPurge</methodname>
  and
  <classname>MassIndexer</classname>.<methodname>optimizeOnFinish</methodname>
  respectively. The initial optimization is actually very cheap as it is
  performed on an emtpy index: its purpose is to release the storage space
  occupied by the old index.</para>

  <section>
    <title>Automatic optimization</title>

    <para>While in most cases this is not needed, Hibernate Search can
    automatically optimize an index after:</para>

    <itemizedlist>
      <listitem>
        <para>a certain amount of write operations</para>
      </listitem>

      <listitem>
        <para>or after a certain amount of transactions</para>
      </listitem>
    </itemizedlist>

    <para>The configuration for automatic index optimization can be defined on
    a global level or per index:</para>

    <example>
      <title>Defining automatic optimization parameters</title>

      <programlisting>hibernate.search.default.optimizer.operation_limit.max = 1000
hibernate.search.default.optimizer.transaction_limit.max = 100
hibernate.search.Animal.optimizer.transaction_limit.max = 50</programlisting>
    </example>

    <para>With the above example an optimization will be triggered to the
    <literal>Animal</literal> index as soon as either:</para>

    <itemizedlist>
      <listitem>
        <para>the number of additions and deletions reaches 1000</para>
      </listitem>

      <listitem>
        <para>the number of transactions reaches 50
        (<constant>hibernate.search.Animal.optimizer.transaction_limit.max</constant>
        having priority over
        <constant>hibernate.search.default.optimizer.transaction_limit.max</constant>)</para>
      </listitem>
    </itemizedlist>

    <para>If none of these parameters are defined, no optimization is
    processed automatically.</para>

    <para>The default implementation of OptimizerStrategy can be overriden by
    implementing
    <literal>org.hibernate.search.store.optimization.OptimizerStrategy</literal>
    and setting the <literal>optimizer.implementation</literal> property to
    the fully qualified name of your implementation. This implementation must
    implement the interface, be a public class and have a public constructor
    taking no arguments.</para>

    <example>
      <title>Loading a custom OptimizerStrategy</title>

      <programlisting>hibernate.search.default.optimizer.implementation = com.acme.worlddomination.SmartOptimizer
hibernate.search.default.optimizer.SomeOption = CustomConfigurationValue
hibernate.search.humans.optimizer.implementation = default</programlisting>
    </example>

    <para>The keyword <literal>default</literal> can be used to select the
    Hibernate Search default implementation; all properties after the
    <literal>.optimizer</literal> key separator will be passed to the
    implementation's <methodname>initialize</methodname> method at
    start.</para>
  </section>

  <section>
    <title>Manual optimization</title>

    <para>You can programmatically optimize (defragment) a Lucene index from
    Hibernate Search through the <classname>SearchFactory</classname>:</para>

    <example>
      <title>Programmatic index optimization</title>

      <programlisting language="JAVA" role="JAVA">FullTextSession fullTextSession = Search.getFullTextSession(regularSession);
SearchFactory searchFactory = fullTextSession.getSearchFactory();

searchFactory.optimize(Order.class);
// or
searchFactory.optimize();</programlisting>
    </example>

    <para>The first example optimizes the Lucene index holding
    <classname>Order</classname>s; the second, optimizes all indexes.</para>

    <note>
      <para><literal>searchFactory.optimize()</literal> has no effect on a JMS
      or JGroups backend: you must apply the optimize operation on the Master
      node.</para>
    </note>
  </section>

  <section>
    <title>Adjusting optimization</title>

    <para>The Lucene index is constantly being merged in the background to
    keep a good balance between write and read performance; in a sense this is a
    form of background optimization which is always applied.</para>

    <para>The following match attributes of Lucene's <classname>IndexWriter</classname>
    and are commonly used to tune how often merging occurs and how aggressive it is
    applied. They are exposed by Hibernate Search via: <itemizedlist>
        <listitem>
          <literal>hibernate.search.[default|&lt;indexname&gt;].indexwriter.max_buffered_docs</literal>
        </listitem>

        <listitem>
          <literal>hibernate.search.[default|&lt;indexname&gt;].indexwriter.max_merge_docs</literal>
        </listitem>

        <listitem>
          <literal>hibernate.search.[default|&lt;indexname&gt;].indexwriter.merge_factor</literal>
        </listitem>

        <listitem>
          <literal>hibernate.search.[default|&lt;indexname&gt;].indexwriter.ram_buffer_size</literal>
        </listitem>

        <listitem>
          <literal>hibernate.search.[default|&lt;indexname&gt;].indexwriter.term_index_interval</literal>
        </listitem>
      </itemizedlist> See <xref linkend="lucene-indexing-performance"/> for
    a description of these properties.</para>
  </section>
</chapter>
