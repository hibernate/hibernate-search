<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~  Copyright (c) 2010, Red Hat, Inc. and/or its affiliates or third-party contributors as
  ~  indicated by the @author tags or express copyright attribution
  ~  statements applied by the authors.  All third-party contributions are
  ~  distributed under license by Red Hat, Inc.
  ~
  ~  This copyrighted material is made available to anyone wishing to use, modify,
  ~  copy, or redistribute it subject to the terms and conditions of the GNU
  ~  Lesser General Public License, as published by the Free Software Foundation.
  ~  
  ~  This program is distributed in the hope that it will be useful,
  ~  but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~  for more details.
  ~
  ~  You should have received a copy of the GNU Lesser General Public License
  ~  along with this distribution; if not, write to:
  ~  Free Software Foundation, Inc.
  ~  51 Franklin Street, Fifth Floor
  ~  Boston, MA  02110-1301  USA
  -->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../hsearch.ent">
%BOOK_ENTITIES;
]>
<chapter id="search-architecture">
  <title>Architecture</title>

  <section>
    <title>Overview</title>

    <para>Hibernate Search consists of an indexing component as well as an
    index search component. Both are backed by Apache Lucene.</para>

    <para>Each time an entity is inserted, updated or removed in/from the
    database, Hibernate Search keeps track of this event (through the
    Hibernate event system) and schedules an index update. All these updates
    are handled without you having to interact with the Apache Lucene APIs
    directly (see <xref linkend="search-configuration-event" />). Instead, the
    interaction with the underlying Lucene indexes is handled via so called
    <classname>IndexManager</classname>s.</para>

    <para>Each Lucene index is managed by one index manager which is uniquely
    identified by name. In most cases there is also a one to one relationship
    between an indexed entity and a single
    <classname>IndexManager</classname>. The exceptions are the use cases of
    index sharding and index sharing. The former can be applied when the index
    for a single entity becomes too big and indexing operations are slowing
    down the application. In this case a single entity is indexed into
    multiple indexes each with its own index manager (see <xref
    linkend="search-configuration-directory-sharding" />). The latter, index
    sharing, is the ability to index multiple entities into the same Lucene
    index (see <xref linkend="section-sharing-indexes" />).</para>

    <para>The index manager abstracts from the specific index configuration.
    In the case of the default index manager this includes details about the
    selected backend, the configured reader strategy and the chosen
    <classname>DirectoryProvider</classname>. These components will be
    discussed in greater detail later on. It is recommended that you start
    with the default index manager which uses different Lucene
    <classname>Directory</classname> types to manage the indexes (see <xref
    linkend="search-configuration-directory" />). You can, however, also
    provide your own <classname>IndexManager</classname> implementation (see
    <xref linkend="configuration-indexmanager" />).</para>

    <para>Once the index is created, you can search for entities and return
    lists of managed entities saving you the tedious object to Lucene
    <classname>Document</classname> mapping. The same persistence context is
    shared between Hibernate and Hibernate Search. As a matter of fact, the
    <classname>FullTextSession</classname> is built on top of the Hibernate
    <classname>Session</classname> so that the application code can use the
    unified <classname>org.hibernate.Query</classname> or
    <classname>javax.persistence.Query</classname> APIs exactly the same way a
    HQL, JPA-QL or native query would do.</para>

    <para>To be more efficient Hibernate Search batches the write interactions
    with the Lucene index. This batching is the responsibility of the
    <classname>Worker</classname>. There are currently two types of batching.
    Outside a transaction, the index update operation is executed right after
    the actual database operation. This is really a no batching setup. In the
    case of an ongoing transaction, the index update operation is scheduled
    for the transaction commit phase and discarded in case of transaction
    rollback. The batching scope is the transaction. There are two immediate
    benefits:</para>

    <itemizedlist>
      <listitem>
        <para>Performance: Lucene indexing works better when operation are
        executed in batch.</para>
      </listitem>

      <listitem>
        <para>ACIDity: The work executed has the same scoping as the one
        executed by the database transaction and is executed if and only if
        the transaction is committed. This is not ACID in the strict sense of
        it, but ACID behavior is rarely useful for full text search indexes
        since they can be rebuilt from the source at any time.</para>
      </listitem>
    </itemizedlist>

    <para>You can think of those two batch modes (no scope vs transactional)
    as the equivalent of the (infamous) autocommit vs transactional behavior.
    From a performance perspective, the <emphasis>in transaction</emphasis>
    mode is recommended. The scoping choice is made transparently. Hibernate
    Search detects the presence of a transaction and adjust the scoping (see
    <xref linkend="configuration-worker" />).<tip>
        <para>It is recommended - for both your database and Hibernate Search
        - to execute your operations in a transaction, be it JDBC or
        JTA.</para>
      </tip></para>

    <note>
       Hibernate Search works perfectly fine in the Hibernate / EntityManager long conversation pattern aka. atomic conversation
    </note>
  </section>

  <section>
    <title>Back end</title>

    <para>Hibernate Search offers the ability to let the batched work being
    processed by different back ends. Several back ends are provided out of
    the box and you have the option to plugin your own. It is important to
    understand that in this context back end encompasses more than just the
    configuration option
    <literal>hibernate.search.default.worker.backend</literal>. This property
    just specifies a implementation of the
    <classname>BackendQueueProcessor</classname> interface which is a part of
    a back end configuration. In most cases, however, additional configuration
    settings are needed to successfully configure a specific backend setup,
    like for example the JMS back end.</para>

    <section>
      <title>Lucene</title>

      <para>In this mode, all index update operations applied on a given node
      (JVM) will be executed to the Lucene directories (through the directory
      providers) by the same node. This mode is typically used in non
      clustered environment or in clustered environments where the directory
      store is shared.</para>

      <mediaobject>
        <imageobject role="html">
          <imagedata align="center" fileref="lucene-backend.png" format="PNG" />
        </imageobject>

        <imageobject role="fo">
          <imagedata align="center" depth="" fileref="lucene-backend.png"
                     format="PNG" scalefit="1" width="12cm" />
        </imageobject>

        <caption><para>Lucene back end configuration.</para></caption>
      </mediaobject>

      <para>This mode targets non clustered applications, or clustered
      applications where the <classname>Directory</classname> is taking care
      of the locking strategy.</para>

      <para>The main advantage is simplicity and immediate visibility of the
      changes in Lucene queries (a requirement in some applications).</para>

      <para>An alternative back end viable for non-clustered and non-shared
      index configurations is the near-real-time backend.</para>
    </section>

    <section>
      <title>JMS</title>

      <para>All index update operations applied on a given node are sent to a
      JMS queue. A unique reader will then process the queue and update the
      master index. The master index is then replicated on a regular basis to
      the slave copies. This is known as the master/slaves pattern. The master
      is the sole responsible for updating the Lucene index. The slaves can
      accept read as well as write operations. However, they only process the
      read operation on their local index copy and delegate the update
      operations to the master.</para>

      <mediaobject>
        <imageobject role="html">
          <imagedata align="center" fileref="jms-backend.png" format="PNG" />
        </imageobject>

        <imageobject role="fo">
          <imagedata align="center" depth="" fileref="jms-backend.png"
                     format="PNG" scalefit="1" width="12cm" />
        </imageobject>

        <caption><para>JMS back end configuration.</para></caption>
      </mediaobject>

      <para>This mode targets clustered environments where throughput is
      critical, and index update delays are affordable. Reliability is ensured
      by the JMS provider and by having the slaves working on a local copy of
      the index.</para>
    </section>

    <section>
      <title>JGroups</title>

      <para>The JGroups based back end works similar to the JMS one and is
      designed after the same master/slave pattern. However, instead of JMS
      the JGroups toolkit is used as a replication mechanism. This back end
      can be used as an alternative to JMS when response time is critical, but
      i.e. JNDI service is not available.</para>

      <para>Note that while JMS can usually be configured to use persistent queues,
      JGroups can only talk directly with the other nodes over network: it does
      guarantee message delivery to other participants, but if no master node
      is available, index update operations will be silently discarded.
      A new mode for auto-election of a master node is being developed.</para>
    </section>
  </section>

  <section id="search-architecture-readerstrategy" xreflabel="Reader strategy">
    <title>Reader strategy</title>

    <para>When executing a query, Hibernate Search interacts with the Apache
    Lucene indexes through a reader strategy. Choosing a reader strategy will
    depend on the profile of the application (frequent updates, read mostly,
    asynchronous index update etc). See also <xref
    linkend="configuration-reader-strategy" /></para>

    <section>
      <title><literal>shared</literal></title>

      <para>With this strategy, Hibernate Search will share the same
      <classname>IndexReader</classname>, for a given Lucene index, across
      multiple queries and threads provided that the
      <classname>IndexReader</classname> is still up-to-date. If the
      <classname>IndexReader</classname> is not up-to-date, a new one is
      opened and provided. Each <classname>IndexReader</classname> is made of
      several <classname>SegmentReader</classname>s. This strategy only
      reopens segments that have been modified or created after last opening
      and shares the already loaded segments from the previous instance. This
      strategy is the default.</para>

      <para>The name of this strategy is <literal>shared</literal>.</para>
    </section>

    <section>
      <title><literal>not-shared</literal></title>

      <para>Every time a query is executed, a Lucene
      <classname>IndexReader</classname> is opened. This strategy is not the
      most efficient since opening and warming up an
      <classname>IndexReader</classname> can be a relatively expensive
      operation.</para>

      <para>The name of this strategy is <literal>not-shared</literal>.</para>
    </section>

    <section>
      <title>Custom</title>

      <para>You can write your own reader strategy that suits your application
      needs by implementing
      <classname>org.hibernate.search.reader.ReaderProvider</classname>. The
      implementation must be thread safe.</para>
    </section>
  </section>
</chapter>
