[[user-guide]]
== User Guide


Hibernate Seach’s new MassIndexer uses the Batch approach introduced by JSR352.
It covers not only the existing functionalities of the previous indexer, but
also benefits the powerful standard based facilities of the java batch platform
(JSR352), such as checkpoint and step partitioning. It requires a batch runtime
for the execution. For Java EE users, the default batch runtime included in the
container will be used. For Java SE users, we’ve chosen JBeret SE for you.

.How to use the new MassIndexer?
====
[source, JAVA]
Long executionID = new MassIndexer()
        .addRootEntity( MyEntity.class );
        .start();
====

This approach is optimized for best performance but requires to set the
application in maintenance mode. Running a mass indexer in busy hours is not
recommended. You also need to ensure the batch runtime has enough available
threads for the execution, because all the batch use the same thread pool.


=== Selection of entities
The mass indexer accepts selection of entity types through different methods,
which allows you to add one or multiple class types.

.How to add entity type(s) to selection?
====
[source, JAVA]
massIndexer.addRootEntity( Company.class );
massIndexer.addRootEntities( Company.class, Employee.class );
====

[NOTE]
====
Please notice that for instant, only the root entity types are accepted. It
should have no relationship between 2 root entities. Because relationships are
not implemented in the framework yet, such as one-to-many, many-to-many.
====


=== Parallelism
In order to maximize the performance, we highly recommend you to speed up the
mass indexer using parallelism. Parallelism is activated by default. Under the
standard JSR 352, the exact word is “partitioning”. The indexing step may run as
multiple partitions, one per thread. Each partition has its own partition ID and
parameters. If there’re more partitions than threads, partitions are considered
as a queue to consume: each thread can only run one partition at a time and
won’t consume the next partition until the previous one is finished.


==== Threads
The maximum number of threads used by the job execution is defined through
method `maxThreads()`. Within the N threads given, there’s 1 thread reserved for
the core, so only N - 1 threads are available for different partitions. The
default number is 10, which correspond to the default max number of threads in
JBeret, the WildFly batch runtime. However, you can overwrite it with your own
value.

====
[source, JAVA]
massIndexer = massIndexer.maxThreads( 5 );
====

[NOTE]
====
Note that the batch runtime cannot guarantee the requested number of threads are
available, it will use as it can up to the requested maximum. (JSR352 v1.0 Final
Release, page 34)
====


==== Partitions
Mass indexer defines dynamically the number of partitions, but you need to tell
it the number of rows per partitions so that it can calculate the partitions by
division.

====
[source, JAVA]
massIndexer = massIndexer.rowsPerPartition( 5000 );
====

Each partition deals with one root entity type, so 2 different entity types will
never run under the same partition.


==== Checkpoint
Mass indexer supports checkpoint algorithm. Assume that N is the value of
checkpoint frequency, then a partition will reach at checkpoint every N items
processed inside the partition. You can overwrite it to adapt your business
requirement. By default, it is set to 3.

====
[source, JAVA]
massIndexer = massIndexer.checkpointFreq( 1000 );
====

Checkpoint a partition-scope algorithm, which means each partition has its own
checkpoint counter and it is not shared with other partitions.


=== Persistence
The new mass indexer interacts with databases using JPA. We need you to
configure a persistence unit and provide an entity manager factory, so that the
new mass indexer can use it.

If you’re under Java EE, there’s no additional configuration before the job start.
Entity manager factory will be injected by annotation
`@PersistenceUnit(name = “massindex”)` for all the internal classes. However,
you need to ensure the existence of persistence unit “massindex”, so that we can
detect it and do the CDI. If you’re under Java SE, please confirm the SE
environment and assign specifically the entity manager factory via massindexer’s
related method.


.Additional configuration in Java SE
====
[source, JAVA]
massIndexer = massIndexer.isJavaSE( true )
        .entityManagerFactory( emf );
====

[NOTE]
====
Please make sure that the entity manager factory provided is opened and won’t be
closed during the mass indexing process.
====

