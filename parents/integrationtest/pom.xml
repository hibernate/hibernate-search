<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~ Hibernate Search, full-text search for your domain model
 ~
 ~ License: GNU Lesser General Public License (LGPL), version 2.1 or later
 ~ See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.hibernate.search</groupId>
        <artifactId>hibernate-search-parent</artifactId>
        <version>6.1.0-SNAPSHOT</version>
        <relativePath>../..</relativePath>
    </parent>
    <artifactId>hibernate-search-parent-integrationtest</artifactId>
    <packaging>pom</packaging>

    <name>Hibernate Search Parent POM for Integration Test Artifacts</name>
    <description>Common build configuration for all integration test artifacts (including documentation)</description>

    <properties>
        <skipNexusStagingDeployMojo>true</skipNexusStagingDeployMojo>
        <!-- Skip javadoc generation (forced by releases) -->
        <maven.javadoc.skip>true</maven.javadoc.skip>

        <!-- Apply the test JDK release settings to all code in integration tests, even code in src/main -->
        <maven.compiler.release>${maven.compiler.testRelease}</maven.compiler.release>
        <!--
             Pass these properties as system properties to be able to switch to
             a different database without re-compiling the hibernate.properties file
             (which is located in a dependency of the integration tests modules)
         -->
        <failsafe.jvm.args.hibernate-orm>
            -Dhibernate.dialect=${db.dialect}
            -Dhibernate.connection.driver_class=${jdbc.driver}
            -Dhibernate.connection.url=${jdbc.url}
            -Dhibernate.connection.username=${jdbc.user}
            -Dhibernate.connection.password=${jdbc.pass}
            -Dhibernate.connection.isolation=${jdbc.isolation}
        </failsafe.jvm.args.hibernate-orm>

        <!--
            Consider all sources as tests during Sonar analysis.
            This is important because some analysis rules do not apply to test code.
         -->
        <sonar.sources>${rootProject.emptySubdirectory}</sonar.sources>
        <sonar.tests>${project.basedir}/src</sonar.tests>

        <!-- For some reason, the failsafe plugin uses the modulepath
             even when we didn't define a module-info.java,
             and many things fail because of the modulepath.
             In particular, the backend TCK fails to retrieve TckBackendHelper,
             and Spring Boot ITs fail to detect configuration defined in the main (non-test) code.
             So, disable the modulepath explicitly. -->
        <failsafe.useModulePath>false</failsafe.useModulePath>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.hibernate.search</groupId>
                <artifactId>hibernate-search-integrationtest-backend-tck</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>org.hibernate.search</groupId>
                <artifactId>hibernate-search-util-internal-integrationtest-common</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.search</groupId>
                <artifactId>hibernate-search-util-internal-integrationtest-backend-elasticsearch</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.search</groupId>
                <artifactId>hibernate-search-util-internal-integrationtest-backend-lucene</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.search</groupId>
                <artifactId>hibernate-search-util-internal-integrationtest-mapper-stub</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.search</groupId>
                <artifactId>hibernate-search-util-internal-integrationtest-mapper-orm</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.search</groupId>
                <artifactId>hibernate-search-util-internal-integrationtest-v5migrationhelper</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.search</groupId>
                <artifactId>hibernate-search-util-internal-integrationtest-jbatch-runtime</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.search</groupId>
                <artifactId>hibernate-search-util-internal-integrationtest-jberet-se</artifactId>
                <version>${project.version}</version>
            </dependency>

            <!-- JDBC drivers -->
            <!-- Profile-specific driver, used in most database-sensitive integration tests -->
            <dependency>
                <groupId>${jdbc.driver.groupId}</groupId>
                <artifactId>${jdbc.driver.artifactId}</artifactId>
                <version>${jdbc.driver.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>de.thetaphi</groupId>
                    <artifactId>forbiddenapis</artifactId>
                    <!-- Override the executions defined in the parent module -->
                    <executions>
                        <execution>
                            <id>verify-forbidden-apis</id>
                            <!-- Do not use the main rules at all in integration tests, see below -->
                            <phase>none</phase>
                        </execution>
                        <execution>
                            <id>verify-forbidden-test-apis</id>
                            <goals>
                                <!-- Apply the test rules to all code in integration tests, even code in src/main -->
                                <goal>check</goal>
                                <goal>testCheck</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>io.fabric8</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>${version.docker.maven.plugin}</version>
                    <configuration>
                        <skip>${test.containers.run.skip}</skip>
                        <images>
                            <image>
                                <name>${test.elasticsearch.run.elastic.image.name}:${test.elasticsearch.run.elastic.image.tag}</name>
                                <alias>elasticsearch</alias>
                                <run>
                                    <skip>${test.elasticsearch.run.elastic.skip}</skip>
                                    <env>
                                        <logger.level>WARN</logger.level>
                                        <discovery.type>single-node</discovery.type>
                                        <!-- Prevent swapping
                                             This may trigger warnings upon boot if the system is not correctly set up.
                                             See https://www.elastic.co/guide/en/elasticsearch/reference/7.5/setup-configuration-memory.html#bootstrap-memory_lock
                                         -->
                                        <bootstrap.memory_lock>true</bootstrap.memory_lock>
                                        <!-- fix Docker images for older versions -->
                                        <!-- Older images require HTTP authentication for all requests;
                                             it's not practical for testing, so we disable that.
                                         -->
                                        <xpack.security.enabled>false</xpack.security.enabled>
                                    </env>
                                    <ports>
                                        <port>9200:9200</port>
                                    </ports>
                                    <log>
                                        <prefix>Elasticsearch: </prefix>
                                        <date>default</date>
                                        <color>cyan</color>
                                    </log>
                                    <wait>
                                        <http>
                                            <url>http://localhost:9200</url>
                                            <method>GET</method>
                                            <status>200</status>
                                        </http>
                                        <time>20000</time>
                                    </wait>
                                </run>
                            </image>
                            <image>
                                <name>${test.elasticsearch.run.opendistro.image.name}:${test.elasticsearch.run.opendistro.image.tag}</name>
                                <alias>opendistro-elasticsearch</alias>
                                <run>
                                    <skip>${test.elasticsearch.run.opendistro.skip}</skip>
                                    <env>
                                        <logger.level>WARN</logger.level>
                                        <discovery.type>single-node</discovery.type>
                                        <!-- Prevent swapping, same as the Elasticsearch image above. -->
                                        <bootstrap.memory_lock>true</bootstrap.memory_lock>
                                        <!-- Open Distro for Elasticsearch expects SSL and uses a self-signed certificate by default;
                                             it's not practical for testing, so we disable that.
                                         -->
                                        <opendistro_security.disabled>true</opendistro_security.disabled>
                                        <!-- ISM floods the logs with errors, and we don't need it.
                                             See https://opendistro.github.io/for-elasticsearch-docs/docs/im/ism/settings/
                                         -->
                                        <opendistro.index_state_management.enabled>false</opendistro.index_state_management.enabled>
                                    </env>
                                    <ports>
                                        <port>9200:9200</port>
                                    </ports>
                                    <log>
                                        <prefix>OpenDistro-ES: </prefix>
                                        <date>default</date>
                                        <color>cyan</color>
                                    </log>
                                    <wait>
                                        <http>
                                            <url>http://localhost:9200</url>
                                            <method>GET</method>
                                            <status>200</status>
                                        </http>
                                        <time>20000</time>
                                    </wait>
                                </run>
                            </image>
                            <image>
                                <name>${test.elasticsearch.run.opensearch.image.name}:${test.elasticsearch.run.opensearch.image.tag}</name>
                                <alias>opensearch</alias>
                                <run>
                                    <skip>${test.elasticsearch.run.opensearch.skip}</skip>
                                    <env>
                                        <logger.level>WARN</logger.level>
                                        <discovery.type>single-node</discovery.type>
                                        <!-- Prevent swapping, same as the Elasticsearch image above. -->
                                        <bootstrap.memory_lock>true</bootstrap.memory_lock>
                                        <!-- OpenSearch expects SSL and uses a self-signed certificate by default;
                                             it's not practical for testing, so we disable that.
                                         -->
                                        <plugins.security.disabled>true</plugins.security.disabled>
                                        <!-- ISM floods the logs with errors, and we don't need it.
                                             See https://docs-beta.opensearch.org/im-plugin/ism/settings/
                                         -->
                                        <plugins.index_state_management.enabled>false</plugins.index_state_management.enabled>
                                    </env>
                                    <ports>
                                        <port>9200:9200</port>
                                    </ports>
                                    <log>
                                        <prefix>OpenSearch: </prefix>
                                        <date>default</date>
                                        <color>cyan</color>
                                    </log>
                                    <wait>
                                        <http>
                                            <url>http://localhost:9200</url>
                                            <method>GET</method>
                                            <status>200</status>
                                        </http>
                                        <time>20000</time>
                                    </wait>
                                </run>
                            </image>
                            <image>
                                <name>${test.database.run.postgres.image.name}:${test.database.run.postgres.image.tag}</name>
                                <alias>postgres</alias>
                                <run>
                                    <skip>${test.database.run.postgres.skip}</skip>
                                    <env>
                                        <POSTGRES_USER>hibernate_orm_test</POSTGRES_USER>
                                        <POSTGRES_PASSWORD>hibernate_orm_test</POSTGRES_PASSWORD>
                                        <POSTGRES_DB>hibernate_orm_test</POSTGRES_DB>
                                    </env>
                                    <ports>
                                        <port>5432:5432</port>
                                    </ports>
                                    <log>
                                        <prefix>PostgreSQL: </prefix>
                                        <date>default</date>
                                        <color>blue</color>
                                    </log>
                                    <wait>
                                        <log>database system is ready to accept connections</log>
                                    </wait>
                                </run>
                            </image>
                            <image>
                                <name>${test.database.run.mariadb.image.name}:${test.database.run.mariadb.image.tag}</name>
                                <alias>mariadb</alias>
                                <run>
                                    <skip>${test.database.run.mariadb.skip}</skip>
                                    <cmd>--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</cmd>
                                    <env>
                                        <MYSQL_USER>hibernate_orm_test</MYSQL_USER>
                                        <MYSQL_PASSWORD>hibernate_orm_test</MYSQL_PASSWORD>
                                        <MYSQL_DATABASE>hibernate_orm_test</MYSQL_DATABASE>
                                        <MYSQL_RANDOM_ROOT_PASSWORD>true</MYSQL_RANDOM_ROOT_PASSWORD>
                                    </env>
                                    <ports>
                                        <port>3306:3306</port>
                                    </ports>
                                    <log>
                                        <prefix>MariaDB: </prefix>
                                        <date>default</date>
                                        <color>blue</color>
                                    </log>
                                    <!-- Speed things up a bit by not actually flushing writes to disk -->
                                    <tmpfs>/var/lib/mysql</tmpfs>
                                    <wait>
                                        <time>20000</time>
                                        <exec>
                                            <postStart>mysqladmin ping -h localhost -u hibernate_orm_test -phibernate_orm_test</postStart>
                                        </exec>
                                    </wait>
                                </run>
                            </image>
                        </images>
                        <!--Stops all images currently running, not just those we just started.
                          Useful to stop processes still running from a previously failed integration test run -->
                        <allContainers>true</allContainers>
                    </configuration>
                    <executions>
                        <execution>
                            <id>docker-start</id>
                            <phase>pre-integration-test</phase>
                            <goals>
                                <goal>stop</goal>
                                <goal>start</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>docker-stop</id>
                            <phase>post-integration-test</phase>
                            <goals>
                                <goal>stop</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <!-- The profiles `skippingAllTests` and `skippingIntegrationTests` are currently duplicates,
            as one can't trigger the profile activation on either/or property -->
        <profile>
            <id>skippingAllTests</id>
            <activation>
                <property>
                    <name>skipTests</name>
                </property>
            </activation>
            <properties>
                <!-- This is to avoid starting containers for each module needing integration test -->
                <test.containers.run.skip>true</test.containers.run.skip>
            </properties>
        </profile>
        <profile>
            <id>skippingIntegrationTests</id>
            <activation>
                <property>
                    <name>skipITs</name>
                </property>
            </activation>
            <properties>
                <!-- This is to avoid starting containers for each module needing integration test -->
                <test.containers.run.skip>true</test.containers.run.skip>
            </properties>
        </profile>

        <!-- =============================== -->
        <!-- Elasticsearch IT profiles       -->
        <!-- =============================== -->
        <!--
             Different profiles are needed to handle the environment setup (which is handled in Maven,
             on contrary to the various database profiles).

             To run tests against a different version of Elasticsearch, see README.md.
          -->

        <!-- Profile enabled when an Elasticsearch instance must be run by Maven -->
        <profile>
            <id>elasticsearch-run</id>
            <activation>
                <!-- Activate by default, i.e. if test.elasticsearch.connection.uris has not been defined explicitly -->
                <property>
                    <name>!test.elasticsearch.connection.uris</name>
                </property>
            </activation>
            <properties>
                <test.elasticsearch.connection.uris>http://localhost:9200</test.elasticsearch.connection.uris>
            </properties>
        </profile>
        <!-- Profile enabled when an Elasticsearch instance must NOT be run by Maven -->
        <profile>
            <id>elasticsearch-do-not-run</id>
            <activation>
                <!-- Activate if test.elasticsearch.connection.uris has been defined explicitly -->
                <property>
                    <name>test.elasticsearch.connection.uris</name>
                </property>
            </activation>
            <properties>
                <!-- Skipping to start all containers here -->
                <!-- When the uris property is set, usually we don't need any container (neither ES nor others). -->
                <test.containers.run.skip>true</test.containers.run.skip>
            </properties>
        </profile>

        <profile>
            <id>aws</id>
            <activation>
                <property>
                    <name>test.elasticsearch.connection.aws.signing.enabled</name>
                    <value>true</value>
                </property>
            </activation>
            <properties>
                <!-- Tests may fail unexpectedly with AWS Elasticsearch.
                     In particular, we sometimes get timeouts, seemingly for no particular reason.
                     Thus we need to retry tests when they fail, to be sure it's not just a transient failure.
                     Note that this will not re-run tests when they fail in @BeforeClass/@AfterClass in particular,
                     so we also have retry steps in the Jenkinsfile.
                 -->
                <failsafe.rerunFailingTestsCount>4</failsafe.rerunFailingTestsCount>
            </properties>
        </profile>

        <!-- Elasticsearch 5.6 test environment -->
        <profile>
            <id>elasticsearch-5.6</id>
            <properties>
                <test.elasticsearch.run.elastic.skip>false</test.elasticsearch.run.elastic.skip>
                <test.elasticsearch.connection.distribution>elastic</test.elasticsearch.connection.distribution>
                <test.elasticsearch.connection.version>${version.org.elasticsearch.latest-5.6}</test.elasticsearch.connection.version>
                <test.elasticsearch.testdialect>org.hibernate.search.util.impl.integrationtest.backend.elasticsearch.dialect.Elasticsearch5TestDialect</test.elasticsearch.testdialect>
            </properties>
        </profile>

        <!-- Elasticsearch 6.0 to 6.2 test environment -->
        <profile>
            <id>elasticsearch-6.0</id>
            <properties>
                <test.elasticsearch.run.elastic.skip>false</test.elasticsearch.run.elastic.skip>
                <test.elasticsearch.connection.distribution>elastic</test.elasticsearch.connection.distribution>
                <test.elasticsearch.connection.version>${version.org.elasticsearch.latest-6.2}</test.elasticsearch.connection.version>
                <test.elasticsearch.testdialect>org.hibernate.search.util.impl.integrationtest.backend.elasticsearch.dialect.Elasticsearch60TestDialect</test.elasticsearch.testdialect>
            </properties>
        </profile>

        <!-- Elasticsearch 6.3 test environment -->
        <profile>
            <id>elasticsearch-6.3</id>
            <properties>
                <test.elasticsearch.run.elastic.skip>false</test.elasticsearch.run.elastic.skip>
                <test.elasticsearch.connection.distribution>elastic</test.elasticsearch.connection.distribution>
                <test.elasticsearch.connection.version>${version.org.elasticsearch.latest-6.3}</test.elasticsearch.connection.version>
                <test.elasticsearch.testdialect>org.hibernate.search.util.impl.integrationtest.backend.elasticsearch.dialect.Elasticsearch63TestDialect</test.elasticsearch.testdialect>
            </properties>
        </profile>

        <!-- Elasticsearch 6.4 to 6.6 test environment -->
        <profile>
            <id>elasticsearch-6.4</id>
            <properties>
                <test.elasticsearch.run.elastic.skip>false</test.elasticsearch.run.elastic.skip>
                <test.elasticsearch.connection.distribution>elastic</test.elasticsearch.connection.distribution>
                <test.elasticsearch.connection.version>${version.org.elasticsearch.latest-6.6}</test.elasticsearch.connection.version>
                <test.elasticsearch.testdialect>org.hibernate.search.util.impl.integrationtest.backend.elasticsearch.dialect.Elasticsearch64TestDialect</test.elasticsearch.testdialect>
            </properties>
        </profile>

        <!-- Elasticsearch 6.7 test environment -->
        <profile>
            <id>elasticsearch-6.7</id>
            <properties>
                <test.elasticsearch.run.elastic.skip>false</test.elasticsearch.run.elastic.skip>
                <test.elasticsearch.connection.distribution>elastic</test.elasticsearch.connection.distribution>
                <test.elasticsearch.connection.version>${version.org.elasticsearch.latest-6.7}</test.elasticsearch.connection.version>
                <test.elasticsearch.testdialect>org.hibernate.search.util.impl.integrationtest.backend.elasticsearch.dialect.Elasticsearch67TestDialect</test.elasticsearch.testdialect>
            </properties>
        </profile>

        <!-- Elasticsearch 6.8 test environment -->
        <profile>
            <id>elasticsearch-6.8</id>
            <properties>
                <test.elasticsearch.run.elastic.skip>false</test.elasticsearch.run.elastic.skip>
                <test.elasticsearch.connection.distribution>elastic</test.elasticsearch.connection.distribution>
                <test.elasticsearch.connection.version>${version.org.elasticsearch.latest-6.8}</test.elasticsearch.connection.version>
                <test.elasticsearch.testdialect>org.hibernate.search.util.impl.integrationtest.backend.elasticsearch.dialect.Elasticsearch68TestDialect</test.elasticsearch.testdialect>
            </properties>
        </profile>

        <!-- Elasticsearch 7.0 to 7.2 test environment -->
        <profile>
            <id>elasticsearch-7.0</id>
            <properties>
                <test.elasticsearch.run.elastic.skip>false</test.elasticsearch.run.elastic.skip>
                <test.elasticsearch.connection.distribution>elastic</test.elasticsearch.connection.distribution>
                <test.elasticsearch.connection.version>${version.org.elasticsearch.latest-7.2}</test.elasticsearch.connection.version>
                <test.elasticsearch.testdialect>org.hibernate.search.util.impl.integrationtest.backend.elasticsearch.dialect.Elasticsearch70TestDialect</test.elasticsearch.testdialect>
            </properties>
        </profile>

        <!-- Elasticsearch 7.3 to 7.6 test environment -->
        <profile>
            <id>elasticsearch-7.3</id>
            <properties>
                <test.elasticsearch.run.elastic.skip>false</test.elasticsearch.run.elastic.skip>
                <test.elasticsearch.connection.distribution>elastic</test.elasticsearch.connection.distribution>
                <test.elasticsearch.connection.version>${version.org.elasticsearch.latest-7.6}</test.elasticsearch.connection.version>
                <test.elasticsearch.testdialect>org.hibernate.search.util.impl.integrationtest.backend.elasticsearch.dialect.Elasticsearch73TestDialect</test.elasticsearch.testdialect>
            </properties>
        </profile>

        <!-- Elasticsearch 7.7 test environment -->
        <profile>
            <id>elasticsearch-7.7</id>
            <properties>
                <test.elasticsearch.run.elastic.skip>false</test.elasticsearch.run.elastic.skip>
                <test.elasticsearch.connection.distribution>elastic</test.elasticsearch.connection.distribution>
                <test.elasticsearch.connection.version>${version.org.elasticsearch.latest-7.7}</test.elasticsearch.connection.version>
                <test.elasticsearch.testdialect>org.hibernate.search.util.impl.integrationtest.backend.elasticsearch.dialect.Elasticsearch77TestDialect</test.elasticsearch.testdialect>
            </properties>
        </profile>

        <!-- Elasticsearch 7.8 to 7.9 test environment -->
        <profile>
            <id>elasticsearch-7.8</id>
            <properties>
                <test.elasticsearch.run.elastic.skip>false</test.elasticsearch.run.elastic.skip>
                <test.elasticsearch.connection.distribution>elastic</test.elasticsearch.connection.distribution>
                <test.elasticsearch.connection.version>${version.org.elasticsearch.latest-7.9}</test.elasticsearch.connection.version>
                <test.elasticsearch.testdialect>org.hibernate.search.util.impl.integrationtest.backend.elasticsearch.dialect.Elasticsearch78TestDialect</test.elasticsearch.testdialect>
            </properties>
        </profile>

        <!-- Elasticsearch 7.10 test environment (default) -->
        <profile>
            <id>elasticsearch-7.10</id>
            <activation>
                <!-- Activate by default, i.e. if test.elasticsearch.connection.version has not been defined explicitly -->
                <property>
                    <name>!test.elasticsearch.connection.version</name>
                </property>
            </activation>
            <properties>
                <test.elasticsearch.run.elastic.skip>false</test.elasticsearch.run.elastic.skip>
                <test.elasticsearch.connection.distribution>elastic</test.elasticsearch.connection.distribution>
                <test.elasticsearch.connection.version>${version.org.elasticsearch.latest-7.10}</test.elasticsearch.connection.version>
                <test.elasticsearch.testdialect>org.hibernate.search.util.impl.integrationtest.backend.elasticsearch.dialect.Elasticsearch710TestDialect</test.elasticsearch.testdialect>
            </properties>
        </profile>

        <!-- Elasticsearch 7.11 test environment -->
        <profile>
            <id>elasticsearch-7.11</id>
            <properties>
                <test.elasticsearch.run.elastic.skip>false</test.elasticsearch.run.elastic.skip>
                <test.elasticsearch.connection.distribution>elastic</test.elasticsearch.connection.distribution>
                <test.elasticsearch.connection.version>${version.org.elasticsearch.latest-7.11}</test.elasticsearch.connection.version>
                <test.elasticsearch.testdialect>org.hibernate.search.util.impl.integrationtest.backend.elasticsearch.dialect.Elasticsearch710TestDialect</test.elasticsearch.testdialect>
            </properties>
        </profile>

        <!-- Elasticsearch 7.12+ test environment -->
        <profile>
            <id>elasticsearch-7.12</id>
            <properties>
                <test.elasticsearch.run.elastic.skip>false</test.elasticsearch.run.elastic.skip>
                <test.elasticsearch.connection.distribution>elastic</test.elasticsearch.connection.distribution>
                <test.elasticsearch.connection.version>${version.org.elasticsearch.latest-7.13}</test.elasticsearch.connection.version>
                <test.elasticsearch.testdialect>org.hibernate.search.util.impl.integrationtest.backend.elasticsearch.dialect.Elasticsearch712TestDialect</test.elasticsearch.testdialect>
            </properties>
        </profile>

        <!-- OpenDistro for Elasticsearch 1.13+ test environment -->
        <profile>
            <id>opendistro-elasticsearch-1.13</id>
            <properties>
                <test.elasticsearch.run.opendistro.skip>false</test.elasticsearch.run.opendistro.skip>
                <test.elasticsearch.run.opendistro.image.tag>${version.io.github.opendistro.elasticsearch.latest-1.13}</test.elasticsearch.run.opendistro.image.tag>
                <test.elasticsearch.connection.distribution>elastic</test.elasticsearch.connection.distribution>
                <test.elasticsearch.connection.version>${version.io.github.opendistro.elasticsearch.latest-1.13.reported}</test.elasticsearch.connection.version>
                <test.elasticsearch.testdialect>org.hibernate.search.util.impl.integrationtest.backend.elasticsearch.dialect.Elasticsearch710TestDialect</test.elasticsearch.testdialect>
            </properties>
        </profile>

        <!-- OpenSearch 1.0+ test environment -->
        <profile>
            <id>opensearch-1.0</id>
            <properties>
                <test.elasticsearch.run.opensearch.skip>false</test.elasticsearch.run.opensearch.skip>
                <test.elasticsearch.connection.distribution>opensearch</test.elasticsearch.connection.distribution>
                <test.elasticsearch.connection.version>${version.org.opensearch.latest-1.0}</test.elasticsearch.connection.version>
                <test.elasticsearch.testdialect>org.hibernate.search.util.impl.integrationtest.backend.elasticsearch.dialect.Elasticsearch710TestDialect</test.elasticsearch.testdialect>
            </properties>
        </profile>

        <!-- =============================== -->
        <!-- Database profiles               -->
        <!-- =============================== -->
        <!-- H2 is the default -->
        <profile>
            <id>h2</id>
            <activation>
                <property>
                    <name>inMemoryTests</name>
                    <value>!true</value>
                </property>
            </activation>
            <properties>
                <db.dialect>org.hibernate.dialect.H2Dialect</db.dialect>
                <jdbc.driver.groupId>com.h2database</jdbc.driver.groupId>
                <jdbc.driver.artifactId>h2</jdbc.driver.artifactId>
                <jdbc.driver.version>${version.com.h2database}</jdbc.driver.version>
                <jdbc.driver>org.h2.Driver</jdbc.driver>
                <jdbc.url>jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1</jdbc.url>
                <jdbc.user>sa</jdbc.user>
                <jdbc.pass>sa</jdbc.pass>
                <jdbc.isolation />
            </properties>
        </profile>

        <!--
            ###################################################################
            Profiles naming db instances in the Red Hat QA/QE lab

            First, those with OSS drivers
            ###################################################################
        -->

        <!-- The MySQL 5.1 test environment -->
        <profile>
            <id>mysql51</id>
            <properties>
                <db.dialect>org.hibernate.dialect.MySQL5InnoDBDialect</db.dialect>
                <jdbc.driver.groupId>mysql</jdbc.driver.groupId>
                <jdbc.driver.artifactId>mysql-connector-java</jdbc.driver.artifactId>
                <!-- Version 6.0.5 fails with a ArrayIndexOutOfBoundsException during connection, so we'll stick to 5.x for now -->
                <jdbc.driver.version>5.1.13</jdbc.driver.version>
                <jdbc.driver>com.mysql.jdbc.Driver</jdbc.driver>
                <jdbc.url>jdbc:mysql://vmg02.mw.lab.eng.bos.redhat.com/searctru</jdbc.url>
                <jdbc.user>searctru</jdbc.user>
                <jdbc.pass>searctru</jdbc.pass>
                <jdbc.isolation />
            </properties>
        </profile>

        <!-- The PostgreSQL 8.4  test environment -->
        <profile>
            <id>postgresql84</id>
            <properties>
                <db.dialect>org.hibernate.dialect.PostgreSQL82Dialect</db.dialect>
                <jdbc.driver.groupId>org.postgresql</jdbc.driver.groupId>
                <jdbc.driver.artifactId>postgresql</jdbc.driver.artifactId>
                <jdbc.driver.version>42.1.1</jdbc.driver.version>
                <jdbc.driver>org.postgresql.Driver</jdbc.driver>
                <jdbc.url>jdbc:postgresql://notinstalled.lab.eng.bos.redhat.com:5432:searctru</jdbc.url>
                <jdbc.user>searctru</jdbc.user>
                <jdbc.pass>searctru</jdbc.pass>
                <jdbc.isolation />
            </properties>
        </profile>

        <!-- PostgreSQL Docker container for tests -->
        <!-- See test.database.run.postgresql.image.tag for the server version in use -->
        <profile>
            <id>ci-postgresql</id>
            <properties>
                <test.database.run.postgres.skip>false</test.database.run.postgres.skip>
                <db.dialect>org.hibernate.dialect.PostgreSQL10Dialect</db.dialect>
                <jdbc.driver.groupId>org.postgresql</jdbc.driver.groupId>
                <jdbc.driver.artifactId>postgresql</jdbc.driver.artifactId>
                <jdbc.driver.version>42.2.19</jdbc.driver.version>
                <jdbc.driver>org.postgresql.Driver</jdbc.driver>
                <jdbc.url>jdbc:postgresql://localhost:5432/hibernate_orm_test</jdbc.url>
                <jdbc.user>hibernate_orm_test</jdbc.user>
                <jdbc.pass>hibernate_orm_test</jdbc.pass>
                <jdbc.isolation />
            </properties>
        </profile>

        <!-- MariaDB Docker container for tests -->
        <!-- See test.database.run.mariadb.image.tag for the server version in use -->
        <profile>
            <id>ci-mariadb</id>
            <properties>
                <test.database.run.mariadb.skip>false</test.database.run.mariadb.skip>
                <db.dialect>org.hibernate.dialect.MariaDB103Dialect</db.dialect>
                <jdbc.driver.groupId>org.mariadb.jdbc</jdbc.driver.groupId>
                <jdbc.driver.artifactId>mariadb-java-client</jdbc.driver.artifactId>
                <jdbc.driver.version>2.2.4</jdbc.driver.version>
                <jdbc.driver>org.mariadb.jdbc.Driver</jdbc.driver>
                <jdbc.url>jdbc:mariadb://localhost/hibernate_orm_test</jdbc.url>
                <jdbc.user>hibernate_orm_test</jdbc.user>
                <jdbc.pass>hibernate_orm_test</jdbc.pass>
                <jdbc.isolation />
            </properties>
        </profile>

        <!--
            ###################################################################
            Then, those with commercial drivers
            ###################################################################
        -->
        <!--
             Those drivers are not available on public repos.
             In CI jobs, we use internal build tools to fetch the drivers
             and make the jars available to the build.
             Thus, the maven coordinates of the drivers below are fake.
             See https://svn.devel.redhat.com/repos/jboss-qa/hudson/config_repository/scripts/groovy.classes/hudson/util/JDBCLoader.groovy
        -->

        <!-- The DB2 9.7 test environment (using 9x drivers)-->
        <profile>
            <id>db2-97</id>
            <properties>
                <db.dialect>org.hibernate.dialect.DB2Dialect</db.dialect>
                <!-- These maven coordinates are fake (see above) -->
                <jdbc.driver.groupId>jdbcdrivers</jdbc.driver.groupId>
                <jdbc.driver.artifactId>db2-97</jdbc.driver.artifactId>
                <jdbc.driver.version>4.11.77</jdbc.driver.version>
                <jdbc.driver>com.ibm.db2.jcc.DB2Driver</jdbc.driver>
                <jdbc.url>jdbc:db2://vmg06.mw.lab.eng.bos.redhat.com:50000/jbossqa</jdbc.url>
                <jdbc.user>searctru</jdbc.user>
                <jdbc.pass>searctru</jdbc.pass>
                <jdbc.isolation />
            </properties>
        </profile>

        <!-- The Oracle11g test environment -->
        <profile>
            <id>oracle11gR1</id>
            <properties>
                <db.dialect>org.hibernate.dialect.Oracle10gDialect</db.dialect>
                <!-- These maven coordinates are fake (see above) -->
                <jdbc.driver.groupId>jdbcdrivers</jdbc.driver.groupId>
                <jdbc.driver.artifactId>oracle</jdbc.driver.artifactId>
                <jdbc.driver.version>11.2.0.2.0</jdbc.driver.version>
                <jdbc.driver>oracle.jdbc.driver.OracleDriver</jdbc.driver>
                <jdbc.url>jdbc:oracle:thin:@dev04.qa.atl2.redhat.com:1521:qaora11</jdbc.url>
                <jdbc.user>searctru</jdbc.user>
                <jdbc.pass>searctru</jdbc.pass>
                <jdbc.isolation />
            </properties>
        </profile>

        <profile>
            <id>oracle11gR2</id>
            <properties>
                <db.dialect>org.hibernate.dialect.Oracle10gDialect</db.dialect>
                <!-- These maven coordinates are fake (see above) -->
                <jdbc.driver.groupId>jdbcdrivers</jdbc.driver.groupId>
                <jdbc.driver.artifactId>oracle</jdbc.driver.artifactId>
                <jdbc.driver.version>11.2.0.2.0</jdbc.driver.version>
                <jdbc.driver>oracle.jdbc.driver.OracleDriver</jdbc.driver>
                <jdbc.url>jdbc:oracle:thin:@dev04.qa.atl2.redhat.com:1521:qaora11</jdbc.url>
                <jdbc.user>searctru</jdbc.user>
                <jdbc.pass>searctru</jdbc.pass>
                <jdbc.isolation />
            </properties>
        </profile>

        <!-- The Oracle11gRAC test environment -->
        <profile>
            <id>oracle11gR1RAC</id>
            <properties>
                <db.dialect>org.hibernate.dialect.Oracle10gDialect</db.dialect>
                <!-- These maven coordinates are fake (see above) -->
                <jdbc.driver.groupId>jdbcdrivers</jdbc.driver.groupId>
                <jdbc.driver.artifactId>oracle</jdbc.driver.artifactId>
                <jdbc.driver.version>11.2.0.2.0</jdbc.driver.version>
                <jdbc.driver>oracle.jdbc.driver.OracleDriver</jdbc.driver>
                <jdbc.url>
                    jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=vmg24-vip.mw.lab.eng.bos.redhat.com)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=vmg25-vip.mw.lab.eng.bos.redhat.com)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=qarac.jboss)))
                </jdbc.url>
                <jdbc.user>searctru</jdbc.user>
                <jdbc.pass>searctru</jdbc.pass>
                <jdbc.isolation />
            </properties>
        </profile>
        <profile>
            <id>oracle11gR2RAC</id>
            <properties>
                <db.dialect>org.hibernate.dialect.Oracle10gDialect</db.dialect>
                <!-- These maven coordinates are fake (see above) -->
                <jdbc.driver.groupId>jdbcdrivers</jdbc.driver.groupId>
                <jdbc.driver.artifactId>oracle</jdbc.driver.artifactId>
                <jdbc.driver.version>11.2.0.2.0</jdbc.driver.version>
                <jdbc.driver>oracle.jdbc.driver.OracleDriver</jdbc.driver>
                <jdbc.url>
                    jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=vmg24-vip.mw.lab.eng.bos.redhat.com)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=vmg25-vip.mw.lab.eng.bos.redhat.com)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=qarac.jboss)))
                </jdbc.url>
                <jdbc.user>searctru</jdbc.user>
                <jdbc.pass>searctru</jdbc.pass>
                <jdbc.isolation />
            </properties>
        </profile>

        <!-- The Sybase ASE 15.5 test environment -->
        <profile>
            <id>sybase155</id>
            <properties>
                <db.dialect>org.hibernate.dialect.SybaseASE15Dialect</db.dialect>
                <!-- These maven coordinates are fake (see above) -->
                <jdbc.driver.groupId>jdbcdrivers</jdbc.driver.groupId>
                <jdbc.driver.artifactId>sybase</jdbc.driver.artifactId>
                <jdbc.driver.version>26502</jdbc.driver.version>
                <jdbc.driver>com.sybase.jdbc4.jdbc.SybDriver</jdbc.driver>
                <jdbc.url>jdbc:sybase:Tds:vmg07.mw.lab.eng.bos.redhat.com:5000/searctru</jdbc.url>
                <jdbc.user>searctru</jdbc.user>
                <jdbc.pass>searctru</jdbc.pass>
                <jdbc.isolation />
            </properties>
        </profile>
        <profile>
            <id>sybase155-jtds</id>
            <properties>
                <db.dialect>org.hibernate.dialect.SybaseASE15Dialect</db.dialect>
                <!-- These maven coordinates are fake (see above) -->
                <jdbc.driver.groupId>net.sourceforge.jtds</jdbc.driver.groupId>
                <jdbc.driver.artifactId>jtds</jdbc.driver.artifactId>
                <jdbc.driver.version>1.2.4</jdbc.driver.version>
                <jdbc.driver>net.sourceforge.jtds.jdbc.Driver</jdbc.driver>
                <jdbc.url>jdbc:jtds:sybase://vmg07.mw.lab.eng.bos.redhat.com:5000/searctru</jdbc.url>
                <jdbc.user>searctru</jdbc.user>
                <jdbc.pass>searctru</jdbc.pass>
                <jdbc.isolation />
            </properties>
        </profile>

        <!-- The SQLServer2008 R1 (MS JDBC) test environment -->
        <profile>
            <id>mssql2008R1</id>
            <properties>
                <db.dialect>org.hibernate.dialect.SQLServer2008Dialect</db.dialect>
                <!-- These maven coordinates are fake (see above) -->
                <jdbc.driver.groupId>jdbcdrivers</jdbc.driver.groupId>
                <jdbc.driver.artifactId>mssql</jdbc.driver.artifactId>
                <jdbc.driver.version>3.0.1301.101</jdbc.driver.version>
                <jdbc.driver>com.microsoft.sqlserver.jdbc.SQLServerDriver</jdbc.driver>
                <jdbc.url>jdbc:sqlserver://vmg04.mw.lab.eng.bos.redhat.com:1433</jdbc.url>
                <jdbc.user>searctru</jdbc.user>
                <jdbc.pass>searctru</jdbc.pass>
                <jdbc.isolation>4096</jdbc.isolation>
            </properties>
        </profile>

        <!-- The SQLServer2008 R2 (MS JDBC) test environment -->
        <profile>
            <id>mssql2008R2</id>
            <properties>
                <db.dialect>org.hibernate.dialect.SQLServer2008Dialect</db.dialect>
                <!-- These maven coordinates are fake (see above) -->
                <jdbc.driver.groupId>jdbcdrivers</jdbc.driver.groupId>
                <jdbc.driver.artifactId>mssql</jdbc.driver.artifactId>
                <jdbc.driver.version>3.0.1301.101</jdbc.driver.version>
                <jdbc.driver>com.microsoft.sqlserver.jdbc.SQLServerDriver</jdbc.driver>
                <jdbc.url>jdbc:sqlserver://vmg04.mw.lab.eng.bos.redhat.com:1433</jdbc.url>
                <jdbc.user>searctru</jdbc.user>
                <jdbc.pass>searctru</jdbc.pass>
                <jdbc.isolation>4096</jdbc.isolation>
            </properties>
        </profile>
    </profiles>
</project>

