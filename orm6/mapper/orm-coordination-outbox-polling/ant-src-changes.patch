diff --git a/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/cfg/HibernateOrmMapperOutboxPollingSettings.java b/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/cfg/HibernateOrmMapperOutboxPollingSettings.java
index 67a2ed156d..771f3cc9cd 100644
--- a/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/cfg/HibernateOrmMapperOutboxPollingSettings.java
+++ b/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/cfg/HibernateOrmMapperOutboxPollingSettings.java
@@ -8,9 +8,9 @@
 
 import static java.lang.String.join;
 
-import org.hibernate.id.UUIDGenerator;
 import org.hibernate.id.uuid.CustomVersionOneStrategy;
 import org.hibernate.id.uuid.StandardRandomStrategy;
+import org.hibernate.id.uuid.UuidGenerator;
 import org.hibernate.search.mapper.orm.cfg.HibernateOrmMapperSettings;
 import org.hibernate.search.util.common.annotation.Incubating;
 import org.hibernate.search.util.common.impl.HibernateSearchConfiguration;
@@ -392,14 +392,15 @@ private HibernateOrmMapperOutboxPollingSettings() {
 			PREFIX + Radicals.COORDINATION_ENTITY_MAPPING_OUTBOXEVENT_TABLE;
 
 	/**
-	 * The name of UUID generator strategy to be used by {@link UUIDGenerator} for the outbox event table.
+	 * The name of UUID generator strategy to be used by {@link UuidGenerator} for the outbox event table.
 	 * <p>
 	 * Only available when {@value HibernateOrmMapperSettings#COORDINATION_STRATEGY} is
 	 * {@value HibernateOrmMapperOutboxPollingSettings#COORDINATION_STRATEGY_NAME}.
 	 * <p>
 	 * The default for this value is {@link  Defaults#COORDINATION_ENTITY_MAPPING_OUTBOX_EVENT_UUID_GEN_STRATEGY}.
 	 *
-	 * @see UUIDGenerator
+	 * @see UuidGenerator
+	 * @see org.hibernate.annotations.UuidGenerator
 	 * @see CustomVersionOneStrategy
 	 * @see StandardRandomStrategy
 	 */
@@ -451,14 +452,14 @@ private HibernateOrmMapperOutboxPollingSettings() {
 			PREFIX + Radicals.COORDINATION_ENTITY_MAPPING_AGENT_TABLE;
 
 	/**
-	 * The name of UUID generator strategy to be used by {@link UUIDGenerator} for the agent table.
+	 * The name of UUID generator strategy to be used by {@link UuidGenerator} for the agent table.
 	 * <p>
 	 * Only available when {@value HibernateOrmMapperSettings#COORDINATION_STRATEGY} is
 	 * {@value HibernateOrmMapperOutboxPollingSettings#COORDINATION_STRATEGY_NAME}.
 	 * <p>
 	 * The default for this value is {@link  Defaults#COORDINATION_ENTITY_MAPPING_AGENT_UUID_GEN_STRATEGY}.
 	 *
-	 * @see UUIDGenerator
+	 * @see UuidGenerator
 	 * @see CustomVersionOneStrategy
 	 * @see StandardRandomStrategy
 	 */
diff --git a/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/cluster/impl/OutboxPollingAgentAdditionalJaxbMappingProducer.java b/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/cluster/impl/OutboxPollingAgentAdditionalJaxbMappingProducer.java
index f42125b5a8..ded12df777 100644
--- a/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/cluster/impl/OutboxPollingAgentAdditionalJaxbMappingProducer.java
+++ b/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/cluster/impl/OutboxPollingAgentAdditionalJaxbMappingProducer.java
@@ -39,6 +39,8 @@
 
 	private static final Log log = LoggerFactory.make( Log.class, MethodHandles.lookup() );
 
+	public static final String HIBERNATE_SEARCH = "hibernate-search";
+
 	public static final String CLASS_NAME = Agent.class.getName();
 
 	// Setting both the JPA entity name and the native entity name to the FQCN so that:
@@ -175,7 +177,7 @@ public Collection<MappingDocument> produceMappings(ConfigurationPropertySource p
 
 		JaxbHbmHibernateMapping root = (JaxbHbmHibernateMapping) binding.getRoot();
 
-		MappingDocument mappingDocument = new MappingDocument( root, origin, buildingContext );
+		MappingDocument mappingDocument = new MappingDocument( HIBERNATE_SEARCH, root, origin, buildingContext );
 		return Collections.singletonList( mappingDocument );
 	}
 }
diff --git a/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/event/impl/OutboxEventLoader.java b/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/event/impl/OutboxEventLoader.java
index abe8ee8ef4..aa23bdb841 100644
--- a/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/event/impl/OutboxEventLoader.java
+++ b/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/event/impl/OutboxEventLoader.java
@@ -49,7 +49,7 @@ final class OutboxEventLoader implements ToStringTreeAppendable {
 		// so we can afford to just skip events that are already locked,
 		// and process them later when they are no longer locked.
 		if ( dialect.supportsSkipLocked() ) {
-			lockOptions = new LockOptions( LockMode.PESSIMISTIC_WRITE ).setTimeOut( LockOptions.SKIP_LOCKED );
+			lockOptions = new LockOptions( LockMode.UPGRADE_SKIPLOCKED );
 		}
 		// If SKIP_LOCKED is not supported, we just do basic locking and hope for the best
 		// (in particular we hope for transaction deadlocks to be detected by the database and result in a failure,
diff --git a/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/event/impl/OutboxPollingOutboxEventAdditionalJaxbMappingProducer.java b/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/event/impl/OutboxPollingOutboxEventAdditionalJaxbMappingProducer.java
index ea4ccc5e6e..5f7479025e 100644
--- a/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/event/impl/OutboxPollingOutboxEventAdditionalJaxbMappingProducer.java
+++ b/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/event/impl/OutboxPollingOutboxEventAdditionalJaxbMappingProducer.java
@@ -30,6 +30,7 @@
 import org.hibernate.search.mapper.orm.coordination.outboxpolling.cfg.impl.UuidDataTypeUtils;
 import org.hibernate.search.mapper.orm.coordination.outboxpolling.cfg.UuidGenerationStrategy;
 import org.hibernate.search.mapper.orm.coordination.outboxpolling.cfg.spi.HibernateOrmMapperOutboxPollingSpiSettings;
+import org.hibernate.search.mapper.orm.coordination.outboxpolling.cluster.impl.OutboxPollingAgentAdditionalJaxbMappingProducer;
 import org.hibernate.search.mapper.orm.coordination.outboxpolling.logging.impl.Log;
 import org.hibernate.search.util.common.annotation.impl.SuppressForbiddenApis;
 import org.hibernate.search.util.common.logging.impl.LoggerFactory;
@@ -39,6 +40,8 @@
 
 	private static final Log log = LoggerFactory.make( Log.class, MethodHandles.lookup() );
 
+	private static final String HIBERNATE_SEARCH = OutboxPollingAgentAdditionalJaxbMappingProducer.HIBERNATE_SEARCH;
+
 	private static final String CLASS_NAME = OutboxEvent.class.getName();
 
 	// Setting both the JPA entity name and the native entity name to the FQCN so that:
@@ -68,7 +71,7 @@
 			"                <column length=\"2147483647\" />\n" +
 			"        </property>\n" +
 			"        <property name=\"retries\" type=\"integer\" nullable=\"false\" />\n" +
-			"        <property name=\"processAfter\" type=\"Instant\" index=\"processAfter\" nullable=\"false\" />\n" +
+			"        <property name=\"processAfter\" type=\"instant\" index=\"processAfter\" nullable=\"false\" />\n" +
 			"        <property name=\"status\" index=\"status\" nullable=\"false\">\n" +
 			"            <type name=\"org.hibernate.type.EnumType\">\n" +
 			"                <param name=\"enumClass\">" + OutboxEvent.Status.class.getName() + "</param>\n" +
@@ -162,7 +165,7 @@ public Collection<MappingDocument> produceMappings(ConfigurationPropertySource p
 		);
 
 		log.outboxEventGeneratedEntityMapping( entityDefinition );
-		Origin origin = new Origin( SourceType.OTHER, "search" );
+		Origin origin = new Origin( SourceType.OTHER, HIBERNATE_SEARCH );
 
 		ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream( entityDefinition.getBytes() );
 		BufferedInputStream bufferedInputStream = new BufferedInputStream( byteArrayInputStream );
@@ -171,7 +174,7 @@ public Collection<MappingDocument> produceMappings(ConfigurationPropertySource p
 
 		JaxbHbmHibernateMapping root = (JaxbHbmHibernateMapping) binding.getRoot();
 
-		MappingDocument mappingDocument = new MappingDocument( root, origin, buildingContext );
+		MappingDocument mappingDocument = new MappingDocument( HIBERNATE_SEARCH, root, origin, buildingContext );
 		return Collections.singletonList( mappingDocument );
 	}
 }
diff --git a/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/mapping/impl/OutboxPollingSearchMappingImpl.java b/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/mapping/impl/OutboxPollingSearchMappingImpl.java
index 8af4b57c48..b350b8eb45 100644
--- a/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/mapping/impl/OutboxPollingSearchMappingImpl.java
+++ b/main/java/org/hibernate/search/mapper/orm/coordination/outboxpolling/mapping/impl/OutboxPollingSearchMappingImpl.java
@@ -14,6 +14,7 @@
 import org.hibernate.Session;
 import org.hibernate.engine.spi.SessionFactoryImplementor;
 import org.hibernate.engine.spi.SharedSessionContractImplementor;
+import org.hibernate.query.MutationQuery;
 import org.hibernate.query.Query;
 import org.hibernate.search.mapper.orm.common.spi.TransactionHelper;
 import org.hibernate.search.mapper.orm.coordination.common.spi.CoordinationStrategyStartContext;
@@ -76,7 +77,7 @@ public int reprocessAbortedEvents() {
 
 		try ( Session session = sessionFactory.openSession() ) {
 			return transactionHelper.inTransaction( (SharedSessionContractImplementor) session, () -> {
-				Query<?> query = session.createQuery( UPDATE_EVENTS_WITH_STATUS );
+				MutationQuery query = session.createMutationQuery( UPDATE_EVENTS_WITH_STATUS );
 				query.setParameter( "status", OutboxEvent.Status.ABORTED );
 				query.setParameter( "newStatus", OutboxEvent.Status.PENDING );
 				return query.executeUpdate();
@@ -90,7 +91,7 @@ public int reprocessAbortedEvents(String tenantId) {
 
 		try ( Session session = sessionFactory.withOptions().tenantIdentifier( tenantId ).openSession() ) {
 			return transactionHelper.inTransaction( (SharedSessionContractImplementor) session, () -> {
-				Query<?> query = session.createQuery( UPDATE_EVENTS_WITH_STATUS );
+				MutationQuery query = session.createMutationQuery( UPDATE_EVENTS_WITH_STATUS );
 				query.setParameter( "status", OutboxEvent.Status.ABORTED );
 				query.setParameter( "newStatus", OutboxEvent.Status.PENDING );
 				return query.executeUpdate();
@@ -104,7 +105,7 @@ public int clearAllAbortedEvents() {
 
 		try ( Session session = sessionFactory.openSession() ) {
 			return transactionHelper.inTransaction( (SharedSessionContractImplementor) session, () -> {
-				Query<?> query = session.createQuery( DELETE_EVENTS_WITH_STATUS );
+				MutationQuery query = session.createMutationQuery( DELETE_EVENTS_WITH_STATUS );
 				query.setParameter( "status", OutboxEvent.Status.ABORTED );
 				return query.executeUpdate();
 			} );
@@ -117,7 +118,7 @@ public int clearAllAbortedEvents(String tenantId) {
 
 		try ( Session session = sessionFactory.withOptions().tenantIdentifier( tenantId ).openSession() ) {
 			return transactionHelper.inTransaction( (SharedSessionContractImplementor) session, () -> {
-				Query<?> query = session.createQuery( DELETE_EVENTS_WITH_STATUS );
+				MutationQuery query = session.createMutationQuery( DELETE_EVENTS_WITH_STATUS );
 				query.setParameter( "status", OutboxEvent.Status.ABORTED );
 				return query.executeUpdate();
 			} );
