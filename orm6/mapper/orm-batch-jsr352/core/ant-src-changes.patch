diff --git a/main/java/org/hibernate/search/batch/jsr352/core/context/jpa/impl/ActiveSessionFactoryRegistryUpdater.java b/main/java/org/hibernate/search/batch/jsr352/core/context/jpa/impl/ActiveSessionFactoryRegistryUpdater.java
index 48a8ba8734..a49cd707ca 100644
--- a/main/java/org/hibernate/search/batch/jsr352/core/context/jpa/impl/ActiveSessionFactoryRegistryUpdater.java
+++ b/main/java/org/hibernate/search/batch/jsr352/core/context/jpa/impl/ActiveSessionFactoryRegistryUpdater.java
@@ -7,6 +7,7 @@
 package org.hibernate.search.batch.jsr352.core.context.jpa.impl;
 
 import org.hibernate.boot.Metadata;
+import org.hibernate.boot.spi.BootstrapContext;
 import org.hibernate.engine.spi.SessionFactoryImplementor;
 import org.hibernate.integrator.spi.Integrator;
 import org.hibernate.service.spi.SessionFactoryServiceRegistry;
@@ -17,7 +18,8 @@
 public class ActiveSessionFactoryRegistryUpdater implements Integrator {
 
 	@Override
-	public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) {
+	public void integrate(Metadata metadata, BootstrapContext bootstrapContext,
+			SessionFactoryImplementor sessionFactory) {
 		ActiveSessionFactoryRegistry.getInstance().register( sessionFactory );
 	}
 
diff --git a/main/java/org/hibernate/search/batch/jsr352/core/massindexing/step/impl/HibernateSearchPartitionMapper.java b/main/java/org/hibernate/search/batch/jsr352/core/massindexing/step/impl/HibernateSearchPartitionMapper.java
index c8763c2b4a..2d975eab7e 100644
--- a/main/java/org/hibernate/search/batch/jsr352/core/massindexing/step/impl/HibernateSearchPartitionMapper.java
+++ b/main/java/org/hibernate/search/batch/jsr352/core/massindexing/step/impl/HibernateSearchPartitionMapper.java
@@ -236,7 +236,7 @@ private List<PartitionBound> buildPartitionUnitsFrom(EntityManagerFactory emf, S
 			query.setMaxResults( maxResults );
 		}
 
-		try ( ScrollableResults scroll = query.scroll( ScrollMode.SCROLL_SENSITIVE ) ) {
+		try ( ScrollableResults<?> scroll = query.scroll( ScrollMode.SCROLL_SENSITIVE ) ) {
 			/*
 			 * The scroll results are originally positioned *before* the first element,
 			 * so we need to scroll rowsPerPartition + 1 positions to advanced to the
@@ -248,7 +248,7 @@ private List<PartitionBound> buildPartitionUnitsFrom(EntityManagerFactory emf, S
 
 			while ( scroll.scroll( rowsPerPartition ) ) {
 				lowerID = upperID;
-				upperID = scroll.get( 0 );
+				upperID = scroll.get();
 				partitionUnits.add( new PartitionBound( javaClass, lowerID, upperID, indexScope ) );
 			}
 
diff --git a/main/java/org/hibernate/search/batch/jsr352/core/massindexing/step/spi/EntityReader.java b/main/java/org/hibernate/search/batch/jsr352/core/massindexing/step/spi/EntityReader.java
index 6daddd7182..47a1fe9fcd 100644
--- a/main/java/org/hibernate/search/batch/jsr352/core/massindexing/step/spi/EntityReader.java
+++ b/main/java/org/hibernate/search/batch/jsr352/core/massindexing/step/spi/EntityReader.java
@@ -400,7 +400,7 @@ else if ( lowerBound != null ) {
 
 	private interface FetchingStrategy {
 
-		ScrollableResults createScroll(Session session, CheckpointInfo lastCheckpointInfo);
+		ScrollableResults<?> createScroll(Session session, CheckpointInfo lastCheckpointInfo);
 
 	}
 
@@ -411,11 +411,11 @@ private static class ChunkState implements AutoCloseable {
 		private final int clearInterval;
 
 		private Session session;
-		private ScrollableResults scroll;
+		private ScrollableResults<?> scroll;
 
 		private CheckpointInfo lastCheckpointInfo;
 		private int processedEntityCount = 0;
-		private Serializable lastProcessedEntityId;
+		private Object lastProcessedEntityId;
 
 		public ChunkState(
 				EntityManagerFactory emf, String tenantId, FetchingStrategy fetchingStrategy, int clearInterval,
@@ -446,7 +446,7 @@ else if ( processedEntityCount % clearInterval == 0 ) {
 			if ( !scroll.next() ) {
 				return null;
 			}
-			Object entity = scroll.get( 0 );
+			Object entity = scroll.get();
 			lastProcessedEntityId = session.getIdentifier( entity );
 			++processedEntityCount;
 			return entity;
@@ -462,13 +462,13 @@ public Serializable end() {
 			if ( lastCheckpointInfo != null ) {
 				processedEntityCountInPartition += lastCheckpointInfo.getProcessedEntityCount();
 			}
-			Serializable lastProcessedEntityIdInPartition = lastProcessedEntityId;
+			Object lastProcessedEntityIdInPartition = lastProcessedEntityId;
 			if ( lastCheckpointInfo != null && lastProcessedEntityIdInPartition == null ) {
 				lastProcessedEntityIdInPartition = lastCheckpointInfo.getLastProcessedEntityId();
 			}
 			processedEntityCount = 0;
 			lastProcessedEntityId = null;
-			lastCheckpointInfo = new CheckpointInfo( lastProcessedEntityIdInPartition, processedEntityCountInPartition );
+			lastCheckpointInfo = new CheckpointInfo( (Serializable) lastProcessedEntityIdInPartition, processedEntityCountInPartition );
 			return lastCheckpointInfo;
 		}
 
diff --git a/main/java/org/hibernate/search/batch/jsr352/core/massindexing/util/impl/PersistenceUtil.java b/main/java/org/hibernate/search/batch/jsr352/core/massindexing/util/impl/PersistenceUtil.java
index d20b3cc57f..009aae20f9 100644
--- a/main/java/org/hibernate/search/batch/jsr352/core/massindexing/util/impl/PersistenceUtil.java
+++ b/main/java/org/hibernate/search/batch/jsr352/core/massindexing/util/impl/PersistenceUtil.java
@@ -18,7 +18,7 @@
 import org.hibernate.StatelessSession;
 import org.hibernate.StatelessSessionBuilder;
 import org.hibernate.engine.spi.SessionFactoryImplementor;
-import org.hibernate.metamodel.spi.MetamodelImplementor;
+import org.hibernate.metamodel.MappingMetamodel;
 import org.hibernate.persister.entity.EntityPersister;
 import org.hibernate.search.batch.jsr352.core.massindexing.step.impl.IndexScope;
 import org.hibernate.search.util.common.impl.StringHelper;
@@ -95,15 +95,15 @@ public static IndexScope getIndexScope(String hql) {
 	public static List<EntityTypeDescriptor> createDescriptors(EntityManagerFactory entityManagerFactory, Set<Class<?>> types) {
 		SessionFactoryImplementor sessionFactory = entityManagerFactory.unwrap( SessionFactoryImplementor.class );
 		List<EntityTypeDescriptor> result = new ArrayList<>( types.size() );
-		MetamodelImplementor metamodel = sessionFactory.getMetamodel();
+		MappingMetamodel metamodel = sessionFactory.getMappingMetamodel();
 		for ( Class<?> type : types ) {
 			result.add( createDescriptor( metamodel, type ) );
 		}
 		return result;
 	}
 
-	private static <T> EntityTypeDescriptor createDescriptor(MetamodelImplementor metamodel, Class<T> type) {
-		EntityPersister entityPersister = metamodel.entityPersister( type );
+	private static <T> EntityTypeDescriptor createDescriptor(MappingMetamodel metamodel, Class<T> type) {
+		EntityPersister entityPersister = metamodel.findEntityDescriptor( type );
 		IdOrder idOrder = createIdOrder( entityPersister );
 		return new EntityTypeDescriptor( type, idOrder );
 	}
