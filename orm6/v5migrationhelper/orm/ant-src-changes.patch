diff --git a/main/java/org/hibernate/search/FullTextSharedSessionBuilder.java b/main/java/org/hibernate/search/FullTextSharedSessionBuilder.java
index 8d32aa9852..72c93d0d27 100644
--- a/main/java/org/hibernate/search/FullTextSharedSessionBuilder.java
+++ b/main/java/org/hibernate/search/FullTextSharedSessionBuilder.java
@@ -10,7 +10,6 @@
 
 import jakarta.persistence.EntityManager;
 
-import org.hibernate.ConnectionReleaseMode;
 import org.hibernate.Interceptor;
 import org.hibernate.Session;
 import org.hibernate.SharedSessionBuilder;
@@ -40,14 +39,6 @@ public interface FullTextSharedSessionBuilder extends SharedSessionBuilder {
 	@Override
 	FullTextSharedSessionBuilder autoClose();
 
-	@Deprecated
-	@Override
-	FullTextSharedSessionBuilder flushBeforeCompletion();
-
-	@Deprecated
-	@Override
-	FullTextSharedSessionBuilder transactionContext();
-
 	@Override
 	FullTextSharedSessionBuilder interceptor(Interceptor interceptor);
 
@@ -57,10 +48,6 @@ public interface FullTextSharedSessionBuilder extends SharedSessionBuilder {
 	@Override
 	FullTextSharedSessionBuilder connection(Connection connection);
 
-	@Deprecated
-	@Override
-	FullTextSharedSessionBuilder connectionReleaseMode(ConnectionReleaseMode connectionReleaseMode);
-
 	@Override
 	FullTextSharedSessionBuilder autoJoinTransactions(boolean autoJoinTransactions);
 
@@ -68,10 +55,6 @@ public interface FullTextSharedSessionBuilder extends SharedSessionBuilder {
 	@Override
 	FullTextSharedSessionBuilder autoClose(boolean autoClose);
 
-	@Deprecated
-	@Override
-	FullTextSharedSessionBuilder flushBeforeCompletion(boolean flushBeforeCompletion);
-
 	@Override
 	FullTextSession openSession();
 
diff --git a/main/java/org/hibernate/search/impl/FullTextSharedSessionBuilderDelegator.java b/main/java/org/hibernate/search/impl/FullTextSharedSessionBuilderDelegator.java
index 9f6bfae665..6c5728910f 100644
--- a/main/java/org/hibernate/search/impl/FullTextSharedSessionBuilderDelegator.java
+++ b/main/java/org/hibernate/search/impl/FullTextSharedSessionBuilderDelegator.java
@@ -9,7 +9,6 @@
 import java.sql.Connection;
 import java.util.TimeZone;
 
-import org.hibernate.ConnectionReleaseMode;
 import org.hibernate.FlushMode;
 import org.hibernate.Interceptor;
 import org.hibernate.SessionBuilder;
@@ -63,20 +62,6 @@ public FullTextSharedSessionBuilder autoClose() {
 		return this;
 	}
 
-	@Deprecated
-	@Override
-	public FullTextSharedSessionBuilder flushBeforeCompletion() {
-		builder.flushBeforeCompletion();
-		return this;
-	}
-
-	@Deprecated
-	@Override
-	public FullTextSharedSessionBuilder transactionContext() {
-		builder.transactionContext();
-		return this;
-	}
-
 	@Override
 	public FullTextSharedSessionBuilder interceptor(Interceptor interceptor) {
 		builder.interceptor( interceptor );
@@ -95,13 +80,6 @@ public FullTextSharedSessionBuilder connection(Connection connection) {
 		return this;
 	}
 
-	@Deprecated
-	@Override
-	public FullTextSharedSessionBuilder connectionReleaseMode(ConnectionReleaseMode connectionReleaseMode) {
-		builder.connectionReleaseMode( connectionReleaseMode );
-		return this;
-	}
-
 	@Override
 	public FullTextSharedSessionBuilder autoJoinTransactions(boolean autoJoinTransactions) {
 		builder.autoJoinTransactions( autoJoinTransactions );
@@ -115,13 +93,6 @@ public FullTextSharedSessionBuilder autoClose(boolean autoClose) {
 		return this;
 	}
 
-	@Deprecated
-	@Override
-	public FullTextSharedSessionBuilder flushBeforeCompletion(boolean flushBeforeCompletion) {
-		builder.flushBeforeCompletion( flushBeforeCompletion );
-		return this;
-	}
-
 	@Override
 	public FullTextSession openSession() {
 		return Search.getFullTextSession( builder.openSession() );
diff --git a/main/java/org/hibernate/search/query/hibernate/impl/FullTextQueryImpl.java b/main/java/org/hibernate/search/query/hibernate/impl/FullTextQueryImpl.java
index c6481cc62e..f46722f7b2 100644
--- a/main/java/org/hibernate/search/query/hibernate/impl/FullTextQueryImpl.java
+++ b/main/java/org/hibernate/search/query/hibernate/impl/FullTextQueryImpl.java
@@ -7,21 +7,13 @@
 package org.hibernate.search.query.hibernate.impl;
 
 import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.Collections;
-import java.util.Date;
+import java.util.Collection;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 import java.util.concurrent.TimeUnit;
 import java.util.function.Consumer;
-import jakarta.persistence.FlushModeType;
-import jakarta.persistence.LockModeType;
-import jakarta.persistence.Parameter;
-import jakarta.persistence.QueryTimeoutException;
-import jakarta.persistence.TemporalType;
+import java.util.function.Function;
 
 import org.hibernate.HibernateException;
 import org.hibernate.LockMode;
@@ -29,12 +21,14 @@
 import org.hibernate.ScrollMode;
 import org.hibernate.TypeMismatchException;
 import org.hibernate.engine.spi.SessionImplementor;
+import org.hibernate.engine.spi.SharedSessionContractImplementor;
 import org.hibernate.graph.GraphSemantic;
 import org.hibernate.graph.RootGraph;
-import org.hibernate.hql.internal.QueryExecutionRequestException;
-import org.hibernate.query.QueryParameter;
-import org.hibernate.query.internal.AbstractProducedQuery;
-import org.hibernate.query.internal.ParameterMetadataImpl;
+import org.hibernate.graph.spi.RootGraphImplementor;
+import org.hibernate.query.IllegalQueryOperationException;
+import org.hibernate.query.internal.QueryOptionsImpl;
+import org.hibernate.query.spi.AbstractQuery;
+import org.hibernate.query.spi.ParameterMetadataImplementor;
 import org.hibernate.query.spi.QueryImplementor;
 import org.hibernate.query.spi.QueryParameterBindings;
 import org.hibernate.query.spi.ScrollableResultsImplementor;
@@ -45,7 +39,6 @@
 import org.hibernate.search.mapper.orm.search.loading.dsl.SearchLoadingOptionsStep;
 import org.hibernate.search.mapper.orm.search.query.spi.HibernateOrmSearchQueryHints;
 import org.hibernate.search.mapper.orm.search.query.spi.HibernateOrmSearchScrollableResultsAdapter;
-import org.hibernate.search.mapper.orm.search.query.spi.HibernateOrmSearchScrollableResultsAdapter.ScrollHitExtractor;
 import org.hibernate.search.query.DatabaseRetrievalMethod;
 import org.hibernate.search.query.ObjectLookupMethod;
 import org.hibernate.search.query.engine.spi.FacetManager;
@@ -55,8 +48,11 @@
 import org.hibernate.search.spatial.impl.Point;
 import org.hibernate.search.util.common.SearchTimeoutException;
 import org.hibernate.transform.ResultTransformer;
-import org.hibernate.type.Type;
 
+import jakarta.persistence.FlushModeType;
+import jakarta.persistence.LockModeType;
+import jakarta.persistence.PersistenceException;
+import jakarta.persistence.QueryTimeoutException;
 import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.Sort;
@@ -68,14 +64,14 @@
  * @author Hardy Ferentschik
  */
 @SuppressWarnings("rawtypes") // We extend the raw version of AbstractProducedQuery on purpose, see HSEARCH-2564
-public class FullTextQueryImpl extends AbstractProducedQuery implements FullTextQuery {
+public class FullTextQueryImpl extends AbstractQuery implements FullTextQuery {
 
 	private final V5MigrationSearchSession<SearchLoadingOptionsStep> searchSession;
 
 	private final HSQuery hSearchQuery;
 
-	private Integer firstResult;
-	private Integer maxResults;
+	private final SessionImplementor sessionImplementor;
+	private final QueryOptionsImpl queryOptions = new QueryOptionsImpl();
 	//initialized at 0 since we don't expect to use hints at this stage
 	private final Map<String, Object> hints = new HashMap<String, Object>( 0 );
 
@@ -96,11 +92,12 @@ public class FullTextQueryImpl extends AbstractProducedQuery implements FullText
 
 	private ResultTransformer resultTransformer;
 
-	public FullTextQueryImpl(Query luceneQuery, SessionImplementor session,
+	public FullTextQueryImpl(Query luceneQuery, SessionImplementor sessionImplementor,
 			V5MigrationOrmSearchIntegratorAdapter searchIntegrator,
 			V5MigrationSearchSession<SearchLoadingOptionsStep> searchSession,
 			Class<?> ... entities) {
-		super( session, new ParameterMetadataImpl( null, null ) );
+		super( sessionImplementor );
+		this.sessionImplementor = sessionImplementor;
 		this.searchSession = searchSession;
 		this.hSearchQuery = searchIntegrator.createHSQuery( luceneQuery, searchSession,
 				loadingOptionsContributor, entities );
@@ -118,54 +115,61 @@ public List getResultList() {
 	}
 
 	@Override
-	public Iterator iterate() {
-		throw new UnsupportedOperationException( "iterate() is not implemented in Hibernate Search queries. Use scroll() instead." );
+	public ScrollableResultsImplementor scroll() {
+		return scroll( ScrollMode.FORWARD_ONLY );
 	}
 
 	@Override
-	public ScrollableResultsImplementor scroll() {
-		SearchScroll<?> scroll = hSearchQuery.scroll(
-				fetchSize != null ? fetchSize : 100 );
+	protected ScrollableResultsImplementor doScroll(ScrollMode scrollMode) {
+		extractQueryOptions();
+		SearchScroll<?> scroll = hSearchQuery.scroll( fetchSize != null ? fetchSize : 100 );
+		Integer maxResults = hSearchQuery.maxResults();
 		return new HibernateOrmSearchScrollableResultsAdapter<>( scroll,
 				maxResults != null ? maxResults : Integer.MAX_VALUE,
 				Search5ScrollHitExtractor.INSTANCE );
 	}
 
-	@Override
-	public ScrollableResultsImplementor scroll(ScrollMode scrollMode) {
-		return scroll();
-	}
-
 	@Override
 	public List list() {
-		// Reproduce the behavior of AbstractProducedQuery.list() regarding exceptions
 		try {
-			return doHibernateSearchList();
+			return super.list();
 		}
 		catch (SearchTimeoutException e) {
 			throw new QueryTimeoutException( e );
 		}
-		catch (QueryExecutionRequestException he) {
-			throw new IllegalStateException( he );
-		}
-		catch (TypeMismatchException e) {
-			throw new IllegalArgumentException( e );
-		}
-		catch (HibernateException he) {
-			throw getExceptionConverter().convert( he );
-		}
 	}
 
-	protected List doHibernateSearchList() {
+	@Override
+	protected List doList() {
 		List list = hSearchQuery.fetch();
-
 		if ( resultTransformer != null ) {
 			list = resultTransformer.transformList( list );
 		}
-
 		return list;
 	}
 
+	@Override
+	protected void beforeQuery() {
+		super.beforeQuery();
+
+		extractQueryOptions();
+	}
+
+	private void extractQueryOptions() {
+		Integer limit = getQueryOptions().getLimit().getMaxRows();
+		hSearchQuery.maxResults( limit );
+		Integer offset = getQueryOptions().getLimit().getFirstRow();
+		hSearchQuery.firstResult( offset == null ? 0 : offset );
+		Integer queryFetchSize = getQueryOptions().getFetchSize();
+		if ( queryFetchSize != null ) {
+			fetchSize = queryFetchSize;
+		}
+		Integer queryTimeout = getQueryOptions().getTimeout();
+		if ( queryTimeout != null ) {
+			hSearchQuery.failAfter( queryTimeout, TimeUnit.SECONDS );
+		}
+	}
+
 	@Override
 	public Explanation explain(Object entityId) {
 		return hSearchQuery.explain( entityId );
@@ -179,8 +183,14 @@ public int getResultSize() {
 		catch (SearchTimeoutException e) {
 			throw new QueryTimeoutException( e );
 		}
+		catch (IllegalQueryOperationException e) {
+			throw new IllegalStateException( e );
+		}
+		catch (TypeMismatchException e) {
+			throw new IllegalArgumentException( e );
+		}
 		catch (HibernateException he) {
-			throw getExceptionConverter().convert( he );
+			throw getSession().getExceptionConverter().convert( he, getLockOptions() );
 		}
 	}
 
@@ -189,11 +199,16 @@ public int doGetResultSize() {
 	}
 
 	@Override
-	public FullTextQueryImpl applyGraph(RootGraph graph, GraphSemantic semantic) {
-		entityGraphHints.add( new EntityGraphHint<>( graph, semantic ) );
+	public FullTextQuery applyGraph(RootGraph graph, GraphSemantic semantic) {
+		applyGraph( (RootGraphImplementor) graph, semantic );
 		return this;
 	}
 
+	@Override
+	protected void applyGraph(RootGraphImplementor<?> graph, GraphSemantic semantic) {
+		entityGraphHints.add( new EntityGraphHint<>( graph, semantic ) );
+	}
+
 	@Override
 	public FullTextQueryImpl setProjection(String... fields) {
 		hSearchQuery.projection( fields );
@@ -214,44 +229,16 @@ public FullTextQueryImpl setSpatialParameters(double latitude, double longitude,
 
 	@Override
 	public FullTextQuery setMaxResults(int maxResults) {
-		if ( maxResults < 0 ) {
-			throw new IllegalArgumentException(
-					"Negative ("
-							+ maxResults
-							+ ") parameter passed in to setMaxResults"
-			);
-		}
-		hSearchQuery.maxResults( maxResults );
-		this.maxResults = maxResults;
+		super.setMaxResults( maxResults );
 		return this;
 	}
 
-	@Override
-	public int getMaxResults() {
-		return maxResults == null || maxResults == -1
-				? Integer.MAX_VALUE
-				: maxResults;
-	}
-
 	@Override
 	public FullTextQuery setFirstResult(int firstResult) {
-		if ( firstResult < 0 ) {
-			throw new IllegalArgumentException(
-					"Negative ("
-							+ firstResult
-							+ ") parameter passed in to setFirstResult"
-			);
-		}
-		hSearchQuery.firstResult( firstResult );
-		this.firstResult = firstResult;
+		super.setFirstResult( firstResult );
 		return this;
 	}
 
-	@Override
-	public int getFirstResult() {
-		return firstResult == null ? 0 : firstResult;
-	}
-
 	@Override
 	@SuppressWarnings("deprecation")
 	public FullTextQuery setHint(String hintName, Object value) {
@@ -266,14 +253,11 @@ public FullTextQuery setHint(String hintName, Object value) {
 				break;
 			case HibernateOrmSearchQueryHints.JAVAX_FETCHGRAPH:
 			case HibernateOrmSearchQueryHints.JAKARTA_FETCHGRAPH:
-				applyGraph( hintValueToEntityGraph( value ), GraphSemantic.FETCH );
-				break;
 			case HibernateOrmSearchQueryHints.JAVAX_LOADGRAPH:
 			case HibernateOrmSearchQueryHints.JAKARTA_LOADGRAPH:
-				applyGraph( hintValueToEntityGraph( value ), GraphSemantic.LOAD );
+				applyEntityGraphHint( hintName, hintValueToEntityGraph( value ) );
 				break;
 			default:
-				handleUnrecognizedHint( hintName, value );
 				break;
 		}
 		return this;
@@ -284,99 +268,35 @@ public Map<String, Object> getHints() {
 		return hints;
 	}
 
-	@Override // No generics, see unwrap() (same issue)
-	public FullTextQueryImpl setParameter(Parameter tParameter, Object t) {
-		throw parametersNoSupported();
-	}
-
-	@Override // No generics, see unwrap() (same issue)
-	public FullTextQueryImpl setParameter(Parameter calendarParameter, Calendar calendar, TemporalType temporalType) {
-		throw parametersNoSupported();
-	}
-
-	@Override // No generics, see unwrap() (same issue)
-	public FullTextQueryImpl setParameter(Parameter dateParameter, Date date, TemporalType temporalType) {
+	@Override
+	public ParameterMetadataImplementor getParameterMetadata() {
 		throw parametersNoSupported();
 	}
 
 	@Override
-	public FullTextQueryImpl setParameter(String name, Object value) {
+	public QueryParameterBindings getParameterBindings() {
+		// parameters not supported in Hibernate Search queries
+		return QueryParameterBindings.NO_PARAM_BINDINGS;
+	}
+
+	@Override
+	public QueryParameterBindings getQueryParameterBindings() {
+		// parameters not supported in Hibernate Search queries
+		return QueryParameterBindings.NO_PARAM_BINDINGS;
+	}
+
+	@Override
+	public QueryImplementor<?> setParameterList(String name, Object[] values) {
 		throw parametersNoSupported();
 	}
 
 	@Override
-	public FullTextQueryImpl setParameter(String name, Date value, TemporalType temporalType) {
+	public QueryImplementor<?> setParameterList(String s, Collection collection, Class aClass) {
 		throw parametersNoSupported();
 	}
 
 	@Override
-	public FullTextQueryImpl setParameter(String name, Calendar value, TemporalType temporalType) {
-		throw parametersNoSupported();
-	}
-
-	@Override
-	public FullTextQueryImpl setParameter(int position, Object value) {
-		throw parametersNoSupported();
-	}
-
-	@Override
-	public FullTextQueryImpl setParameter(int position, Date value, TemporalType temporalType) {
-		throw parametersNoSupported();
-	}
-
-	@Override
-	@SuppressWarnings("unchecked")
-	public Set<Parameter<?>> getParameters() {
-		return Collections.EMPTY_SET;
-	}
-
-	@Override
-	protected QueryParameterBindings getQueryParameterBindings() {
-		throw parametersNoSupported();
-	}
-
-	@Override
-	public FullTextQueryImpl setParameter(int position, Calendar value, TemporalType temporalType) {
-		throw parametersNoSupported();
-	}
-
-	@Override
-	public QueryParameter<?> getParameter(String name) {
-		throw parametersNoSupported();
-	}
-
-	@Override
-	public QueryParameter<?> getParameter(int position) {
-		throw parametersNoSupported();
-	}
-
-	@Override // No generics, see unwrap() (same issue)
-	public QueryParameter getParameter(String name, Class type) {
-		throw parametersNoSupported();
-	}
-
-	@Override // No generics, see unwrap() (same issue)
-	public QueryParameter getParameter(int position, Class type) {
-		throw parametersNoSupported();
-	}
-
-	@Override // No generics, see unwrap() (same issue)
-	public boolean isBound(Parameter param) {
-		throw parametersNoSupported();
-	}
-
-	@Override // No generics, see unwrap() (same issue)
-	public Object getParameterValue(Parameter param) {
-		throw parametersNoSupported();
-	}
-
-	@Override
-	public Object getParameterValue(String name) {
-		throw parametersNoSupported();
-	}
-
-	@Override
-	public Object getParameterValue(int position) {
+	public QueryImplementor<?> setParameterList(int i, Collection collection, Class aClass) {
 		throw parametersNoSupported();
 	}
 
@@ -391,12 +311,7 @@ public FullTextQueryImpl setFlushMode(FlushModeType flushModeType) {
 
 	@Override
 	public FullTextQueryImpl setFetchSize(int fetchSize) {
-		super.setFetchSize( fetchSize );
-		if ( fetchSize <= 0 ) {
-			throw new IllegalArgumentException( "'fetch size' parameter less than or equals to 0" );
-		}
-		this.fetchSize = fetchSize;
-		return this;
+		return (FullTextQueryImpl) super.setFetchSize( fetchSize );
 	}
 
 	@Override
@@ -434,7 +349,12 @@ public Object unwrap(Class type) {
 		if ( type == org.apache.lucene.search.Query.class ) {
 			return hSearchQuery.getLuceneQuery();
 		}
-		throw new IllegalArgumentException( "Cannot unwrap " + type.getName() );
+		else if ( type.isInstance( this ) ) {
+			return this;
+		}
+		else {
+			throw new PersistenceException( "Unrecognized unwrap type [" + type.getName() + "]" );
+		}
 	}
 
 	@Override
@@ -457,7 +377,12 @@ private UnsupportedOperationException lockOptionsNotSupported() {
 	}
 
 	@Override
-	public int executeUpdate() {
+	public int executeUpdate() throws HibernateException {
+		return doExecuteUpdate();
+	}
+
+	@Override
+	protected int doExecuteUpdate() {
 		throw new UnsupportedOperationException( "executeUpdate is not supported in Hibernate Search queries" );
 	}
 
@@ -515,32 +440,13 @@ public String getQueryString() {
 	}
 
 	@Override
-	protected boolean isNativeQuery() {
-		return false;
+	public QueryOptionsImpl getQueryOptions() {
+		return queryOptions;
 	}
 
-	@Deprecated
 	@Override
-	public Type[] getReturnTypes() {
-		throw new UnsupportedOperationException( "getReturnTypes() is not implemented in Hibernate Search queries" );
-	}
-
-	@Deprecated
-	@Override
-	public String[] getReturnAliases() {
-		throw new UnsupportedOperationException( "getReturnAliases() is not implemented in Hibernate Search queries" );
-	}
-
-	@Deprecated
-	@Override
-	public FullTextQueryImpl setEntity(int position, Object val) {
-		throw new UnsupportedOperationException( "setEntity(int,Object) is not implemented in Hibernate Search queries" );
-	}
-
-	@Deprecated
-	@Override
-	public FullTextQueryImpl setEntity(String name, Object val) {
-		throw new UnsupportedOperationException( "setEntity(String,Object) is not implemented in Hibernate Search queries" );
+	public SharedSessionContractImplementor getSession() {
+		return sessionImplementor;
 	}
 
 	@Override
@@ -549,12 +455,12 @@ public String toString() {
 	}
 
 	private static final class Search5ScrollHitExtractor
-			implements ScrollHitExtractor<Object> {
+			implements Function<Object, Object[]> {
 
 		private static final Search5ScrollHitExtractor INSTANCE = new Search5ScrollHitExtractor();
 
 		@Override
-		public Object[] toArray(Object hit) {
+		public Object[] apply(Object hit) {
 			if ( hit instanceof Object[] ) {
 				return (Object[]) hit;
 			}
@@ -562,19 +468,6 @@ public Object[] toArray(Object hit) {
 				return new Object[] { hit };
 			}
 		}
-
-		@Override
-		public Object toElement(Object hit, int index) {
-			if ( hit instanceof Object[] ) {
-				return ( (Object[]) hit )[index];
-			}
-			else if ( index != 0 ) {
-				throw new IndexOutOfBoundsException();
-			}
-			else {
-				return hit;
-			}
-		}
 	}
 
 	private static int hintValueToInteger(Object value) {
@@ -586,7 +479,7 @@ private static int hintValueToInteger(Object value) {
 		}
 	}
 
-	private static RootGraph<?> hintValueToEntityGraph(Object value) {
-		return (RootGraph) value;
+	private static RootGraphImplementor<?> hintValueToEntityGraph(Object value) {
+		return (RootGraphImplementor) value;
 	}
 }
