diff --git a/test/java/org/hibernate/search/test/query/LuceneQueryTest.java b/test/java/org/hibernate/search/test/query/LuceneQueryTest.java
index 94e8526ff0..0ef022a044 100644
--- a/test/java/org/hibernate/search/test/query/LuceneQueryTest.java
+++ b/test/java/org/hibernate/search/test/query/LuceneQueryTest.java
@@ -236,7 +236,7 @@ public void testDefaultFetchSize() throws Exception {
 
 		ScrollableResults projections = hibQuery.scroll();
 		projections.beforeFirst();
-		Object[] projection = projections.get();
+		Object[] projection = (Object[]) projections.get();
 		assertNull( projection );
 
 		projections.next();
@@ -262,7 +262,7 @@ public void testFetchSizeLargerThanHits() throws Exception {
 		ScrollableResults results = hibQuery.scroll();
 		results.beforeFirst();
 		results.next();
-		Object[] result = results.get();
+		Object[] result = (Object[]) results.get();
 		assertEquals( "incorrect entityInfo returned", 1000, result[0] );
 
 		tx.commit();
@@ -285,14 +285,14 @@ public void testFetchSizeDefaultMax() throws Exception {
 		ScrollableResults results = hibQuery.scroll();
 		results.beforeFirst();
 		results.next();
-		Object[] result = results.get();
+		Object[] result = (Object[]) results.get();
 		assertEquals( "incorrect entityInfo returned", 1000, result[0] );
 		results.scroll( 2 );
-		result = results.get();
+		result = (Object[]) results.get();
 		assertEquals( "incorrect entityInfo returned", 1003, result[0] );
 		// check cache addition
 		results.next();
-		result = results.get();
+		result = (Object[]) results.get();
 		assertEquals( "incorrect entityInfo returned", 1004, result[0] );
 
 		tx.commit();
@@ -316,19 +316,19 @@ public void testFetchSizeNonDefaultMax() throws Exception {
 		ScrollableResults results = hibQuery.scroll();
 		results.beforeFirst();
 		results.next();
-		Object[] result = results.get();
+		Object[] result = (Object[]) results.get();
 		assertEquals( "incorrect entityInfo returned", 1000, result[0] );
 
 		results.next();
-		result = results.get();
+		result = (Object[]) results.get();
 		assertEquals( "incorrect entityInfo returned", 1002, result[0] );
 
 		results.scroll( 2 );
-		result = results.get();
+		result = (Object[]) results.get();
 		assertEquals( "incorrect entityInfo returned", 1004, result[0] );
 
 		results.next();
-		result = results.get();
+		result = (Object[]) results.get();
 		assertNull( result );
 
 		results.close();
@@ -337,12 +337,12 @@ public void testFetchSizeNonDefaultMax() throws Exception {
 
 		results.beforeFirst();
 		results.next();
-		result = results.get();
+		result = (Object[]) results.get();
 		assertEquals( "incorrect entityInfo returned", 1000, result[0] );
 
 		// And test a bad forward scroll.
 		results.scroll( 10 );
-		result = results.get();
+		result = (Object[]) results.get();
 		assertNull( result );
 
 		tx.commit();
@@ -363,7 +363,7 @@ public void testFetchSizeNonDefaultMaxNoHits() throws Exception {
 
 		ScrollableResults results = hibQuery.scroll();
 		results.beforeFirst();
-		Object[] result = results.get();
+		Object[] result = (Object[]) results.get();
 		assertNull( "non-null entity infos returned", result );
 
 		tx.commit();
@@ -426,11 +426,11 @@ public void testCurrent() throws Exception {
 
 		results = hibQuery.scroll();
 		results.scroll( 4 );
-		Object[] result = results.get();
+		Object[] result = (Object[]) results.get();
 		assertEquals( 1004, result[0] );
 
 		results.last();
-		result = results.get();
+		result = (Object[]) results.get();
 		assertEquals( 1004, result[0] );
 
 		tx.commit();
@@ -586,7 +586,7 @@ public void testScrollEmptyHits() throws Exception {
 		ScrollableResults projections = hibQuery.scroll();
 		projections.beforeFirst();
 		projections.next();
-		Object[] projection = projections.get();
+		Object[] projection = (Object[]) projections.get();
 		assertNull( projection );
 
 		hibQuery = fullTextSession.createFullTextQuery( query, Employee.class ).setMaxResults( 20 );
@@ -594,7 +594,7 @@ public void testScrollEmptyHits() throws Exception {
 		projections = hibQuery.scroll();
 		projections.beforeFirst();
 		projections.next();
-		projection = projections.get();
+		projection = (Object[]) projections.get();
 		assertNull( projection );
 
 		tx.commit();
diff --git a/test/java/org/hibernate/search/test/query/ProjectionQueryTest.java b/test/java/org/hibernate/search/test/query/ProjectionQueryTest.java
index 7396d0df06..878e59509f 100644
--- a/test/java/org/hibernate/search/test/query/ProjectionQueryTest.java
+++ b/test/java/org/hibernate/search/test/query/ProjectionQueryTest.java
@@ -153,17 +153,17 @@ public void testProjectionWithScroll() throws Exception {
 
 		projections.beforeFirst();
 		projections.next();
-		Object[] projection = projections.get();
+		Object[] projection = (Object[]) projections.get();
 		checkProjectionFirst( projection, s );
 		assertTrue( projections.isFirst() );
 
 		projections.last();
-		projection = projections.get();
+		projection = (Object[]) projections.get();
 		checkProjectionLast( projection, s );
 		assertTrue( projections.isLast() );
 
 		projections.next();
-		projection = projections.get();
+		projection = (Object[]) projections.get();
 		assertNull( projection );
 
 		projections.close();
@@ -171,11 +171,11 @@ public void testProjectionWithScroll() throws Exception {
 		projections = hibQuery.scroll();
 
 		projections.first();
-		projection = projections.get();
+		projection = (Object[]) projections.get();
 		checkProjectionFirst( projection, s );
 
 		projections.scroll( 2 );
-		projection = projections.get();
+		projection = (Object[]) projections.get();
 		checkProjection2( projection, s );
 
 		//cleanup
diff --git a/test/java/org/hibernate/search/test/query/ScrollableResultsTest.java b/test/java/org/hibernate/search/test/query/ScrollableResultsTest.java
index 5f67f7d4e7..cb9495f675 100644
--- a/test/java/org/hibernate/search/test/query/ScrollableResultsTest.java
+++ b/test/java/org/hibernate/search/test/query/ScrollableResultsTest.java
@@ -83,7 +83,7 @@ public void testScrollingForward() {
 			position++;
 			int bookId = position;
 			assertEquals( position, scrollableResults.getRowNumber() );
-			AlternateBook book = (AlternateBook) scrollableResults.get()[0];
+			AlternateBook book = (AlternateBook) ( (Object[]) scrollableResults.get() )[0];
 			assertEquals( bookId, book.getId().intValue() );
 			assertEquals( "book about the number " + bookId, book.getSummary() );
 			assertTrue( sess.contains( book ) );
@@ -111,7 +111,7 @@ public void testResultsAreManaged() {
 		int position = -1;
 		while ( scrollableResults.next() ) {
 			position++;
-			AlternateBook book = (AlternateBook) scrollableResults.get()[0];
+			AlternateBook book = (AlternateBook) ( (Object[]) scrollableResults.get() )[0];
 			assertTrue( sess.contains( book ) );
 			// evict some entities:
 			if ( position % 3 == 0 ) {
@@ -158,7 +158,7 @@ public void testScrollProjectionAndManaged() {
 		int position = scrollableResults.getRowNumber();
 		while ( scrollableResults.next() ) {
 			position++;
-			Object[] objs = scrollableResults.get();
+			Object[] objs = (Object[]) scrollableResults.get();
 			assertEquals( Employee.class, objs[0] );
 			assertEquals( position, objs[1] );
 			assertTrue( objs[2] instanceof Employee );
diff --git a/test/java/org/hibernate/search/test/session/MassIndexUsingManualFlushTest.java b/test/java/org/hibernate/search/test/session/MassIndexUsingManualFlushTest.java
index 8960e20e4f..76896f767d 100644
--- a/test/java/org/hibernate/search/test/session/MassIndexUsingManualFlushTest.java
+++ b/test/java/org/hibernate/search/test/session/MassIndexUsingManualFlushTest.java
@@ -59,7 +59,7 @@ public void execute(Connection connection) throws SQLException {
 		int index = 0;
 		while ( results.next() ) {
 			index++;
-			final Email o = (Email) results.get( 0 );
+			final Email o = (Email) results.get();
 			s.index( o );
 			if ( index % 5 == 0 ) {
 				s.flushToIndexes();
