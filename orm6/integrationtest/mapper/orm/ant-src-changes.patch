diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingBooleanArrayIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingBooleanArrayIT.java
index 09dc079782..f613aea18a 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingBooleanArrayIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingBooleanArrayIT.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.search.integrationtest.mapper.orm.automaticindexing.array;
 
+import java.sql.Types;
 import java.util.Arrays;
 import java.util.List;
 
@@ -14,6 +15,7 @@
 import jakarta.persistence.Id;
 import jakarta.persistence.OrderColumn;
 
+import org.hibernate.annotations.JdbcTypeCode;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 import org.hibernate.search.util.impl.test.annotation.TestForIssue;
@@ -99,6 +101,7 @@ public static class IndexedEntity {
 		private Integer id;
 
 		@GenericField
+		@JdbcTypeCode(Types.VARBINARY)
 		private boolean[] serializedArray;
 
 		@GenericField
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingDoubleArrayIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingDoubleArrayIT.java
index 6259638556..82b132e994 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingDoubleArrayIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingDoubleArrayIT.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.search.integrationtest.mapper.orm.automaticindexing.array;
 
+import java.sql.Types;
 import java.util.Arrays;
 import java.util.List;
 
@@ -14,6 +15,7 @@
 import jakarta.persistence.Id;
 import jakarta.persistence.OrderColumn;
 
+import org.hibernate.annotations.JdbcTypeCode;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 import org.hibernate.search.util.impl.test.annotation.TestForIssue;
@@ -99,6 +101,7 @@ public static class IndexedEntity {
 		private Integer id;
 
 		@GenericField
+		@JdbcTypeCode(Types.VARBINARY)
 		private double[] serializedArray;
 
 		@GenericField
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingFloatArrayIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingFloatArrayIT.java
index e35622acd1..2565287cab 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingFloatArrayIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingFloatArrayIT.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.search.integrationtest.mapper.orm.automaticindexing.array;
 
+import java.sql.Types;
 import java.util.Arrays;
 import java.util.List;
 
@@ -14,6 +15,7 @@
 import jakarta.persistence.Id;
 import jakarta.persistence.OrderColumn;
 
+import org.hibernate.annotations.JdbcTypeCode;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 import org.hibernate.search.util.impl.test.annotation.TestForIssue;
@@ -99,6 +101,7 @@ public static class IndexedEntity {
 		private Integer id;
 
 		@GenericField
+		@JdbcTypeCode(Types.VARBINARY)
 		private float[] serializedArray;
 
 		@GenericField
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingIntArrayIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingIntArrayIT.java
index 0b5c56c8c1..bd6151f257 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingIntArrayIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingIntArrayIT.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.search.integrationtest.mapper.orm.automaticindexing.array;
 
+import java.sql.Types;
 import java.util.Arrays;
 import java.util.List;
 
@@ -14,6 +15,7 @@
 import jakarta.persistence.Id;
 import jakarta.persistence.OrderColumn;
 
+import org.hibernate.annotations.JdbcTypeCode;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 import org.hibernate.search.util.impl.test.annotation.TestForIssue;
@@ -99,6 +101,7 @@ public static class IndexedEntity {
 		private Integer id;
 
 		@GenericField
+		@JdbcTypeCode(Types.VARBINARY)
 		private int[] serializedArray;
 
 		@GenericField
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingLongArrayIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingLongArrayIT.java
index 50dedb7171..a88b855322 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingLongArrayIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingLongArrayIT.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.search.integrationtest.mapper.orm.automaticindexing.array;
 
+import java.sql.Types;
 import java.util.Arrays;
 import java.util.List;
 
@@ -14,6 +15,7 @@
 import jakarta.persistence.Id;
 import jakarta.persistence.OrderColumn;
 
+import org.hibernate.annotations.JdbcTypeCode;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 import org.hibernate.search.util.impl.test.annotation.TestForIssue;
@@ -99,6 +101,7 @@ public static class IndexedEntity {
 		private Integer id;
 
 		@GenericField
+		@JdbcTypeCode(Types.VARBINARY)
 		private long[] serializedArray;
 
 		@GenericField
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingShortArrayIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingShortArrayIT.java
index 555c54865a..5d25b77167 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingShortArrayIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingShortArrayIT.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.search.integrationtest.mapper.orm.automaticindexing.array;
 
+import java.sql.Types;
 import java.util.Arrays;
 import java.util.List;
 
@@ -14,6 +15,7 @@
 import jakarta.persistence.Id;
 import jakarta.persistence.OrderColumn;
 
+import org.hibernate.annotations.JdbcTypeCode;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 import org.hibernate.search.util.impl.test.annotation.TestForIssue;
@@ -99,6 +101,7 @@ public static class IndexedEntity {
 		private Integer id;
 
 		@GenericField
+		@JdbcTypeCode(Types.VARBINARY)
 		private short[] serializedArray;
 
 		@GenericField
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingStringArrayIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingStringArrayIT.java
index 49890a3276..3833093d2a 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingStringArrayIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingStringArrayIT.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.search.integrationtest.mapper.orm.automaticindexing.array;
 
+import java.sql.Types;
 import java.util.Arrays;
 import java.util.List;
 
@@ -14,6 +15,7 @@
 import jakarta.persistence.Id;
 import jakarta.persistence.OrderColumn;
 
+import org.hibernate.annotations.JdbcTypeCode;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 
@@ -98,6 +100,7 @@ public static class IndexedEntity {
 		private Integer id;
 
 		@GenericField
+		@JdbcTypeCode(Types.VARBINARY)
 		private String[] serializedArray;
 
 		@GenericField
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/AbstractAutomaticIndexingAssociationBaseIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/AbstractAutomaticIndexingAssociationBaseIT.java
index 3284a56402..395c5fae4a 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/AbstractAutomaticIndexingAssociationBaseIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/AbstractAutomaticIndexingAssociationBaseIT.java
@@ -293,13 +293,13 @@ public void setup(OrmSetupHelper.SetupContext setupContext, ReusableOrmSetupHold
 						)
 				)
 				.objectField( "embeddedAssociations", b2 -> b2
-						.objectField( "containedIndexedEmbedded",
-								associationFieldContributor.andThen( b3 -> b3
-										.field( "indexedField", String.class )
-										.field( "indexedElementCollectionField", String.class, b4 -> b4.multiValued( true ) )
-										.field( "containedDerivedField", String.class )
-								)
-						)
+					.objectField( "containedIndexedEmbedded",
+							associationFieldContributor.andThen( b3 -> b3
+									.field( "indexedField", String.class )
+									.field( "indexedElementCollectionField", String.class, b4 -> b4.multiValued( true ) )
+									.field( "containedDerivedField", String.class )
+							)
+					)
 				)
 				.with( isElementCollectionAssociationsOnContainingSide()
 						? bWith -> bWith
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/manytoone/AutomaticIndexingManyToOneBaseIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/manytoone/AutomaticIndexingManyToOneBaseIT.java
index 7e715bf03c..39a226729b 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/manytoone/AutomaticIndexingManyToOneBaseIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/manytoone/AutomaticIndexingManyToOneBaseIT.java
@@ -365,28 +365,26 @@ public static class ContainingEmbeddable {
 		@JoinColumn(name = "CEmbIdxEmbedded")
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" },
 				name = "containedIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedIndexedEmbedded;
+		private ContainedEntity containedIndexedEmbedded;
 
 		@ManyToOne
 		@JoinColumn(name = "CEmbNonIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedNonIndexedEmbedded;
+		private ContainedEntity containedNonIndexedEmbedded;
 
-		public ContainedEntity getEmbContainedIndexedEmbedded() {
-			return embContainedIndexedEmbedded;
+		public ContainedEntity getContainedIndexedEmbedded() {
+			return containedIndexedEmbedded;
 		}
 
-		public void setEmbContainedIndexedEmbedded(ContainedEntity embContainedIndexedEmbedded) {
-			this.embContainedIndexedEmbedded = embContainedIndexedEmbedded;
+		public void setContainedIndexedEmbedded(ContainedEntity containedIndexedEmbedded) {
+			this.containedIndexedEmbedded = containedIndexedEmbedded;
 		}
 
-		public ContainedEntity getEmbContainedNonIndexedEmbedded() {
-			return embContainedNonIndexedEmbedded;
+		public ContainedEntity getContainedNonIndexedEmbedded() {
+			return containedNonIndexedEmbedded;
 		}
 
-		public void setEmbContainedNonIndexedEmbedded(ContainedEntity embContainedNonIndexedEmbedded) {
-			this.embContainedNonIndexedEmbedded = embContainedNonIndexedEmbedded;
+		public void setContainedNonIndexedEmbedded(ContainedEntity containedNonIndexedEmbedded) {
+			this.containedNonIndexedEmbedded = containedNonIndexedEmbedded;
 		}
 
 		static final ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity> PRIMITIVES =
@@ -398,15 +396,15 @@ public ContainingEmbeddable newInstance() {
 
 					@Override
 					public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedIndexedEmbedded() {
-						return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedIndexedEmbedded,
-								ContainingEmbeddable::getEmbContainedIndexedEmbedded
+						return PropertyAccessor.create( ContainingEmbeddable::setContainedIndexedEmbedded,
+								ContainingEmbeddable::getContainedIndexedEmbedded
 						);
 					}
 
 					@Override
 					public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedNonIndexedEmbedded() {
-						return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedNonIndexedEmbedded,
-								ContainingEmbeddable::getEmbContainedNonIndexedEmbedded
+						return PropertyAccessor.create( ContainingEmbeddable::setContainedNonIndexedEmbedded,
+								ContainingEmbeddable::getContainedNonIndexedEmbedded
 						);
 					}
 				};
@@ -491,7 +489,7 @@ public static class ContainedEntity {
 				inverseJoinColumns = @JoinColumn(name = "containing"))
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainedIndexedEmbedded")
+				@PropertyValue(propertyName = "containedIndexedEmbedded")
 		}))
 		private List<ContainingEntity> containingAsElementCollectionAssociationsIndexedEmbedded = new ArrayList<>();
 
@@ -506,7 +504,7 @@ public static class ContainedEntity {
 				inverseJoinColumns = @JoinColumn(name = "containing"))
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainedNonIndexedEmbedded")
+				@PropertyValue(propertyName = "containedNonIndexedEmbedded")
 		}))
 		private List<ContainingEntity> containingAsElementCollectionAssociationsNonIndexedEmbedded = new ArrayList<>();
 
@@ -804,11 +802,11 @@ public PropertyAccessor<ContainedEntity, String> fieldUsedInCrossEntityDerivedFi
 
 	public static class ContainedEmbeddable {
 
-		@OneToMany(mappedBy = "embeddedAssociations.embContainedIndexedEmbedded")
+		@OneToMany(mappedBy = "embeddedAssociations.containedIndexedEmbedded")
 		@OrderBy("id asc") // Make sure the iteration order is predictable
 		private List<ContainingEntity> containingAsIndexedEmbedded = new ArrayList<>();
 
-		@OneToMany(mappedBy = "embeddedAssociations.embContainedNonIndexedEmbedded")
+		@OneToMany(mappedBy = "embeddedAssociations.containedNonIndexedEmbedded")
 		@OrderBy("id asc") // Make sure the iteration order is predictable
 		private List<ContainingEntity> containingAsNonIndexedEmbedded = new ArrayList<>();
 
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedEagerOnBothSidesIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedEagerOnBothSidesIT.java
index 0283325d9e..f4a6865ea6 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedEagerOnBothSidesIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedEagerOnBothSidesIT.java
@@ -164,7 +164,7 @@ public static class ContainingEntity {
 		@JoinColumn(name = "CECAssocIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainingAsIndexedEmbedded")
+				@PropertyValue(propertyName = "containingAsIndexedEmbedded")
 		}))
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" })
 		private ContainedEntity containedElementCollectionAssociationsIndexedEmbedded;
@@ -177,7 +177,7 @@ public static class ContainingEntity {
 		@JoinColumn(name = "CECAssocNonIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainingAsNonIndexedEmbedded")
+				@PropertyValue(propertyName = "containingAsNonIndexedEmbedded")
 		}))
 		private ContainedEntity containedElementCollectionAssociationsNonIndexedEmbedded;
 
@@ -404,30 +404,28 @@ public PropertyAccessor<ContainingEntity, String> nonIndexedField() {
 
 	public static class ContainingEmbeddable {
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainingAsIndexedEmbedded")
+		@OneToOne(mappedBy = "embeddedAssociations.containingAsIndexedEmbedded")
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" },
 				name = "containedIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedIndexedEmbedded;
+		private ContainedEntity containedIndexedEmbedded;
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainingAsNonIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedNonIndexedEmbedded;
+		@OneToOne(mappedBy = "embeddedAssociations.containingAsNonIndexedEmbedded")
+		private ContainedEntity containedNonIndexedEmbedded;
 
-		public ContainedEntity getEmbContainedIndexedEmbedded() {
-			return embContainedIndexedEmbedded;
+		public ContainedEntity getContainedIndexedEmbedded() {
+			return containedIndexedEmbedded;
 		}
 
-		public void setEmbContainedIndexedEmbedded(ContainedEntity embContainedIndexedEmbedded) {
-			this.embContainedIndexedEmbedded = embContainedIndexedEmbedded;
+		public void setContainedIndexedEmbedded(ContainedEntity containedIndexedEmbedded) {
+			this.containedIndexedEmbedded = containedIndexedEmbedded;
 		}
 
-		public ContainedEntity getEmbContainedNonIndexedEmbedded() {
-			return embContainedNonIndexedEmbedded;
+		public ContainedEntity getContainedNonIndexedEmbedded() {
+			return containedNonIndexedEmbedded;
 		}
 
-		public void setEmbContainedNonIndexedEmbedded(ContainedEntity embContainedNonIndexedEmbedded) {
-			this.embContainedNonIndexedEmbedded = embContainedNonIndexedEmbedded;
+		public void setContainedNonIndexedEmbedded(ContainedEntity containedNonIndexedEmbedded) {
+			this.containedNonIndexedEmbedded = containedNonIndexedEmbedded;
 		}
 
 		static final ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity> PRIMITIVES =
@@ -439,15 +437,15 @@ public ContainingEmbeddable newInstance() {
 
 					@Override
 					public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedIndexedEmbedded() {
-						return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedIndexedEmbedded,
-								ContainingEmbeddable::getEmbContainedIndexedEmbedded
+						return PropertyAccessor.create( ContainingEmbeddable::setContainedIndexedEmbedded,
+								ContainingEmbeddable::getContainedIndexedEmbedded
 						);
 					}
 
 					@Override
 					public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedNonIndexedEmbedded() {
-						return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedNonIndexedEmbedded,
-								ContainingEmbeddable::getEmbContainedNonIndexedEmbedded
+						return PropertyAccessor.create( ContainingEmbeddable::setContainedNonIndexedEmbedded,
+								ContainingEmbeddable::getContainedNonIndexedEmbedded
 						);
 					}
 				};
@@ -817,28 +815,26 @@ public static class ContainedEmbeddable {
 
 		@OneToOne
 		@JoinColumn(name = "CEmbIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsIndexedEmbedded;
+		private ContainingEntity containingAsIndexedEmbedded;
 
 		@OneToOne
 		@JoinColumn(name = "CEmbNonIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsNonIndexedEmbedded;
+		private ContainingEntity containingAsNonIndexedEmbedded;
 
-		public ContainingEntity getEmbContainingAsIndexedEmbedded() {
-			return embContainingAsIndexedEmbedded;
+		public ContainingEntity getContainingAsIndexedEmbedded() {
+			return containingAsIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsIndexedEmbedded(ContainingEntity embContainingAsIndexedEmbedded) {
-			this.embContainingAsIndexedEmbedded = embContainingAsIndexedEmbedded;
+		public void setContainingAsIndexedEmbedded(ContainingEntity containingAsIndexedEmbedded) {
+			this.containingAsIndexedEmbedded = containingAsIndexedEmbedded;
 		}
 
-		public ContainingEntity getEmbContainingAsNonIndexedEmbedded() {
-			return embContainingAsNonIndexedEmbedded;
+		public ContainingEntity getContainingAsNonIndexedEmbedded() {
+			return containingAsNonIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsNonIndexedEmbedded(ContainingEntity embContainingAsNonIndexedEmbedded) {
-			this.embContainingAsNonIndexedEmbedded = embContainingAsNonIndexedEmbedded;
+		public void setContainingAsNonIndexedEmbedded(ContainingEntity containingAsNonIndexedEmbedded) {
+			this.containingAsNonIndexedEmbedded = containingAsNonIndexedEmbedded;
 		}
 
 		static ContainedEmbeddablePrimitives<ContainedEmbeddable, ContainingEntity> PRIMITIVES =
@@ -850,15 +846,15 @@ public ContainedEmbeddable newInstance() {
 
 					@Override
 					public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsIndexedEmbedded() {
-						return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsIndexedEmbedded,
-								ContainedEmbeddable::getEmbContainingAsIndexedEmbedded
+						return PropertyAccessor.create( ContainedEmbeddable::setContainingAsIndexedEmbedded,
+								ContainedEmbeddable::getContainingAsIndexedEmbedded
 						);
 					}
 
 					@Override
 					public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsNonIndexedEmbedded() {
-						return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsNonIndexedEmbedded,
-								ContainedEmbeddable::getEmbContainingAsNonIndexedEmbedded
+						return PropertyAccessor.create( ContainedEmbeddable::setContainingAsNonIndexedEmbedded,
+								ContainedEmbeddable::getContainingAsNonIndexedEmbedded
 						);
 					}
 				};
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedLazyOnContainedSideIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedLazyOnContainedSideIT.java
index b2431c1d2d..7024fe58d0 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedLazyOnContainedSideIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedLazyOnContainedSideIT.java
@@ -187,7 +187,7 @@ public static class ContainingEntity {
 		@JoinColumn(name = "CECAssocIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainingAsIndexedEmbedded")
+				@PropertyValue(propertyName = "containingAsIndexedEmbedded")
 		}))
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" })
 		private ContainedEntity containedElementCollectionAssociationsIndexedEmbedded;
@@ -200,7 +200,7 @@ public static class ContainingEntity {
 		@JoinColumn(name = "CECAssocNonIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainingAsNonIndexedEmbedded")
+				@PropertyValue(propertyName = "containingAsNonIndexedEmbedded")
 		}))
 		private ContainedEntity containedElementCollectionAssociationsNonIndexedEmbedded;
 
@@ -427,30 +427,28 @@ public PropertyAccessor<ContainingEntity, String> nonIndexedField() {
 
 	public static class ContainingEmbeddable {
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainingAsIndexedEmbedded")
+		@OneToOne(mappedBy = "embeddedAssociations.containingAsIndexedEmbedded")
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" },
 				name = "containedIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedIndexedEmbedded;
+		private ContainedEntity containedIndexedEmbedded;
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainingAsNonIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedNonIndexedEmbedded;
+		@OneToOne(mappedBy = "embeddedAssociations.containingAsNonIndexedEmbedded")
+		private ContainedEntity containedNonIndexedEmbedded;
 
-		public ContainedEntity getEmbContainedIndexedEmbedded() {
-			return embContainedIndexedEmbedded;
+		public ContainedEntity getContainedIndexedEmbedded() {
+			return containedIndexedEmbedded;
 		}
 
-		public void setEmbContainedIndexedEmbedded(ContainedEntity embContainedIndexedEmbedded) {
-			this.embContainedIndexedEmbedded = embContainedIndexedEmbedded;
+		public void setContainedIndexedEmbedded(ContainedEntity containedIndexedEmbedded) {
+			this.containedIndexedEmbedded = containedIndexedEmbedded;
 		}
 
-		public ContainedEntity getEmbContainedNonIndexedEmbedded() {
-			return embContainedNonIndexedEmbedded;
+		public ContainedEntity getContainedNonIndexedEmbedded() {
+			return containedNonIndexedEmbedded;
 		}
 
-		public void setEmbContainedNonIndexedEmbedded(ContainedEntity embContainedNonIndexedEmbedded) {
-			this.embContainedNonIndexedEmbedded = embContainedNonIndexedEmbedded;
+		public void setContainedNonIndexedEmbedded(ContainedEntity containedNonIndexedEmbedded) {
+			this.containedNonIndexedEmbedded = containedNonIndexedEmbedded;
 		}
 
 		static final ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity> PRIMITIVES =
@@ -462,15 +460,15 @@ public ContainingEmbeddable newInstance() {
 
 					@Override
 					public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedIndexedEmbedded() {
-						return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedIndexedEmbedded,
-								ContainingEmbeddable::getEmbContainedIndexedEmbedded
+						return PropertyAccessor.create( ContainingEmbeddable::setContainedIndexedEmbedded,
+								ContainingEmbeddable::getContainedIndexedEmbedded
 						);
 					}
 
 					@Override
 					public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedNonIndexedEmbedded() {
-						return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedNonIndexedEmbedded,
-								ContainingEmbeddable::getEmbContainedNonIndexedEmbedded
+						return PropertyAccessor.create( ContainingEmbeddable::setContainedNonIndexedEmbedded,
+								ContainingEmbeddable::getContainedNonIndexedEmbedded
 						);
 					}
 				};
@@ -848,29 +846,27 @@ public static class ContainedEmbeddable {
 		@OneToOne(fetch = FetchType.LAZY)
 		@LazyGroup("embeddable_containingAsIndexedEmbedded")
 		@JoinColumn(name = "CEmbIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsIndexedEmbedded;
+		private ContainingEntity containingAsIndexedEmbedded;
 
 		@OneToOne(fetch = FetchType.LAZY)
 		@LazyGroup("embeddable_containingAsNonIndexedEmbedded")
 		@JoinColumn(name = "CEmbNonIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsNonIndexedEmbedded;
+		private ContainingEntity containingAsNonIndexedEmbedded;
 
-		public ContainingEntity getEmbContainingAsIndexedEmbedded() {
-			return embContainingAsIndexedEmbedded;
+		public ContainingEntity getContainingAsIndexedEmbedded() {
+			return containingAsIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsIndexedEmbedded(ContainingEntity embContainingAsIndexedEmbedded) {
-			this.embContainingAsIndexedEmbedded = embContainingAsIndexedEmbedded;
+		public void setContainingAsIndexedEmbedded(ContainingEntity containingAsIndexedEmbedded) {
+			this.containingAsIndexedEmbedded = containingAsIndexedEmbedded;
 		}
 
-		public ContainingEntity getEmbContainingAsNonIndexedEmbedded() {
-			return embContainingAsNonIndexedEmbedded;
+		public ContainingEntity getContainingAsNonIndexedEmbedded() {
+			return containingAsNonIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsNonIndexedEmbedded(ContainingEntity embContainingAsNonIndexedEmbedded) {
-			this.embContainingAsNonIndexedEmbedded = embContainingAsNonIndexedEmbedded;
+		public void setContainingAsNonIndexedEmbedded(ContainingEntity containingAsNonIndexedEmbedded) {
+			this.containingAsNonIndexedEmbedded = containingAsNonIndexedEmbedded;
 		}
 
 		static ContainedEmbeddablePrimitives<ContainedEmbeddable, ContainingEntity> PRIMITIVES =
@@ -882,15 +878,15 @@ public ContainedEmbeddable newInstance() {
 
 					@Override
 					public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsIndexedEmbedded() {
-						return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsIndexedEmbedded,
-								ContainedEmbeddable::getEmbContainingAsIndexedEmbedded
+						return PropertyAccessor.create( ContainedEmbeddable::setContainingAsIndexedEmbedded,
+								ContainedEmbeddable::getContainingAsIndexedEmbedded
 						);
 					}
 
 					@Override
 					public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsNonIndexedEmbedded() {
-						return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsNonIndexedEmbedded,
-								ContainedEmbeddable::getEmbContainingAsNonIndexedEmbedded
+						return PropertyAccessor.create( ContainedEmbeddable::setContainingAsNonIndexedEmbedded,
+								ContainedEmbeddable::getContainingAsNonIndexedEmbedded
 						);
 					}
 				};
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedLazyOnContainingSideIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedLazyOnContainingSideIT.java
index 3490a85301..78e8f4a781 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedLazyOnContainingSideIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedLazyOnContainingSideIT.java
@@ -195,7 +195,7 @@ public static class ContainingEntity {
 		@JoinColumn(name = "CECAssocIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainingAsIndexedEmbedded")
+				@PropertyValue(propertyName = "containingAsIndexedEmbedded")
 		}))
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" })
 		private ContainedEntity containedElementCollectionAssociationsIndexedEmbedded;
@@ -209,7 +209,7 @@ public static class ContainingEntity {
 		@JoinColumn(name = "CECAssocNonIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainingAsNonIndexedEmbedded")
+				@PropertyValue(propertyName = "containingAsNonIndexedEmbedded")
 		}))
 		private ContainedEntity containedElementCollectionAssociationsNonIndexedEmbedded;
 
@@ -407,9 +407,8 @@ public PropertyAccessor<ContainingEntity, ContainedEntity> containedIndexedEmbed
 
 					@Override
 					public PropertyAccessor<ContainingEntity, ContainingEmbeddable> embeddedAssociations() {
-						return PropertyAccessor.create( ContainingEntity::setEmbeddedAssociations,
-								ContainingEntity::getEmbeddedAssociations );
-					}
+						return PropertyAccessor.create( ContainingEntity::setEmbeddedAssociations, ContainingEntity::getEmbeddedAssociations );
+			}
 
 					@Override
 					public PropertyAccessor<ContainingEntity,
@@ -436,32 +435,30 @@ public PropertyAccessor<ContainingEntity, String> nonIndexedField() {
 
 	public static class ContainingEmbeddable {
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainingAsIndexedEmbedded", fetch = FetchType.LAZY)
+		@OneToOne(mappedBy = "embeddedAssociations.containingAsIndexedEmbedded", fetch = FetchType.LAZY)
 		@LazyGroup("embeddable_containedIndexedEmbedded")
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" },
 				name = "containedIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedIndexedEmbedded;
+		private ContainedEntity containedIndexedEmbedded;
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainingAsNonIndexedEmbedded", fetch = FetchType.LAZY)
+		@OneToOne(mappedBy = "embeddedAssociations.containingAsNonIndexedEmbedded", fetch = FetchType.LAZY)
 		@LazyGroup("embeddable_containedNonIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedNonIndexedEmbedded;
+		private ContainedEntity containedNonIndexedEmbedded;
 
-		public ContainedEntity getEmbContainedIndexedEmbedded() {
-			return embContainedIndexedEmbedded;
+		public ContainedEntity getContainedIndexedEmbedded() {
+			return containedIndexedEmbedded;
 		}
 
-		public void setEmbContainedIndexedEmbedded(ContainedEntity embContainedIndexedEmbedded) {
-			this.embContainedIndexedEmbedded = embContainedIndexedEmbedded;
+		public void setContainedIndexedEmbedded(ContainedEntity containedIndexedEmbedded) {
+			this.containedIndexedEmbedded = containedIndexedEmbedded;
 		}
 
-		public ContainedEntity getEmbContainedNonIndexedEmbedded() {
-			return embContainedNonIndexedEmbedded;
+		public ContainedEntity getContainedNonIndexedEmbedded() {
+			return containedNonIndexedEmbedded;
 		}
 
-		public void setEmbContainedNonIndexedEmbedded(ContainedEntity embContainedNonIndexedEmbedded) {
-			this.embContainedNonIndexedEmbedded = embContainedNonIndexedEmbedded;
+		public void setContainedNonIndexedEmbedded(ContainedEntity containedNonIndexedEmbedded) {
+			this.containedNonIndexedEmbedded = containedNonIndexedEmbedded;
 		}
 
 		static final ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity> PRIMITIVES =
@@ -473,15 +470,15 @@ public ContainingEmbeddable newInstance() {
 
 					@Override
 					public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedIndexedEmbedded() {
-						return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedIndexedEmbedded,
-								ContainingEmbeddable::getEmbContainedIndexedEmbedded
+						return PropertyAccessor.create( ContainingEmbeddable::setContainedIndexedEmbedded,
+								ContainingEmbeddable::getContainedIndexedEmbedded
 						);
 					}
 
 					@Override
 					public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedNonIndexedEmbedded() {
-						return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedNonIndexedEmbedded,
-								ContainingEmbeddable::getEmbContainedNonIndexedEmbedded
+						return PropertyAccessor.create( ContainingEmbeddable::setContainedNonIndexedEmbedded,
+								ContainingEmbeddable::getContainedNonIndexedEmbedded
 						);
 					}
 				};
@@ -787,9 +784,8 @@ public PropertyAccessor<ContainedEntity, ContainingEntity> containingAsIndexedEm
 
 					@Override
 					public PropertyAccessor<ContainedEntity, ContainedEmbeddable> embeddedAssociations() {
-						return PropertyAccessor.create( ContainedEntity::setEmbeddedAssociations,
-								ContainedEntity::getEmbeddedAssociations );
-					}
+						return PropertyAccessor.create( ContainedEntity::setEmbeddedAssociations, ContainedEntity::getEmbeddedAssociations );
+			}
 
 					@Override
 					public MultiValuedPropertyAccessor<ContainedEntity,
@@ -851,28 +847,26 @@ public static class ContainedEmbeddable {
 
 		@OneToOne
 		@JoinColumn(name = "CEmbIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsIndexedEmbedded;
+		private ContainingEntity containingAsIndexedEmbedded;
 
 		@OneToOne
 		@JoinColumn(name = "CEmbNonIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsNonIndexedEmbedded;
+		private ContainingEntity containingAsNonIndexedEmbedded;
 
-		public ContainingEntity getEmbContainingAsIndexedEmbedded() {
-			return embContainingAsIndexedEmbedded;
+		public ContainingEntity getContainingAsIndexedEmbedded() {
+			return containingAsIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsIndexedEmbedded(ContainingEntity embContainingAsIndexedEmbedded) {
-			this.embContainingAsIndexedEmbedded = embContainingAsIndexedEmbedded;
+		public void setContainingAsIndexedEmbedded(ContainingEntity containingAsIndexedEmbedded) {
+			this.containingAsIndexedEmbedded = containingAsIndexedEmbedded;
 		}
 
-		public ContainingEntity getEmbContainingAsNonIndexedEmbedded() {
-			return embContainingAsNonIndexedEmbedded;
+		public ContainingEntity getContainingAsNonIndexedEmbedded() {
+			return containingAsNonIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsNonIndexedEmbedded(ContainingEntity embContainingAsNonIndexedEmbedded) {
-			this.embContainingAsNonIndexedEmbedded = embContainingAsNonIndexedEmbedded;
+		public void setContainingAsNonIndexedEmbedded(ContainingEntity containingAsNonIndexedEmbedded) {
+			this.containingAsNonIndexedEmbedded = containingAsNonIndexedEmbedded;
 		}
 
 		static ContainedEmbeddablePrimitives<ContainedEmbeddable, ContainingEntity> PRIMITIVES =
@@ -884,15 +878,15 @@ public ContainedEmbeddable newInstance() {
 
 					@Override
 					public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsIndexedEmbedded() {
-						return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsIndexedEmbedded,
-								ContainedEmbeddable::getEmbContainingAsIndexedEmbedded
+						return PropertyAccessor.create( ContainedEmbeddable::setContainingAsIndexedEmbedded,
+								ContainedEmbeddable::getContainingAsIndexedEmbedded
 						);
 					}
 
 					@Override
 					public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsNonIndexedEmbedded() {
-						return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsNonIndexedEmbedded,
-								ContainedEmbeddable::getEmbContainingAsNonIndexedEmbedded
+						return PropertyAccessor.create( ContainedEmbeddable::setContainingAsNonIndexedEmbedded,
+								ContainedEmbeddable::getContainingAsNonIndexedEmbedded
 						);
 					}
 				};
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingEagerOnBothSidesIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingEagerOnBothSidesIT.java
index efcbb2b6e3..7dbc6932fa 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingEagerOnBothSidesIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingEagerOnBothSidesIT.java
@@ -367,28 +367,26 @@ public static class ContainingEmbeddable {
 		@JoinColumn(name = "CEmbIdxEmbedded")
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" },
 				name = "containedIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedIndexedEmbedded;
+		private ContainedEntity containedIndexedEmbedded;
 
 		@OneToOne
 		@JoinColumn(name = "CEmbNonIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedNonIndexedEmbedded;
+		private ContainedEntity containedNonIndexedEmbedded;
 
-		public ContainedEntity getEmbContainedIndexedEmbedded() {
-			return embContainedIndexedEmbedded;
+		public ContainedEntity getContainedIndexedEmbedded() {
+			return containedIndexedEmbedded;
 		}
 
-		public void setEmbContainedIndexedEmbedded(ContainedEntity embContainedIndexedEmbedded) {
-			this.embContainedIndexedEmbedded = embContainedIndexedEmbedded;
+		public void setContainedIndexedEmbedded(ContainedEntity containedIndexedEmbedded) {
+			this.containedIndexedEmbedded = containedIndexedEmbedded;
 		}
 
-		public ContainedEntity getEmbContainedNonIndexedEmbedded() {
-			return embContainedNonIndexedEmbedded;
+		public ContainedEntity getContainedNonIndexedEmbedded() {
+			return containedNonIndexedEmbedded;
 		}
 
-		public void setEmbContainedNonIndexedEmbedded(ContainedEntity embContainedNonIndexedEmbedded) {
-			this.embContainedNonIndexedEmbedded = embContainedNonIndexedEmbedded;
+		public void setContainedNonIndexedEmbedded(ContainedEntity containedNonIndexedEmbedded) {
+			this.containedNonIndexedEmbedded = containedNonIndexedEmbedded;
 		}
 
 		static final ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity> PRIMITIVES =
@@ -400,15 +398,15 @@ public ContainingEmbeddable newInstance() {
 
 					@Override
 					public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedIndexedEmbedded() {
-						return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedIndexedEmbedded,
-								ContainingEmbeddable::getEmbContainedIndexedEmbedded
+						return PropertyAccessor.create( ContainingEmbeddable::setContainedIndexedEmbedded,
+								ContainingEmbeddable::getContainedIndexedEmbedded
 						);
 					}
 
 					@Override
 					public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedNonIndexedEmbedded() {
-						return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedNonIndexedEmbedded,
-								ContainingEmbeddable::getEmbContainedNonIndexedEmbedded
+						return PropertyAccessor.create( ContainingEmbeddable::setContainedNonIndexedEmbedded,
+								ContainingEmbeddable::getContainedNonIndexedEmbedded
 						);
 					}
 				};
@@ -477,7 +475,7 @@ public static class ContainedEntity {
 		@JoinColumn(name = "CECAssocIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainedIndexedEmbedded")
+				@PropertyValue(propertyName = "containedIndexedEmbedded")
 		}))
 		private ContainingEntity containingAsElementCollectionAssociationsIndexedEmbedded;
 
@@ -489,7 +487,7 @@ public static class ContainedEntity {
 		@JoinColumn(name = "CECAssocNonIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainedNonIndexedEmbedded")
+				@PropertyValue(propertyName = "containedNonIndexedEmbedded")
 		}))
 		private ContainingEntity containingAsElementCollectionAssociationsNonIndexedEmbedded;
 
@@ -815,28 +813,26 @@ public PropertyAccessor<ContainedEntity, String> fieldUsedInCrossEntityDerivedFi
 
 	public static class ContainedEmbeddable {
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainedIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsIndexedEmbedded;
+		@OneToOne(mappedBy = "embeddedAssociations.containedIndexedEmbedded")
+		private ContainingEntity containingAsIndexedEmbedded;
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainedNonIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsNonIndexedEmbedded;
+		@OneToOne(mappedBy = "embeddedAssociations.containedNonIndexedEmbedded")
+		private ContainingEntity containingAsNonIndexedEmbedded;
 
-		public ContainingEntity getEmbContainingAsIndexedEmbedded() {
-			return embContainingAsIndexedEmbedded;
+		public ContainingEntity getContainingAsIndexedEmbedded() {
+			return containingAsIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsIndexedEmbedded(ContainingEntity embContainingAsIndexedEmbedded) {
-			this.embContainingAsIndexedEmbedded = embContainingAsIndexedEmbedded;
+		public void setContainingAsIndexedEmbedded(ContainingEntity containingAsIndexedEmbedded) {
+			this.containingAsIndexedEmbedded = containingAsIndexedEmbedded;
 		}
 
-		public ContainingEntity getEmbContainingAsNonIndexedEmbedded() {
-			return embContainingAsNonIndexedEmbedded;
+		public ContainingEntity getContainingAsNonIndexedEmbedded() {
+			return containingAsNonIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsNonIndexedEmbedded(ContainingEntity embContainingAsNonIndexedEmbedded) {
-			this.embContainingAsNonIndexedEmbedded = embContainingAsNonIndexedEmbedded;
+		public void setContainingAsNonIndexedEmbedded(ContainingEntity containingAsNonIndexedEmbedded) {
+			this.containingAsNonIndexedEmbedded = containingAsNonIndexedEmbedded;
 		}
 
 		static ContainedEmbeddablePrimitives<ContainedEmbeddable, ContainingEntity> PRIMITIVES =
@@ -848,15 +844,15 @@ public ContainedEmbeddable newInstance() {
 
 					@Override
 					public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsIndexedEmbedded() {
-						return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsIndexedEmbedded,
-								ContainedEmbeddable::getEmbContainingAsIndexedEmbedded
+						return PropertyAccessor.create( ContainedEmbeddable::setContainingAsIndexedEmbedded,
+								ContainedEmbeddable::getContainingAsIndexedEmbedded
 						);
 					}
 
 					@Override
 					public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsNonIndexedEmbedded() {
-						return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsIndexedEmbedded,
-								ContainedEmbeddable::getEmbContainingAsIndexedEmbedded
+						return PropertyAccessor.create( ContainedEmbeddable::setContainingAsIndexedEmbedded,
+								ContainedEmbeddable::getContainingAsIndexedEmbedded
 						);
 					}
 				};
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingLazyOnContainedSideIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingLazyOnContainedSideIT.java
index c24b4cb699..b48adad67a 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingLazyOnContainedSideIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingLazyOnContainedSideIT.java
@@ -365,9 +365,8 @@ public PropertyAccessor<ContainingEntity, ContainedEntity> containedIndexedEmbed
 
 					@Override
 					public PropertyAccessor<ContainingEntity, ContainingEmbeddable> embeddedAssociations() {
-						return PropertyAccessor.create( ContainingEntity::setEmbeddedAssociations,
-								ContainingEntity::getEmbeddedAssociations );
-					}
+						return PropertyAccessor.create( ContainingEntity::setEmbeddedAssociations, ContainingEntity::getEmbeddedAssociations );
+			}
 
 					@Override
 					public MultiValuedPropertyAccessor<ContainingEntity,
@@ -390,28 +389,26 @@ public static class ContainingEmbeddable {
 		@JoinColumn(name = "CEmbIdxEmbedded")
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" },
 				name = "containedIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedIndexedEmbedded;
+		private ContainedEntity containedIndexedEmbedded;
 
 		@OneToOne
 		@JoinColumn(name = "CEmbNonIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedNonIndexedEmbedded;
+		private ContainedEntity containedNonIndexedEmbedded;
 
-		public ContainedEntity getEmbContainedIndexedEmbedded() {
-			return embContainedIndexedEmbedded;
+		public ContainedEntity getContainedIndexedEmbedded() {
+			return containedIndexedEmbedded;
 		}
 
-		public void setEmbContainedIndexedEmbedded(ContainedEntity embContainedIndexedEmbedded) {
-			this.embContainedIndexedEmbedded = embContainedIndexedEmbedded;
+		public void setContainedIndexedEmbedded(ContainedEntity containedIndexedEmbedded) {
+			this.containedIndexedEmbedded = containedIndexedEmbedded;
 		}
 
-		public ContainedEntity getEmbContainedNonIndexedEmbedded() {
-			return embContainedNonIndexedEmbedded;
+		public ContainedEntity getContainedNonIndexedEmbedded() {
+			return containedNonIndexedEmbedded;
 		}
 
-		public void setEmbContainedNonIndexedEmbedded(ContainedEntity embContainedNonIndexedEmbedded) {
-			this.embContainedNonIndexedEmbedded = embContainedNonIndexedEmbedded;
+		public void setContainedNonIndexedEmbedded(ContainedEntity containedNonIndexedEmbedded) {
+			this.containedNonIndexedEmbedded = containedNonIndexedEmbedded;
 		}
 
 		static final ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity> PRIMITIVES =
@@ -423,15 +420,15 @@ public ContainingEmbeddable newInstance() {
 
 					@Override
 					public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedIndexedEmbedded() {
-						return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedIndexedEmbedded,
-								ContainingEmbeddable::getEmbContainedIndexedEmbedded
+						return PropertyAccessor.create( ContainingEmbeddable::setContainedIndexedEmbedded,
+								ContainingEmbeddable::getContainedIndexedEmbedded
 						);
 					}
 
 					@Override
 					public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedNonIndexedEmbedded() {
-						return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedNonIndexedEmbedded,
-								ContainingEmbeddable::getEmbContainedNonIndexedEmbedded
+						return PropertyAccessor.create( ContainingEmbeddable::setContainedNonIndexedEmbedded,
+								ContainingEmbeddable::getContainedNonIndexedEmbedded
 						);
 					}
 				};
@@ -507,7 +504,7 @@ public static class ContainedEntity {
 		@JoinColumn(name = "CECAssocIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainedIndexedEmbedded")
+				@PropertyValue(propertyName = "containedIndexedEmbedded")
 		}))
 		private ContainingEntity containingAsElementCollectionAssociationsIndexedEmbedded;
 
@@ -520,7 +517,7 @@ public static class ContainedEntity {
 		@JoinColumn(name = "CECAssocNonIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainedNonIndexedEmbedded")
+				@PropertyValue(propertyName = "containedNonIndexedEmbedded")
 		}))
 		private ContainingEntity containingAsElementCollectionAssociationsNonIndexedEmbedded;
 
@@ -776,9 +773,8 @@ public PropertyAccessor<ContainedEntity, ContainingEntity> containingAsIndexedEm
 
 					@Override
 					public PropertyAccessor<ContainedEntity, ContainedEmbeddable> embeddedAssociations() {
-						return PropertyAccessor.create( ContainedEntity::setEmbeddedAssociations,
-								ContainedEntity::getEmbeddedAssociations );
-					}
+						return PropertyAccessor.create( ContainedEntity::setEmbeddedAssociations, ContainedEntity::getEmbeddedAssociations );
+			}
 
 					@Override
 					public PropertyAccessor<ContainedEntity,
@@ -846,30 +842,28 @@ public PropertyAccessor<ContainedEntity, String> fieldUsedInCrossEntityDerivedFi
 
 	public static class ContainedEmbeddable {
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainedIndexedEmbedded", fetch = FetchType.LAZY)
+		@OneToOne(mappedBy = "embeddedAssociations.containedIndexedEmbedded", fetch = FetchType.LAZY)
 		@LazyGroup("embeddable_containingAsIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsIndexedEmbedded;
+		private ContainingEntity containingAsIndexedEmbedded;
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainedNonIndexedEmbedded", fetch = FetchType.LAZY)
+		@OneToOne(mappedBy = "embeddedAssociations.containedNonIndexedEmbedded", fetch = FetchType.LAZY)
 		@LazyGroup("embeddable_containingAsNonIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsNonIndexedEmbedded;
+		private ContainingEntity containingAsNonIndexedEmbedded;
 
-		public ContainingEntity getEmbContainingAsIndexedEmbedded() {
-			return embContainingAsIndexedEmbedded;
+		public ContainingEntity getContainingAsIndexedEmbedded() {
+			return containingAsIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsIndexedEmbedded(ContainingEntity embContainingAsIndexedEmbedded) {
-			this.embContainingAsIndexedEmbedded = embContainingAsIndexedEmbedded;
+		public void setContainingAsIndexedEmbedded(ContainingEntity containingAsIndexedEmbedded) {
+			this.containingAsIndexedEmbedded = containingAsIndexedEmbedded;
 		}
 
-		public ContainingEntity getEmbContainingAsNonIndexedEmbedded() {
-			return embContainingAsNonIndexedEmbedded;
+		public ContainingEntity getContainingAsNonIndexedEmbedded() {
+			return containingAsNonIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsNonIndexedEmbedded(ContainingEntity embContainingAsNonIndexedEmbedded) {
-			this.embContainingAsNonIndexedEmbedded = embContainingAsNonIndexedEmbedded;
+		public void setContainingAsNonIndexedEmbedded(ContainingEntity containingAsNonIndexedEmbedded) {
+			this.containingAsNonIndexedEmbedded = containingAsNonIndexedEmbedded;
 		}
 
 		static ContainedEmbeddablePrimitives<ContainedEmbeddable, ContainingEntity> PRIMITIVES =
@@ -881,15 +875,15 @@ public ContainedEmbeddable newInstance() {
 
 					@Override
 					public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsIndexedEmbedded() {
-						return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsIndexedEmbedded,
-								ContainedEmbeddable::getEmbContainingAsIndexedEmbedded
+						return PropertyAccessor.create( ContainedEmbeddable::setContainingAsIndexedEmbedded,
+								ContainedEmbeddable::getContainingAsIndexedEmbedded
 						);
 					}
 
 					@Override
 					public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsNonIndexedEmbedded() {
-						return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsIndexedEmbedded,
-								ContainedEmbeddable::getEmbContainingAsIndexedEmbedded
+						return PropertyAccessor.create( ContainedEmbeddable::setContainingAsIndexedEmbedded,
+								ContainedEmbeddable::getContainingAsIndexedEmbedded
 						);
 					}
 				};
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingLazyOnContainingSideIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingLazyOnContainingSideIT.java
index 04c74f5e43..29e76ee8ba 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingLazyOnContainingSideIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingLazyOnContainingSideIT.java
@@ -398,29 +398,27 @@ public static class ContainingEmbeddable {
 		@JoinColumn(name = "CEmbIdxEmbedded")
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" },
 				name = "containedIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedIndexedEmbedded;
+		private ContainedEntity containedIndexedEmbedded;
 
 		@OneToOne(fetch = FetchType.LAZY)
 		@LazyGroup("embeddable_containedNonIndexedEmbedded")
 		@JoinColumn(name = "CEmbNonIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedNonIndexedEmbedded;
+		private ContainedEntity containedNonIndexedEmbedded;
 
-		public ContainedEntity getEmbContainedIndexedEmbedded() {
-			return embContainedIndexedEmbedded;
+		public ContainedEntity getContainedIndexedEmbedded() {
+			return containedIndexedEmbedded;
 		}
 
-		public void setEmbContainedIndexedEmbedded(ContainedEntity embContainedIndexedEmbedded) {
-			this.embContainedIndexedEmbedded = embContainedIndexedEmbedded;
+		public void setContainedIndexedEmbedded(ContainedEntity containedIndexedEmbedded) {
+			this.containedIndexedEmbedded = containedIndexedEmbedded;
 		}
 
-		public ContainedEntity getEmbContainedNonIndexedEmbedded() {
-			return embContainedNonIndexedEmbedded;
+		public ContainedEntity getContainedNonIndexedEmbedded() {
+			return containedNonIndexedEmbedded;
 		}
 
-		public void setEmbContainedNonIndexedEmbedded(ContainedEntity embContainedNonIndexedEmbedded) {
-			this.embContainedNonIndexedEmbedded = embContainedNonIndexedEmbedded;
+		public void setContainedNonIndexedEmbedded(ContainedEntity containedNonIndexedEmbedded) {
+			this.containedNonIndexedEmbedded = containedNonIndexedEmbedded;
 		}
 
 		static final ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity> PRIMITIVES =
@@ -432,15 +430,15 @@ public ContainingEmbeddable newInstance() {
 
 					@Override
 					public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedIndexedEmbedded() {
-						return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedIndexedEmbedded,
-								ContainingEmbeddable::getEmbContainedIndexedEmbedded
+						return PropertyAccessor.create( ContainingEmbeddable::setContainedIndexedEmbedded,
+								ContainingEmbeddable::getContainedIndexedEmbedded
 						);
 					}
 
 					@Override
 					public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedNonIndexedEmbedded() {
-						return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedNonIndexedEmbedded,
-								ContainingEmbeddable::getEmbContainedNonIndexedEmbedded
+						return PropertyAccessor.create( ContainingEmbeddable::setContainedNonIndexedEmbedded,
+								ContainingEmbeddable::getContainedNonIndexedEmbedded
 						);
 					}
 				};
@@ -509,7 +507,7 @@ public static class ContainedEntity {
 		@JoinColumn(name = "CECAssocIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainedIndexedEmbedded")
+				@PropertyValue(propertyName = "containedIndexedEmbedded")
 		}))
 		private ContainingEntity containingAsElementCollectionAssociationsIndexedEmbedded;
 
@@ -521,7 +519,7 @@ public static class ContainedEntity {
 		@JoinColumn(name = "CECAssocNonIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainedNonIndexedEmbedded")
+				@PropertyValue(propertyName = "containedNonIndexedEmbedded")
 		}))
 		private ContainingEntity containingAsElementCollectionAssociationsNonIndexedEmbedded;
 
@@ -847,28 +845,26 @@ public PropertyAccessor<ContainedEntity, String> fieldUsedInCrossEntityDerivedFi
 
 	public static class ContainedEmbeddable {
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainedIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsIndexedEmbedded;
+		@OneToOne(mappedBy = "embeddedAssociations.containedIndexedEmbedded")
+		private ContainingEntity containingAsIndexedEmbedded;
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainedNonIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsNonIndexedEmbedded;
+		@OneToOne(mappedBy = "embeddedAssociations.containedNonIndexedEmbedded")
+		private ContainingEntity containingAsNonIndexedEmbedded;
 
-		public ContainingEntity getEmbContainingAsIndexedEmbedded() {
-			return embContainingAsIndexedEmbedded;
+		public ContainingEntity getContainingAsIndexedEmbedded() {
+			return containingAsIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsIndexedEmbedded(ContainingEntity embContainingAsIndexedEmbedded) {
-			this.embContainingAsIndexedEmbedded = embContainingAsIndexedEmbedded;
+		public void setContainingAsIndexedEmbedded(ContainingEntity containingAsIndexedEmbedded) {
+			this.containingAsIndexedEmbedded = containingAsIndexedEmbedded;
 		}
 
-		public ContainingEntity getEmbContainingAsNonIndexedEmbedded() {
-			return embContainingAsNonIndexedEmbedded;
+		public ContainingEntity getContainingAsNonIndexedEmbedded() {
+			return containingAsNonIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsNonIndexedEmbedded(ContainingEntity embContainingAsNonIndexedEmbedded) {
-			this.embContainingAsNonIndexedEmbedded = embContainingAsNonIndexedEmbedded;
+		public void setContainingAsNonIndexedEmbedded(ContainingEntity containingAsNonIndexedEmbedded) {
+			this.containingAsNonIndexedEmbedded = containingAsNonIndexedEmbedded;
 		}
 
 		static ContainedEmbeddablePrimitives<ContainedEmbeddable, ContainingEntity> PRIMITIVES =
@@ -880,15 +876,15 @@ public ContainedEmbeddable newInstance() {
 
 					@Override
 					public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsIndexedEmbedded() {
-						return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsIndexedEmbedded,
-								ContainedEmbeddable::getEmbContainingAsIndexedEmbedded
+						return PropertyAccessor.create( ContainedEmbeddable::setContainingAsIndexedEmbedded,
+								ContainedEmbeddable::getContainingAsIndexedEmbedded
 						);
 					}
 
 					@Override
 					public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsNonIndexedEmbedded() {
-						return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsIndexedEmbedded,
-								ContainedEmbeddable::getEmbContainingAsIndexedEmbedded
+						return PropertyAccessor.create( ContainedEmbeddable::setContainingAsIndexedEmbedded,
+								ContainedEmbeddable::getContainingAsIndexedEmbedded
 						);
 					}
 				};
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/proxy/ContainedInTriggerUnnecessaryCollectionInitializationIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/proxy/ContainedInTriggerUnnecessaryCollectionInitializationIT.java
index 25aaf55f61..c1f5f96cd1 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/proxy/ContainedInTriggerUnnecessaryCollectionInitializationIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/proxy/ContainedInTriggerUnnecessaryCollectionInitializationIT.java
@@ -21,8 +21,6 @@
 
 import org.hibernate.Hibernate;
 import org.hibernate.SessionFactory;
-import org.hibernate.annotations.LazyCollection;
-import org.hibernate.annotations.LazyCollectionOption;
 import org.hibernate.collection.spi.PersistentCollection;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
@@ -139,7 +137,8 @@ public static class Group {
 		private int someInteger;
 
 		@OneToMany(mappedBy = "group")
-		@LazyCollection(LazyCollectionOption.EXTRA)
+		@SuppressWarnings("deprecation")
+		@org.hibernate.annotations.LazyCollection(org.hibernate.annotations.LazyCollectionOption.EXTRA)
 		private Set<Post> posts = new HashSet<>();
 
 		public Integer getId() {
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/session/FlushClearEvictAllIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/session/FlushClearEvictAllIT.java
index cc4b8dc90a..67e0bc4859 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/session/FlushClearEvictAllIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/session/FlushClearEvictAllIT.java
@@ -26,8 +26,6 @@
 import jakarta.persistence.OrderColumn;
 import jakarta.persistence.Table;
 
-import org.hibernate.annotations.LazyCollection;
-import org.hibernate.annotations.LazyCollectionOption;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 import org.hibernate.search.util.impl.integrationtest.common.rule.BackendMock;
@@ -131,7 +129,8 @@ public static class Post {
 		private String name;
 
 		@OneToMany(mappedBy = "post", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
-		@LazyCollection(LazyCollectionOption.EXTRA)
+		@SuppressWarnings("deprecation")
+		@org.hibernate.annotations.LazyCollection(org.hibernate.annotations.LazyCollectionOption.EXTRA)
 		@OrderColumn(name = "idx")
 		private List<Comment> comments = new ArrayList<>();
 
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/dynamicmap/DynamicMapBaseIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/dynamicmap/DynamicMapBaseIT.java
index 64a58181de..1f536bfa45 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/dynamicmap/DynamicMapBaseIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/dynamicmap/DynamicMapBaseIT.java
@@ -127,7 +127,7 @@ public void simple() {
 			);
 
 			assertThat( query.fetchAllHits() ).containsExactly(
-					(Map) session.load( entityTypeName, 1 )
+					(Map) session.getReference( entityTypeName, 1 )
 			);
 		} );
 	}
@@ -212,7 +212,7 @@ public void searchObject() {
 			);
 
 			assertThat( query.fetchAllHits() ).containsExactly(
-					session.load( entityTypeName, 1 )
+					session.getReference( entityTypeName, 1 )
 			);
 		} );
 	}
@@ -331,7 +331,7 @@ public void nonEntityIdDocumentId() {
 			);
 
 			assertThat( query.fetchAllHits() ).containsExactly(
-					session.load( entityTypeName, 1 )
+					session.getReference( entityTypeName, 1 )
 			);
 		} );
 	}
@@ -418,8 +418,8 @@ public void inheritance() {
 			);
 
 			assertThat( query.fetchAllHits() ).containsExactly(
-					(Map) session.load( entityA_BTypeName, 1 ),
-					(Map) session.load( entityA_CTypeName, 2 )
+					(Map) session.getReference( entityA_BTypeName, 1 ),
+					(Map) session.getReference( entityA_CTypeName, 2 )
 			);
 		} );
 	}
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/hibernateormapis/ToHibernateOrmScrollableResultsIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/hibernateormapis/ToHibernateOrmScrollableResultsIT.java
index 35f7426831..32b9a4e8d9 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/hibernateormapis/ToHibernateOrmScrollableResultsIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/hibernateormapis/ToHibernateOrmScrollableResultsIT.java
@@ -86,13 +86,13 @@ public void initData() {
 	public void next() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
+				assertThat( scroll.get() ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				for ( int i = 0; i < ENTITY_COUNT; i++ ) {
@@ -103,18 +103,14 @@ public void next() {
 					assertThat( scroll.getRowNumber() ).isEqualTo( i );
 					assertThat( scroll.isFirst() ).isEqualTo( i == 0 );
 					assertThat( scroll.isLast() ).isEqualTo( i == ( ENTITY_COUNT - 1 ) );
-					assertThat( scroll.get( 0 ) )
+					assertThat( scroll.get() )
 							.isEqualTo( session.getReference( IndexedEntity.class, i ) );
-					Object[] row = scroll.get();
-					assertThat( row ).hasSize( 1 );
-					assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, i ) );
 				}
 
 				assertThat( scroll.next() ).isFalse();
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				// Call next() again after reaching the end: should not do anything
@@ -123,7 +119,6 @@ public void next() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				expectScrollClose();
@@ -135,13 +130,12 @@ public void next() {
 	public void previous() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				// Going to the previous element means going backwards: it's forbidden
@@ -155,7 +149,6 @@ public void previous() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -166,7 +159,7 @@ public void previous() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 0 );
 				assertThat( scroll.isFirst() ).isTrue();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 0 ) );
 
 				// Going to the previous element means going backwards: it's forbidden
@@ -180,7 +173,7 @@ public void previous() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 0 );
 				assertThat( scroll.isFirst() ).isTrue();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 0 ) );
 
 				expectScrollClose();
@@ -192,13 +185,13 @@ public void previous() {
 	public void scrollMode_forwardsOnly() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll( ScrollMode.FORWARD_ONLY ) ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll( ScrollMode.FORWARD_ONLY ) ) {
 				backendMock.verifyExpectationsMet();
 				for ( int i = 0; i < ENTITY_COUNT; i++ ) {
 					expectScrollNextIfNecessary( i, DEFAULT_FETCH_SIZE, ENTITY_COUNT );
 					assertThat( scroll.next() ).isTrue();
 					backendMock.verifyExpectationsMet();
-					assertThat( scroll.get( 0 ) )
+					assertThat( scroll.get() )
 							.isEqualTo( session.getReference( IndexedEntity.class, i ) );
 				}
 
@@ -231,7 +224,7 @@ public void fetchSize() {
 			int customFetchSize = 10;
 			backendMock.expectScrollObjects( Collections.singletonList( IndexedEntity.NAME ),
 					customFetchSize, b -> {} );
-			try ( ScrollableResults scroll = Search.toOrmQuery( Search.session( session )
+			try ( ScrollableResults<?> scroll = Search.toOrmQuery( Search.session( session )
 					.search( IndexedEntity.class )
 					.where( f -> f.matchAll() )
 					.loading( o -> o.fetchSize( customFetchSize ) )
@@ -242,7 +235,6 @@ public void fetchSize() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				for ( int i = 0; i < ENTITY_COUNT; i++ ) {
@@ -253,18 +245,14 @@ public void fetchSize() {
 					assertThat( scroll.getRowNumber() ).isEqualTo( i );
 					assertThat( scroll.isFirst() ).isEqualTo( i == 0 );
 					assertThat( scroll.isLast() ).isEqualTo( i == ( ENTITY_COUNT - 1 ) );
-					assertThat( scroll.get( 0 ) )
+					assertThat( scroll.get() )
 							.isEqualTo( session.getReference( IndexedEntity.class, i ) );
-					Object[] row = scroll.get();
-					assertThat( row ).hasSize( 1 );
-					assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, i ) );
 				}
 
 				assertThat( scroll.next() ).isFalse();
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				expectScrollClose();
@@ -282,13 +270,12 @@ public void maxResults() {
 					.toQuery() );
 			query.setMaxResults( maxResults );
 			expectScrollCreate();
-			try ( ScrollableResults scroll = query.scroll() ) {
+			try ( ScrollableResults<?> scroll = query.scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				for ( int i = 0; i < maxResults; i++ ) {
@@ -299,18 +286,14 @@ public void maxResults() {
 					assertThat( scroll.getRowNumber() ).isEqualTo( i );
 					assertThat( scroll.isFirst() ).isEqualTo( i == 0 );
 					assertThat( scroll.isLast() ).isEqualTo( i == ( maxResults - 1 ) );
-					assertThat( scroll.get( 0 ) )
+					assertThat( scroll.get() )
 							.isEqualTo( session.getReference( IndexedEntity.class, i ) );
-					Object[] row = scroll.get();
-					assertThat( row ).hasSize( 1 );
-					assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, i ) );
 				}
 
 				assertThat( scroll.next() ).isFalse();
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				expectScrollClose();
@@ -322,13 +305,12 @@ public void maxResults() {
 	public void scroll() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -339,11 +321,8 @@ public void scroll() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 9 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 9 ) );
-				Object[] row = scroll.get();
-				assertThat( row ).hasSize( 1 );
-				assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, 9 ) );
 
 				// Scroll 0 positions: should not do anything
 				assertThat( scroll.scroll( 0 ) ).isTrue();
@@ -352,11 +331,8 @@ public void scroll() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 9 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 9 ) );
-				row = scroll.get();
-				assertThat( row ).hasSize( 1 );
-				assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, 9 ) );
 
 				// No call to the underlying scroll.next() is expected here
 				assertThat( scroll.scroll( 50 ) ).isTrue();
@@ -365,11 +341,8 @@ public void scroll() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 59 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 59 ) );
-				row = scroll.get();
-				assertThat( row ).hasSize( 1 );
-				assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, 59 ) );
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
 						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
@@ -383,11 +356,8 @@ public void scroll() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 259 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 259 ) );
-				row = scroll.get();
-				assertThat( row ).hasSize( 1 );
-				assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, 259 ) );
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
 						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
@@ -418,7 +388,6 @@ public void scroll() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				// Calling scroll(<positive number>) again after reaching the end should not do anything
@@ -427,7 +396,6 @@ public void scroll() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				assertThat( scroll.scroll( 1 ) ).isFalse();
@@ -435,7 +403,6 @@ public void scroll() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				expectScrollClose();
@@ -447,13 +414,12 @@ public void scroll() {
 	public void scroll_backwards() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				// scroll(<negative integer>) means going backwards: it's forbidden
@@ -467,7 +433,6 @@ public void scroll_backwards() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -478,7 +443,7 @@ public void scroll_backwards() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 9 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 9 ) );
 
 				// scroll(<negative integer>) means going backwards: it's forbidden
@@ -492,7 +457,7 @@ public void scroll_backwards() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 9 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 9 ) );
 
 				expectScrollClose();
@@ -504,13 +469,12 @@ public void scroll_backwards() {
 	public void setRowNumber() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -521,11 +485,8 @@ public void setRowNumber() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
-				Object[] row = scroll.get();
-				assertThat( row ).hasSize( 1 );
-				assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
 
 				// No call to the underlying scroll.next() is expected here
 				assertThat( scroll.setRowNumber( 50 ) ).isTrue();
@@ -534,11 +495,8 @@ public void setRowNumber() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 50 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 50 ) );
-				row = scroll.get();
-				assertThat( row ).hasSize( 1 );
-				assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, 50 ) );
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
 						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
@@ -552,11 +510,8 @@ public void setRowNumber() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 220 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 220 ) );
-				row = scroll.get();
-				assertThat( row ).hasSize( 1 );
-				assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, 220 ) );
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
 						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
@@ -587,7 +542,6 @@ public void setRowNumber() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				expectScrollClose();
@@ -599,13 +553,12 @@ public void setRowNumber() {
 	public void setRowNumber_backwards() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -616,7 +569,7 @@ public void setRowNumber_backwards() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
 
 				// setRowNumber(<previous row number>) means going backwards: it's forbidden
@@ -630,7 +583,7 @@ public void setRowNumber_backwards() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
 
 				expectScrollClose();
@@ -642,13 +595,12 @@ public void setRowNumber_backwards() {
 	public void setRowNumber_relativeToEnd() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -659,7 +611,7 @@ public void setRowNumber_relativeToEnd() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
 
 				// setRowNumber(<negative integer>) means going to a position relative to the end: it's forbidden
@@ -673,7 +625,175 @@ public void setRowNumber_relativeToEnd() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
+						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
+
+				expectScrollClose();
+			}
+		} );
+	}
+
+	@Test
+	public void position() {
+		setupHolder.runInTransaction( session -> {
+			expectScrollCreate();
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
+				backendMock.verifyExpectationsMet();
+
+				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() ).isNull();
+
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT, references( 0, DEFAULT_FETCH_SIZE ) ) );
+				assertThat( scroll.position( 10 ) ).isTrue();
+				backendMock.verifyExpectationsMet();
+
+				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() )
+						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
+
+				// No call to the underlying scroll.next() is expected here
+				assertThat( scroll.position( 50 ) ).isTrue();
+				backendMock.verifyExpectationsMet();
+
+				assertThat( scroll.getRowNumber() ).isEqualTo( 50 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() )
+						.isEqualTo( session.getReference( IndexedEntity.class, 50 ) );
+
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
+								references( DEFAULT_FETCH_SIZE, 2 * DEFAULT_FETCH_SIZE ) ) );
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
+								references( 2 * DEFAULT_FETCH_SIZE, 3 * DEFAULT_FETCH_SIZE ) ) );
+				assertThat( scroll.position( 220 ) ).isTrue();
+				backendMock.verifyExpectationsMet();
+
+				assertThat( scroll.getRowNumber() ).isEqualTo( 220 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() )
+						.isEqualTo( session.getReference( IndexedEntity.class, 220 ) );
+
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
+								references( 3 * DEFAULT_FETCH_SIZE, 4 * DEFAULT_FETCH_SIZE ) ) );
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
+								references( 4 * DEFAULT_FETCH_SIZE, 5 * DEFAULT_FETCH_SIZE ) ) );
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
+								references( 5 * DEFAULT_FETCH_SIZE, 6 * DEFAULT_FETCH_SIZE ) ) );
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
+								references( 6 * DEFAULT_FETCH_SIZE, 7 * DEFAULT_FETCH_SIZE ) ) );
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
+								references( 7 * DEFAULT_FETCH_SIZE, 8 * DEFAULT_FETCH_SIZE ) ) );
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
+								references( 8 * DEFAULT_FETCH_SIZE, 9 * DEFAULT_FETCH_SIZE ) ) );
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
+								references( 9 * DEFAULT_FETCH_SIZE, 10 * DEFAULT_FETCH_SIZE ) ) );
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.afterLast() );
+				assertThat( scroll.position( 10000 ) ).isFalse();
+				backendMock.verifyExpectationsMet();
+
+				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() ).isNull();
+
+				expectScrollClose();
+			}
+		} );
+	}
+
+	@Test
+	public void position_backwards() {
+		setupHolder.runInTransaction( session -> {
+			expectScrollCreate();
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
+				backendMock.verifyExpectationsMet();
+
+				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() ).isNull();
+
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT, references( 0, DEFAULT_FETCH_SIZE ) ) );
+				assertThat( scroll.position( 10 ) ).isTrue();
+				backendMock.verifyExpectationsMet();
+
+				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() )
+						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
+
+				// position(<previous row number>) means going backwards: it's forbidden
+				assertThatThrownBy( () -> scroll.position( 5 ) )
+						.isInstanceOf( SearchException.class )
+						.hasMessageContaining(
+								"Cannot scroll backwards with Hibernate Search scrolls: they are forwards-only",
+								"Ensure you always increment the scroll position, and never decrement it" );
+
+				// We're still on the same element
+				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() )
+						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
+
+				expectScrollClose();
+			}
+		} );
+	}
+
+	@Test
+	public void position_relativeToEnd() {
+		setupHolder.runInTransaction( session -> {
+			expectScrollCreate();
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
+				backendMock.verifyExpectationsMet();
+
+				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() ).isNull();
+
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT, references( 0, DEFAULT_FETCH_SIZE ) ) );
+				assertThat( scroll.position( 10 ) ).isTrue();
+				backendMock.verifyExpectationsMet();
+
+				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() )
+						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
+
+				// position(<negative integer>) means going to a position relative to the end: it's forbidden
+				assertThatThrownBy( () -> scroll.position( -500 ) )
+						.isInstanceOf( SearchException.class )
+						.hasMessageContaining(
+								"Cannot set the scroll position relative to the end with Hibernate Search scrolls",
+								"Ensure you always pass a positive number to position()" );
+
+				// We're still on the same element
+				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
 
 				expectScrollClose();
@@ -685,13 +805,12 @@ public void setRowNumber_relativeToEnd() {
 	public void beforeFirst_fromBeforeFirst() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				// Calling beforeFirst() when we're before the first element should not do anything
@@ -700,7 +819,6 @@ public void beforeFirst_fromBeforeFirst() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				// next() still works after a call to beforeFirst()
@@ -712,7 +830,7 @@ public void beforeFirst_fromBeforeFirst() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 0 );
 				assertThat( scroll.isFirst() ).isTrue();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 0 ) );
 
 				expectScrollClose();
@@ -724,13 +842,12 @@ public void beforeFirst_fromBeforeFirst() {
 	public void beforeFirst_fromFirstOrAfter() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -742,7 +859,7 @@ public void beforeFirst_fromFirstOrAfter() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 0 );
 				assertThat( scroll.isFirst() ).isTrue();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 0 ) );
 
 				// Going before the first element would means going backwards: it's forbidden
@@ -761,13 +878,12 @@ public void beforeFirst_fromFirstOrAfter() {
 	public void first() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -779,7 +895,7 @@ public void first() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 0 );
 				assertThat( scroll.isFirst() ).isTrue();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 0 ) );
 
 				// Calling first() when we're on the first element should not do anything
@@ -788,7 +904,7 @@ public void first() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 0 );
 				assertThat( scroll.isFirst() ).isTrue();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 0 ) );
 
 				// next() still works after a call to first()
@@ -797,7 +913,7 @@ public void first() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 1 ) );
 
 				// Going to the first element would means going backwards: it's forbidden
@@ -816,7 +932,7 @@ public void first() {
 	public void first_fromAfterFirst() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -828,7 +944,7 @@ public void first_fromAfterFirst() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 1 ) );
 
 				// Going to the first element would means going backwards: it's forbidden
@@ -847,7 +963,7 @@ public void first_fromAfterFirst() {
 	public void last() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -888,7 +1004,7 @@ public void last() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( ENTITY_COUNT - 1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isTrue();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, ENTITY_COUNT - 1 ) );
 
 				// Calling last() when we're on the last element should not do anything
@@ -897,7 +1013,7 @@ public void last() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( ENTITY_COUNT - 1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isTrue();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, ENTITY_COUNT - 1 ) );
 
 				// next() still works after a call to last()
@@ -906,7 +1022,6 @@ public void last() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				// Going to the last element would means going backwards: it's forbidden
@@ -925,7 +1040,7 @@ public void last() {
 	public void afterLast_fromLastOrBefore() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -936,7 +1051,7 @@ public void afterLast_fromLastOrBefore() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 9 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 9 ) );
 
 				scroll.afterLast();
@@ -944,7 +1059,6 @@ public void afterLast_fromLastOrBefore() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				expectScrollClose();
@@ -956,7 +1070,7 @@ public void afterLast_fromLastOrBefore() {
 	public void afterLast_fromAfterLast() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -996,7 +1110,6 @@ public void afterLast_fromAfterLast() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				scroll.afterLast();
@@ -1005,7 +1118,6 @@ public void afterLast_fromAfterLast() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				expectScrollClose();
@@ -1018,7 +1130,7 @@ public void afterLast_fromAfterLast() {
 	public void close() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				ScrollableResultsImplementor implementor = (ScrollableResultsImplementor) scroll;
@@ -1060,7 +1172,7 @@ public void timeout() {
 		setupHolder.runInTransaction( session -> {
 			backendMock.expectScrollObjects( Collections.singletonList( IndexedEntity.NAME ),
 					DEFAULT_FETCH_SIZE, b -> b.failAfter( 200, TimeUnit.MILLISECONDS ) );
-			try ( ScrollableResults scroll = createSimpleQuery( session )
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session )
 					.setHint( "jakarta.persistence.query.timeout", 200 )
 					.scroll() ) {
 				backendMock.verifyExpectationsMet();
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/massindexing/MassIndexingCachingIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/massindexing/MassIndexingCachingIT.java
index a6052efab6..9db36d65ba 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/massindexing/MassIndexingCachingIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/massindexing/MassIndexingCachingIT.java
@@ -57,7 +57,7 @@ public void setup(OrmSetupHelper.SetupContext setupContext) {
 		backendMock.expectAnySchema( IndexedEntity.NAME );
 
 		setupContext.withPropertyRadical( HibernateOrmMapperSettings.Radicals.INDEXING_LISTENERS_ENABLED, "false" )
-				.withProperty( AvailableSettings.JPA_SHARED_CACHE_MODE, SharedCacheMode.ALL.name() )
+				.withProperty( AvailableSettings.JAKARTA_SHARED_CACHE_MODE, SharedCacheMode.ALL.name() )
 				.withProperty( AvailableSettings.GENERATE_STATISTICS, "true" )
 				.withProperty( AvailableSettings.USE_SECOND_LEVEL_CACHE, "true" )
 				.withAnnotatedTypes( IndexedEntity.class );
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/model/BackRefPropertyIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/model/BackRefPropertyIT.java
index decda9e0ef..f99343ff26 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/model/BackRefPropertyIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/model/BackRefPropertyIT.java
@@ -21,7 +21,7 @@
 
 import org.hibernate.SessionFactory;
 import org.hibernate.engine.spi.SessionFactoryImplementor;
-import org.hibernate.metamodel.spi.MetamodelImplementor;
+import org.hibernate.metamodel.MappingMetamodel;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.AssociationInverseSide;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
@@ -62,8 +62,8 @@ public void test() {
 
 		// Hibernate Search started successfully.
 		// Check that there actually is a backref:
-		MetamodelImplementor metamodel = sessionFactory.unwrap( SessionFactoryImplementor.class ).getMetamodel();
-		assertThat( metamodel.entityPersister( IndexedEntity.class ).getPropertyNames() )
+		MappingMetamodel metamodel = sessionFactory.unwrap( SessionFactoryImplementor.class ).getMappingMetamodel();
+		assertThat( metamodel.getEntityDescriptor( IndexedEntity.class ).getPropertyNames() )
 				.contains( "_containing_fk_containingidBackref" )
 				.contains( "_containingIndexBackref" );
 
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/model/FormulaPropertyIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/model/FormulaPropertyIT.java
new file mode 100644
index 0000000000..cd7f26ead1
--- /dev/null
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/model/FormulaPropertyIT.java
@@ -0,0 +1,137 @@
+/*
+ * Hibernate Search, full-text search for your domain model
+ *
+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later
+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
+ */
+package org.hibernate.search.integrationtest.mapper.orm.model;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.hibernate.search.util.impl.integrationtest.mapper.orm.OrmUtils.with;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
+import jakarta.persistence.ManyToOne;
+import jakarta.persistence.OneToMany;
+
+import org.hibernate.SessionFactory;
+import org.hibernate.annotations.Formula;
+import org.hibernate.search.engine.backend.analysis.AnalyzerNames;
+import org.hibernate.search.mapper.pojo.automaticindexing.ReindexOnUpdate;
+import org.hibernate.search.mapper.pojo.mapping.definition.annotation.FullTextField;
+import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
+import org.hibernate.search.mapper.pojo.mapping.definition.annotation.IndexedEmbedded;
+import org.hibernate.search.mapper.pojo.mapping.definition.annotation.IndexingDependency;
+import org.hibernate.search.util.impl.integrationtest.common.rule.BackendMock;
+import org.hibernate.search.util.impl.integrationtest.mapper.orm.OrmSetupHelper;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+
+public class FormulaPropertyIT {
+
+	@Rule
+	public BackendMock backendMock = new BackendMock();
+
+	@Rule
+	public OrmSetupHelper ormSetupHelper = OrmSetupHelper.withBackendMock( backendMock );
+
+	private SessionFactory sessionFactory;
+
+	@Before
+	public void setup() {
+		backendMock.expectSchema( IndexedEntity.INDEX, b -> b
+				.field( "string", String.class, b2 -> b2.analyzerName( AnalyzerNames.DEFAULT ) )
+		).expectSchema( RootEntity.INDEX, b -> b
+				.objectField( "entityShallow",
+						b1 -> b1.field( "string", String.class, b2 -> b2.analyzerName( AnalyzerNames.DEFAULT ) ) )
+				.objectField( "entityMapped",
+						b1 -> b1.field( "string", String.class, b2 -> b2.analyzerName( AnalyzerNames.DEFAULT ) ) ) );
+
+		sessionFactory = ormSetupHelper.start()
+				.setup( IndexedEntity.class, RootEntity.class );
+		backendMock.verifyExpectationsMet();
+	}
+
+	@Test
+	public void index() {
+		with( sessionFactory ).runInTransaction( session -> {
+			IndexedEntity entity1 = new IndexedEntity();
+			entity1.id = 1;
+			entity1.string = "smth";
+			entity1.amount1 = 10;
+			entity1.amount2 = 20;
+
+			RootEntity rootEntity = new RootEntity();
+			rootEntity.id = 1;
+			rootEntity.entityShallow = entity1;
+			rootEntity.entityMapped = entity1;
+			entity1.rootEntities.add( rootEntity );
+
+			session.persist( entity1 );
+			session.persist( rootEntity );
+
+			backendMock.expectWorks( IndexedEntity.INDEX )
+					.add( "1", b -> b
+							.field( "string", "smth" )
+					);
+			backendMock.expectWorks( RootEntity.INDEX )
+					.add( "1", b -> b
+							.objectField( "entityShallow", b1 -> b1.field( "string", "smth" ) )
+							.objectField( "entityMapped", b1 -> b1.field( "string", "smth" ) )
+					);
+		} );
+		with( sessionFactory ).runInTransaction( session -> {
+			IndexedEntity entity1 = session.get( IndexedEntity.class, 1 );
+			assertThat( entity1.string ).isEqualTo( "smth" );
+			assertThat( entity1.amountDifference ).isEqualTo( 10 );
+		} );
+	}
+
+	@Entity(name = "root_entity")
+	@Indexed(index = RootEntity.INDEX)
+	public static final class RootEntity {
+
+		static final String INDEX = "RootEntity";
+
+		@Id
+		public Integer id;
+
+		@IndexedEmbedded
+		@IndexingDependency(reindexOnUpdate = ReindexOnUpdate.SHALLOW)
+		@ManyToOne
+		public IndexedEntity entityShallow;
+
+		@IndexedEmbedded
+		@ManyToOne
+		public IndexedEntity entityMapped;
+
+	}
+
+	@Entity(name = "indexed")
+	@Indexed(index = IndexedEntity.INDEX)
+	public static final class IndexedEntity {
+
+		static final String INDEX = "IndexedEntity";
+
+		@Id
+		public Integer id;
+
+		@FullTextField
+		public String string;
+
+		public int amount1;
+		public int amount2;
+
+		@Formula("amount2 - amount1")
+		public int amountDifference;
+
+		@OneToMany(mappedBy = "entityMapped")
+		Set<RootEntity> rootEntities = new HashSet<>();
+
+	}
+}
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/model/GenericPropertyIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/model/GenericPropertyIT.java
index 442af1d773..91fa3b5f36 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/model/GenericPropertyIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/model/GenericPropertyIT.java
@@ -8,6 +8,8 @@
 
 import static org.hibernate.search.util.impl.integrationtest.mapper.orm.OrmUtils.with;
 
+import java.io.Serializable;
+import java.sql.Types;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -18,6 +20,7 @@
 import jakarta.persistence.OneToMany;
 
 import org.hibernate.SessionFactory;
+import org.hibernate.annotations.JdbcTypeCode;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.IndexedEmbedded;
@@ -118,25 +121,18 @@ public void setGenericProperty(GenericEntity<String> genericProperty) {
 	}
 
 	@Entity(name = "generic")
-	public abstract static class GenericEntity<T> {
+	public abstract static class GenericEntity<T extends Serializable> {
 
 		@Id
 		private Integer id;
 
 		@Basic
 		@GenericField
-		// Necessary for Hibernate ORM: even if we make T extend Serializable,
-		// ORM doesn't take it into account for some reason.
-		@SuppressWarnings("deprecation")
-		@org.hibernate.annotations.Type(type = "serializable")
 		private T content;
 
 		@Basic
 		@GenericField
-		// Necessary for Hibernate ORM: even if we make T extend Serializable,
-		// ORM doesn't take it into account for some reason.
-		@SuppressWarnings("deprecation")
-		@org.hibernate.annotations.Type(type = "serializable")
+		@JdbcTypeCode(Types.VARBINARY)
 		private T[] arrayContent;
 
 		@OneToMany(mappedBy = "genericProperty")
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/model/SyntheticPropertyIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/model/SyntheticPropertyIT.java
index c530b871a4..143641afb5 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/model/SyntheticPropertyIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/model/SyntheticPropertyIT.java
@@ -21,7 +21,7 @@
 
 import org.hibernate.SessionFactory;
 import org.hibernate.engine.spi.SessionFactoryImplementor;
-import org.hibernate.metamodel.spi.MetamodelImplementor;
+import org.hibernate.metamodel.MappingMetamodel;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.IndexedEmbedded;
@@ -59,8 +59,8 @@ public void test() {
 
 		// Hibernate Search started successfully.
 		// Check that there actually is a synthetic property:
-		MetamodelImplementor metamodel = sessionFactory.unwrap( SessionFactoryImplementor.class ).getMetamodel();
-		assertThat( metamodel.entityPersister( ContainedEntity.class ).getPropertyNames() )
+		MappingMetamodel metamodel = sessionFactory.unwrap( SessionFactoryImplementor.class ).getMappingMetamodel();
+		assertThat( metamodel.getEntityDescriptor( ContainedEntity.class ).getPropertyNames() )
 				.contains( "_" + IndexedEntity.class.getName().replace( '.', '_' ) + "_contained" );
 
 		// If we get here the bug was solved, but let's at least check that indexing works
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/search/loading/SearchQueryEntityLoadingCacheLookupIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/search/loading/SearchQueryEntityLoadingCacheLookupIT.java
index 2faac7ea2f..25c1d49e2f 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/search/loading/SearchQueryEntityLoadingCacheLookupIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/search/loading/SearchQueryEntityLoadingCacheLookupIT.java
@@ -99,7 +99,7 @@ public void setup(OrmSetupHelper.SetupContext setupContext) {
 
 		setupContext.withProperty( HibernateOrmMapperSettings.QUERY_LOADING_CACHE_LOOKUP_STRATEGY,
 				defaultCacheLookupStrategy )
-				.withProperty( AvailableSettings.JPA_SHARED_CACHE_MODE, SharedCacheMode.ALL.name() )
+				.withProperty( AvailableSettings.JAKARTA_SHARED_CACHE_MODE, SharedCacheMode.ALL.name() )
 				.withConfiguration( c -> mapping.configure( c, model ) );
 	}
 
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/search/loading/SearchQueryEntityLoadingMultipleTypesIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/search/loading/SearchQueryEntityLoadingMultipleTypesIT.java
index f5c0063837..4e1d7fe7fb 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/search/loading/SearchQueryEntityLoadingMultipleTypesIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/search/loading/SearchQueryEntityLoadingMultipleTypesIT.java
@@ -118,7 +118,7 @@ public void setup(OrmSetupHelper.SetupContext setupContext) {
 		backendMock.expectAnySchema( Hierarchy8_A_C_Cacheable.NAME );
 		backendMock.expectAnySchema( Hierarchy8_A_D_Cacheable.NAME );
 
-		setupContext.withProperty( AvailableSettings.JPA_SHARED_CACHE_MODE, SharedCacheMode.ENABLE_SELECTIVE.name() )
+		setupContext.withProperty( AvailableSettings.JAKARTA_SHARED_CACHE_MODE, SharedCacheMode.ENABLE_SELECTIVE.name() )
 				.withAnnotatedTypes(
 						Hierarchy1_A__Abstract.class,
 						Hierarchy1_A_B.class,
