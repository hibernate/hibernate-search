diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingBooleanArrayIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingBooleanArrayIT.java
index b0a91acdfd..245f25164b 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingBooleanArrayIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingBooleanArrayIT.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.search.integrationtest.mapper.orm.automaticindexing.array;
 
+import java.sql.Types;
 import java.util.Arrays;
 import java.util.List;
 import jakarta.persistence.ElementCollection;
@@ -13,6 +14,7 @@
 import jakarta.persistence.Id;
 import jakarta.persistence.OrderColumn;
 
+import org.hibernate.annotations.JdbcTypeCode;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 import org.hibernate.search.util.impl.test.annotation.TestForIssue;
@@ -96,6 +98,7 @@ public static class IndexedEntity {
 		private Integer id;
 
 		@GenericField
+		@JdbcTypeCode(Types.VARBINARY)
 		private boolean[] serializedArray;
 
 		@GenericField
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingDoubleArrayIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingDoubleArrayIT.java
index 68872d144a..5a2e4b75fc 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingDoubleArrayIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingDoubleArrayIT.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.search.integrationtest.mapper.orm.automaticindexing.array;
 
+import java.sql.Types;
 import java.util.Arrays;
 import java.util.List;
 import jakarta.persistence.ElementCollection;
@@ -13,6 +14,7 @@
 import jakarta.persistence.Id;
 import jakarta.persistence.OrderColumn;
 
+import org.hibernate.annotations.JdbcTypeCode;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 import org.hibernate.search.util.impl.test.annotation.TestForIssue;
@@ -96,6 +98,7 @@ public static class IndexedEntity {
 		private Integer id;
 
 		@GenericField
+		@JdbcTypeCode(Types.VARBINARY)
 		private double[] serializedArray;
 
 		@GenericField
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingFloatArrayIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingFloatArrayIT.java
index 1166f292ff..0b154beb72 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingFloatArrayIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingFloatArrayIT.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.search.integrationtest.mapper.orm.automaticindexing.array;
 
+import java.sql.Types;
 import java.util.Arrays;
 import java.util.List;
 import jakarta.persistence.ElementCollection;
@@ -13,6 +14,7 @@
 import jakarta.persistence.Id;
 import jakarta.persistence.OrderColumn;
 
+import org.hibernate.annotations.JdbcTypeCode;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 import org.hibernate.search.util.impl.test.annotation.TestForIssue;
@@ -96,6 +98,7 @@ public static class IndexedEntity {
 		private Integer id;
 
 		@GenericField
+		@JdbcTypeCode(Types.VARBINARY)
 		private float[] serializedArray;
 
 		@GenericField
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingIntArrayIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingIntArrayIT.java
index b7b8c6567c..752d88e268 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingIntArrayIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingIntArrayIT.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.search.integrationtest.mapper.orm.automaticindexing.array;
 
+import java.sql.Types;
 import java.util.Arrays;
 import java.util.List;
 import jakarta.persistence.ElementCollection;
@@ -13,6 +14,7 @@
 import jakarta.persistence.Id;
 import jakarta.persistence.OrderColumn;
 
+import org.hibernate.annotations.JdbcTypeCode;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 import org.hibernate.search.util.impl.test.annotation.TestForIssue;
@@ -96,6 +98,7 @@ public static class IndexedEntity {
 		private Integer id;
 
 		@GenericField
+		@JdbcTypeCode(Types.VARBINARY)
 		private int[] serializedArray;
 
 		@GenericField
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingLongArrayIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingLongArrayIT.java
index b4ef90515e..45340e2163 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingLongArrayIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingLongArrayIT.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.search.integrationtest.mapper.orm.automaticindexing.array;
 
+import java.sql.Types;
 import java.util.Arrays;
 import java.util.List;
 import jakarta.persistence.ElementCollection;
@@ -13,6 +14,7 @@
 import jakarta.persistence.Id;
 import jakarta.persistence.OrderColumn;
 
+import org.hibernate.annotations.JdbcTypeCode;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 import org.hibernate.search.util.impl.test.annotation.TestForIssue;
@@ -96,6 +98,7 @@ public static class IndexedEntity {
 		private Integer id;
 
 		@GenericField
+		@JdbcTypeCode(Types.VARBINARY)
 		private long[] serializedArray;
 
 		@GenericField
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingShortArrayIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingShortArrayIT.java
index 6a5b0666f7..9ad69dca1b 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingShortArrayIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingShortArrayIT.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.search.integrationtest.mapper.orm.automaticindexing.array;
 
+import java.sql.Types;
 import java.util.Arrays;
 import java.util.List;
 import jakarta.persistence.ElementCollection;
@@ -13,6 +14,7 @@
 import jakarta.persistence.Id;
 import jakarta.persistence.OrderColumn;
 
+import org.hibernate.annotations.JdbcTypeCode;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 import org.hibernate.search.util.impl.test.annotation.TestForIssue;
@@ -96,6 +98,7 @@ public static class IndexedEntity {
 		private Integer id;
 
 		@GenericField
+		@JdbcTypeCode(Types.VARBINARY)
 		private short[] serializedArray;
 
 		@GenericField
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingStringArrayIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingStringArrayIT.java
index 7898311502..a08c5e44f9 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingStringArrayIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/array/AutomaticIndexingStringArrayIT.java
@@ -6,6 +6,7 @@
  */
 package org.hibernate.search.integrationtest.mapper.orm.automaticindexing.array;
 
+import java.sql.Types;
 import java.util.Arrays;
 import java.util.List;
 import jakarta.persistence.ElementCollection;
@@ -13,6 +14,7 @@
 import jakarta.persistence.Id;
 import jakarta.persistence.OrderColumn;
 
+import org.hibernate.annotations.JdbcTypeCode;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 
@@ -95,6 +97,7 @@ public static class IndexedEntity {
 		private Integer id;
 
 		@GenericField
+		@JdbcTypeCode(Types.VARBINARY)
 		private String[] serializedArray;
 
 		@GenericField
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/manytoone/AutomaticIndexingManyToOneBaseIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/manytoone/AutomaticIndexingManyToOneBaseIT.java
index 641b2c8662..1c340864c5 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/manytoone/AutomaticIndexingManyToOneBaseIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/manytoone/AutomaticIndexingManyToOneBaseIT.java
@@ -360,28 +360,26 @@ public static class ContainingEmbeddable {
 		@JoinColumn(name = "CEmbIdxEmbedded")
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" },
 				name = "containedIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedIndexedEmbedded;
+		private ContainedEntity containedIndexedEmbedded;
 
 		@ManyToOne
 		@JoinColumn(name = "CEmbNonIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedNonIndexedEmbedded;
+		private ContainedEntity containedNonIndexedEmbedded;
 
-		public ContainedEntity getEmbContainedIndexedEmbedded() {
-			return embContainedIndexedEmbedded;
+		public ContainedEntity getContainedIndexedEmbedded() {
+			return containedIndexedEmbedded;
 		}
 
-		public void setEmbContainedIndexedEmbedded(ContainedEntity embContainedIndexedEmbedded) {
-			this.embContainedIndexedEmbedded = embContainedIndexedEmbedded;
+		public void setContainedIndexedEmbedded(ContainedEntity containedIndexedEmbedded) {
+			this.containedIndexedEmbedded = containedIndexedEmbedded;
 		}
 
-		public ContainedEntity getEmbContainedNonIndexedEmbedded() {
-			return embContainedNonIndexedEmbedded;
+		public ContainedEntity getContainedNonIndexedEmbedded() {
+			return containedNonIndexedEmbedded;
 		}
 
-		public void setEmbContainedNonIndexedEmbedded(ContainedEntity embContainedNonIndexedEmbedded) {
-			this.embContainedNonIndexedEmbedded = embContainedNonIndexedEmbedded;
+		public void setContainedNonIndexedEmbedded(ContainedEntity containedNonIndexedEmbedded) {
+			this.containedNonIndexedEmbedded = containedNonIndexedEmbedded;
 		}
 
 		static final ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity> PRIMITIVES = new ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity>() {
@@ -392,15 +390,15 @@ public ContainingEmbeddable newInstance() {
 
 			@Override
 			public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedIndexedEmbedded() {
-				return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedIndexedEmbedded,
-						ContainingEmbeddable::getEmbContainedIndexedEmbedded
+				return PropertyAccessor.create( ContainingEmbeddable::setContainedIndexedEmbedded,
+						ContainingEmbeddable::getContainedIndexedEmbedded
 				);
 			}
 
 			@Override
 			public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedNonIndexedEmbedded() {
-				return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedNonIndexedEmbedded,
-						ContainingEmbeddable::getEmbContainedNonIndexedEmbedded
+				return PropertyAccessor.create( ContainingEmbeddable::setContainedNonIndexedEmbedded,
+						ContainingEmbeddable::getContainedNonIndexedEmbedded
 				);
 			}
 		};
@@ -485,7 +483,7 @@ public static class ContainedEntity {
 				inverseJoinColumns = @JoinColumn(name = "containing"))
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainedIndexedEmbedded")
+				@PropertyValue(propertyName = "containedIndexedEmbedded")
 		}))
 		private List<ContainingEntity> containingAsElementCollectionAssociationsIndexedEmbedded = new ArrayList<>();
 
@@ -500,7 +498,7 @@ public static class ContainedEntity {
 				inverseJoinColumns = @JoinColumn(name = "containing"))
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainedNonIndexedEmbedded")
+				@PropertyValue(propertyName = "containedNonIndexedEmbedded")
 		}))
 		private List<ContainingEntity> containingAsElementCollectionAssociationsNonIndexedEmbedded = new ArrayList<>();
 
@@ -780,11 +778,11 @@ public PropertyAccessor<ContainedEntity, String> fieldUsedInCrossEntityDerivedFi
 
 	public static class ContainedEmbeddable {
 
-		@OneToMany(mappedBy = "embeddedAssociations.embContainedIndexedEmbedded")
+		@OneToMany(mappedBy = "embeddedAssociations.containedIndexedEmbedded")
 		@OrderBy("id asc") // Make sure the iteration order is predictable
 		private List<ContainingEntity> containingAsIndexedEmbedded = new ArrayList<>();
 
-		@OneToMany(mappedBy = "embeddedAssociations.embContainedNonIndexedEmbedded")
+		@OneToMany(mappedBy = "embeddedAssociations.containedNonIndexedEmbedded")
 		@OrderBy("id asc") // Make sure the iteration order is predictable
 		private List<ContainingEntity> containingAsNonIndexedEmbedded = new ArrayList<>();
 
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedEagerOnBothSidesIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedEagerOnBothSidesIT.java
index 62830d9a69..9084e262e7 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedEagerOnBothSidesIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedEagerOnBothSidesIT.java
@@ -164,7 +164,7 @@ public static class ContainingEntity {
 		@JoinColumn(name = "CECAssocIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainingAsIndexedEmbedded")
+				@PropertyValue(propertyName = "containingAsIndexedEmbedded")
 		}))
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" })
 		private ContainedEntity containedElementCollectionAssociationsIndexedEmbedded;
@@ -177,7 +177,7 @@ public static class ContainingEntity {
 		@JoinColumn(name = "CECAssocNonIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainingAsNonIndexedEmbedded")
+				@PropertyValue(propertyName = "containingAsNonIndexedEmbedded")
 		}))
 		private ContainedEntity containedElementCollectionAssociationsNonIndexedEmbedded;
 
@@ -396,30 +396,28 @@ public PropertyAccessor<ContainingEntity, String> nonIndexedField() {
 
 	public static class ContainingEmbeddable {
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainingAsIndexedEmbedded")
+		@OneToOne(mappedBy = "embeddedAssociations.containingAsIndexedEmbedded")
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" },
 				name = "containedIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedIndexedEmbedded;
+		private ContainedEntity containedIndexedEmbedded;
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainingAsNonIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedNonIndexedEmbedded;
+		@OneToOne(mappedBy = "embeddedAssociations.containingAsNonIndexedEmbedded")
+		private ContainedEntity containedNonIndexedEmbedded;
 
-		public ContainedEntity getEmbContainedIndexedEmbedded() {
-			return embContainedIndexedEmbedded;
+		public ContainedEntity getContainedIndexedEmbedded() {
+			return containedIndexedEmbedded;
 		}
 
-		public void setEmbContainedIndexedEmbedded(ContainedEntity embContainedIndexedEmbedded) {
-			this.embContainedIndexedEmbedded = embContainedIndexedEmbedded;
+		public void setContainedIndexedEmbedded(ContainedEntity containedIndexedEmbedded) {
+			this.containedIndexedEmbedded = containedIndexedEmbedded;
 		}
 
-		public ContainedEntity getEmbContainedNonIndexedEmbedded() {
-			return embContainedNonIndexedEmbedded;
+		public ContainedEntity getContainedNonIndexedEmbedded() {
+			return containedNonIndexedEmbedded;
 		}
 
-		public void setEmbContainedNonIndexedEmbedded(ContainedEntity embContainedNonIndexedEmbedded) {
-			this.embContainedNonIndexedEmbedded = embContainedNonIndexedEmbedded;
+		public void setContainedNonIndexedEmbedded(ContainedEntity containedNonIndexedEmbedded) {
+			this.containedNonIndexedEmbedded = containedNonIndexedEmbedded;
 		}
 
 		static final ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity> PRIMITIVES = new ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity>() {
@@ -430,15 +428,15 @@ public ContainingEmbeddable newInstance() {
 
 			@Override
 			public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedIndexedEmbedded() {
-				return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedIndexedEmbedded,
-						ContainingEmbeddable::getEmbContainedIndexedEmbedded
+				return PropertyAccessor.create( ContainingEmbeddable::setContainedIndexedEmbedded,
+						ContainingEmbeddable::getContainedIndexedEmbedded
 				);
 			}
 
 			@Override
 			public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedNonIndexedEmbedded() {
-				return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedNonIndexedEmbedded,
-						ContainingEmbeddable::getEmbContainedNonIndexedEmbedded
+				return PropertyAccessor.create( ContainingEmbeddable::setContainedNonIndexedEmbedded,
+						ContainingEmbeddable::getContainedNonIndexedEmbedded
 				);
 			}
 		};
@@ -801,28 +799,26 @@ public static class ContainedEmbeddable {
 
 		@OneToOne
 		@JoinColumn(name = "CEmbIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsIndexedEmbedded;
+		private ContainingEntity containingAsIndexedEmbedded;
 
 		@OneToOne
 		@JoinColumn(name = "CEmbNonIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsNonIndexedEmbedded;
+		private ContainingEntity containingAsNonIndexedEmbedded;
 
-		public ContainingEntity getEmbContainingAsIndexedEmbedded() {
-			return embContainingAsIndexedEmbedded;
+		public ContainingEntity getContainingAsIndexedEmbedded() {
+			return containingAsIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsIndexedEmbedded(ContainingEntity embContainingAsIndexedEmbedded) {
-			this.embContainingAsIndexedEmbedded = embContainingAsIndexedEmbedded;
+		public void setContainingAsIndexedEmbedded(ContainingEntity containingAsIndexedEmbedded) {
+			this.containingAsIndexedEmbedded = containingAsIndexedEmbedded;
 		}
 
-		public ContainingEntity getEmbContainingAsNonIndexedEmbedded() {
-			return embContainingAsNonIndexedEmbedded;
+		public ContainingEntity getContainingAsNonIndexedEmbedded() {
+			return containingAsNonIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsNonIndexedEmbedded(ContainingEntity embContainingAsNonIndexedEmbedded) {
-			this.embContainingAsNonIndexedEmbedded = embContainingAsNonIndexedEmbedded;
+		public void setContainingAsNonIndexedEmbedded(ContainingEntity containingAsNonIndexedEmbedded) {
+			this.containingAsNonIndexedEmbedded = containingAsNonIndexedEmbedded;
 		}
 
 		static ContainedEmbeddablePrimitives<ContainedEmbeddable, ContainingEntity> PRIMITIVES = new ContainedEmbeddablePrimitives<ContainedEmbeddable, ContainingEntity>() {
@@ -833,15 +829,15 @@ public ContainedEmbeddable newInstance() {
 
 			@Override
 			public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsIndexedEmbedded() {
-				return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsIndexedEmbedded,
-						ContainedEmbeddable::getEmbContainingAsIndexedEmbedded
+				return PropertyAccessor.create( ContainedEmbeddable::setContainingAsIndexedEmbedded,
+						ContainedEmbeddable::getContainingAsIndexedEmbedded
 				);
 			}
 
 			@Override
 			public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsNonIndexedEmbedded() {
-				return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsNonIndexedEmbedded,
-						ContainedEmbeddable::getEmbContainingAsNonIndexedEmbedded
+				return PropertyAccessor.create( ContainedEmbeddable::setContainingAsNonIndexedEmbedded,
+						ContainedEmbeddable::getContainingAsNonIndexedEmbedded
 				);
 			}
 		};
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedLazyOnContainedSideIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedLazyOnContainedSideIT.java
index ad22146e85..5a38ba48af 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedLazyOnContainedSideIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedLazyOnContainedSideIT.java
@@ -186,7 +186,7 @@ public static class ContainingEntity {
 		@JoinColumn(name = "CECAssocIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainingAsIndexedEmbedded")
+				@PropertyValue(propertyName = "containingAsIndexedEmbedded")
 		}))
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" })
 		private ContainedEntity containedElementCollectionAssociationsIndexedEmbedded;
@@ -199,7 +199,7 @@ public static class ContainingEntity {
 		@JoinColumn(name = "CECAssocNonIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainingAsNonIndexedEmbedded")
+				@PropertyValue(propertyName = "containingAsNonIndexedEmbedded")
 		}))
 		private ContainedEntity containedElementCollectionAssociationsNonIndexedEmbedded;
 
@@ -418,30 +418,28 @@ public PropertyAccessor<ContainingEntity, String> nonIndexedField() {
 
 	public static class ContainingEmbeddable {
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainingAsIndexedEmbedded")
+		@OneToOne(mappedBy = "embeddedAssociations.containingAsIndexedEmbedded")
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" },
 				name = "containedIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedIndexedEmbedded;
+		private ContainedEntity containedIndexedEmbedded;
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainingAsNonIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedNonIndexedEmbedded;
+		@OneToOne(mappedBy = "embeddedAssociations.containingAsNonIndexedEmbedded")
+		private ContainedEntity containedNonIndexedEmbedded;
 
-		public ContainedEntity getEmbContainedIndexedEmbedded() {
-			return embContainedIndexedEmbedded;
+		public ContainedEntity getContainedIndexedEmbedded() {
+			return containedIndexedEmbedded;
 		}
 
-		public void setEmbContainedIndexedEmbedded(ContainedEntity embContainedIndexedEmbedded) {
-			this.embContainedIndexedEmbedded = embContainedIndexedEmbedded;
+		public void setContainedIndexedEmbedded(ContainedEntity containedIndexedEmbedded) {
+			this.containedIndexedEmbedded = containedIndexedEmbedded;
 		}
 
-		public ContainedEntity getEmbContainedNonIndexedEmbedded() {
-			return embContainedNonIndexedEmbedded;
+		public ContainedEntity getContainedNonIndexedEmbedded() {
+			return containedNonIndexedEmbedded;
 		}
 
-		public void setEmbContainedNonIndexedEmbedded(ContainedEntity embContainedNonIndexedEmbedded) {
-			this.embContainedNonIndexedEmbedded = embContainedNonIndexedEmbedded;
+		public void setContainedNonIndexedEmbedded(ContainedEntity containedNonIndexedEmbedded) {
+			this.containedNonIndexedEmbedded = containedNonIndexedEmbedded;
 		}
 
 		static final ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity> PRIMITIVES = new ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity>() {
@@ -452,15 +450,15 @@ public ContainingEmbeddable newInstance() {
 
 			@Override
 			public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedIndexedEmbedded() {
-				return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedIndexedEmbedded,
-						ContainingEmbeddable::getEmbContainedIndexedEmbedded
+				return PropertyAccessor.create( ContainingEmbeddable::setContainedIndexedEmbedded,
+						ContainingEmbeddable::getContainedIndexedEmbedded
 				);
 			}
 
 			@Override
 			public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedNonIndexedEmbedded() {
-				return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedNonIndexedEmbedded,
-						ContainingEmbeddable::getEmbContainedNonIndexedEmbedded
+				return PropertyAccessor.create( ContainingEmbeddable::setContainedNonIndexedEmbedded,
+						ContainingEmbeddable::getContainedNonIndexedEmbedded
 				);
 			}
 		};
@@ -831,29 +829,27 @@ public static class ContainedEmbeddable {
 		@OneToOne(fetch = FetchType.LAZY)
 		@LazyGroup("embeddable_containingAsIndexedEmbedded")
 		@JoinColumn(name = "CEmbIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsIndexedEmbedded;
+		private ContainingEntity containingAsIndexedEmbedded;
 
 		@OneToOne(fetch = FetchType.LAZY)
 		@LazyGroup("embeddable_containingAsNonIndexedEmbedded")
 		@JoinColumn(name = "CEmbNonIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsNonIndexedEmbedded;
+		private ContainingEntity containingAsNonIndexedEmbedded;
 
-		public ContainingEntity getEmbContainingAsIndexedEmbedded() {
-			return embContainingAsIndexedEmbedded;
+		public ContainingEntity getContainingAsIndexedEmbedded() {
+			return containingAsIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsIndexedEmbedded(ContainingEntity embContainingAsIndexedEmbedded) {
-			this.embContainingAsIndexedEmbedded = embContainingAsIndexedEmbedded;
+		public void setContainingAsIndexedEmbedded(ContainingEntity containingAsIndexedEmbedded) {
+			this.containingAsIndexedEmbedded = containingAsIndexedEmbedded;
 		}
 
-		public ContainingEntity getEmbContainingAsNonIndexedEmbedded() {
-			return embContainingAsNonIndexedEmbedded;
+		public ContainingEntity getContainingAsNonIndexedEmbedded() {
+			return containingAsNonIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsNonIndexedEmbedded(ContainingEntity embContainingAsNonIndexedEmbedded) {
-			this.embContainingAsNonIndexedEmbedded = embContainingAsNonIndexedEmbedded;
+		public void setContainingAsNonIndexedEmbedded(ContainingEntity containingAsNonIndexedEmbedded) {
+			this.containingAsNonIndexedEmbedded = containingAsNonIndexedEmbedded;
 		}
 
 		static ContainedEmbeddablePrimitives<ContainedEmbeddable, ContainingEntity> PRIMITIVES = new ContainedEmbeddablePrimitives<ContainedEmbeddable, ContainingEntity>() {
@@ -864,15 +860,15 @@ public ContainedEmbeddable newInstance() {
 
 			@Override
 			public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsIndexedEmbedded() {
-				return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsIndexedEmbedded,
-						ContainedEmbeddable::getEmbContainingAsIndexedEmbedded
+				return PropertyAccessor.create( ContainedEmbeddable::setContainingAsIndexedEmbedded,
+						ContainedEmbeddable::getContainingAsIndexedEmbedded
 				);
 			}
 
 			@Override
 			public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsNonIndexedEmbedded() {
-				return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsNonIndexedEmbedded,
-						ContainedEmbeddable::getEmbContainingAsNonIndexedEmbedded
+				return PropertyAccessor.create( ContainedEmbeddable::setContainingAsNonIndexedEmbedded,
+						ContainedEmbeddable::getContainingAsNonIndexedEmbedded
 				);
 			}
 		};
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedLazyOnContainingSideIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedLazyOnContainingSideIT.java
index 0072a98b46..0aba4e4b98 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedLazyOnContainingSideIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontained/AutomaticIndexingOneToOneOwnedByContainedLazyOnContainingSideIT.java
@@ -193,7 +193,7 @@ public static class ContainingEntity {
 		@JoinColumn(name = "CECAssocIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainingAsIndexedEmbedded")
+				@PropertyValue(propertyName = "containingAsIndexedEmbedded")
 		}))
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" })
 		private ContainedEntity containedElementCollectionAssociationsIndexedEmbedded;
@@ -207,7 +207,7 @@ public static class ContainingEntity {
 		@JoinColumn(name = "CECAssocNonIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainingAsNonIndexedEmbedded")
+				@PropertyValue(propertyName = "containingAsNonIndexedEmbedded")
 		}))
 		private ContainedEntity containedElementCollectionAssociationsNonIndexedEmbedded;
 
@@ -426,32 +426,30 @@ public PropertyAccessor<ContainingEntity, String> nonIndexedField() {
 
 	public static class ContainingEmbeddable {
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainingAsIndexedEmbedded", fetch = FetchType.LAZY)
+		@OneToOne(mappedBy = "embeddedAssociations.containingAsIndexedEmbedded", fetch = FetchType.LAZY)
 		@LazyGroup("embeddable_containedIndexedEmbedded")
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" },
 				name = "containedIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedIndexedEmbedded;
+		private ContainedEntity containedIndexedEmbedded;
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainingAsNonIndexedEmbedded", fetch = FetchType.LAZY)
+		@OneToOne(mappedBy = "embeddedAssociations.containingAsNonIndexedEmbedded", fetch = FetchType.LAZY)
 		@LazyGroup("embeddable_containedNonIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedNonIndexedEmbedded;
+		private ContainedEntity containedNonIndexedEmbedded;
 
-		public ContainedEntity getEmbContainedIndexedEmbedded() {
-			return embContainedIndexedEmbedded;
+		public ContainedEntity getContainedIndexedEmbedded() {
+			return containedIndexedEmbedded;
 		}
 
-		public void setEmbContainedIndexedEmbedded(ContainedEntity embContainedIndexedEmbedded) {
-			this.embContainedIndexedEmbedded = embContainedIndexedEmbedded;
+		public void setContainedIndexedEmbedded(ContainedEntity containedIndexedEmbedded) {
+			this.containedIndexedEmbedded = containedIndexedEmbedded;
 		}
 
-		public ContainedEntity getEmbContainedNonIndexedEmbedded() {
-			return embContainedNonIndexedEmbedded;
+		public ContainedEntity getContainedNonIndexedEmbedded() {
+			return containedNonIndexedEmbedded;
 		}
 
-		public void setEmbContainedNonIndexedEmbedded(ContainedEntity embContainedNonIndexedEmbedded) {
-			this.embContainedNonIndexedEmbedded = embContainedNonIndexedEmbedded;
+		public void setContainedNonIndexedEmbedded(ContainedEntity containedNonIndexedEmbedded) {
+			this.containedNonIndexedEmbedded = containedNonIndexedEmbedded;
 		}
 
 		static final ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity> PRIMITIVES = new ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity>() {
@@ -462,15 +460,15 @@ public ContainingEmbeddable newInstance() {
 
 			@Override
 			public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedIndexedEmbedded() {
-				return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedIndexedEmbedded,
-						ContainingEmbeddable::getEmbContainedIndexedEmbedded
+				return PropertyAccessor.create( ContainingEmbeddable::setContainedIndexedEmbedded,
+						ContainingEmbeddable::getContainedIndexedEmbedded
 				);
 			}
 
 			@Override
 			public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedNonIndexedEmbedded() {
-				return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedNonIndexedEmbedded,
-						ContainingEmbeddable::getEmbContainedNonIndexedEmbedded
+				return PropertyAccessor.create( ContainingEmbeddable::setContainedNonIndexedEmbedded,
+						ContainingEmbeddable::getContainedNonIndexedEmbedded
 				);
 			}
 		};
@@ -833,28 +831,26 @@ public static class ContainedEmbeddable {
 
 		@OneToOne
 		@JoinColumn(name = "CEmbIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsIndexedEmbedded;
+		private ContainingEntity containingAsIndexedEmbedded;
 
 		@OneToOne
 		@JoinColumn(name = "CEmbNonIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsNonIndexedEmbedded;
+		private ContainingEntity containingAsNonIndexedEmbedded;
 
-		public ContainingEntity getEmbContainingAsIndexedEmbedded() {
-			return embContainingAsIndexedEmbedded;
+		public ContainingEntity getContainingAsIndexedEmbedded() {
+			return containingAsIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsIndexedEmbedded(ContainingEntity embContainingAsIndexedEmbedded) {
-			this.embContainingAsIndexedEmbedded = embContainingAsIndexedEmbedded;
+		public void setContainingAsIndexedEmbedded(ContainingEntity containingAsIndexedEmbedded) {
+			this.containingAsIndexedEmbedded = containingAsIndexedEmbedded;
 		}
 
-		public ContainingEntity getEmbContainingAsNonIndexedEmbedded() {
-			return embContainingAsNonIndexedEmbedded;
+		public ContainingEntity getContainingAsNonIndexedEmbedded() {
+			return containingAsNonIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsNonIndexedEmbedded(ContainingEntity embContainingAsNonIndexedEmbedded) {
-			this.embContainingAsNonIndexedEmbedded = embContainingAsNonIndexedEmbedded;
+		public void setContainingAsNonIndexedEmbedded(ContainingEntity containingAsNonIndexedEmbedded) {
+			this.containingAsNonIndexedEmbedded = containingAsNonIndexedEmbedded;
 		}
 
 		static ContainedEmbeddablePrimitives<ContainedEmbeddable, ContainingEntity> PRIMITIVES = new ContainedEmbeddablePrimitives<ContainedEmbeddable, ContainingEntity>() {
@@ -865,15 +861,15 @@ public ContainedEmbeddable newInstance() {
 
 			@Override
 			public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsIndexedEmbedded() {
-				return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsIndexedEmbedded,
-						ContainedEmbeddable::getEmbContainingAsIndexedEmbedded
+				return PropertyAccessor.create( ContainedEmbeddable::setContainingAsIndexedEmbedded,
+						ContainedEmbeddable::getContainingAsIndexedEmbedded
 				);
 			}
 
 			@Override
 			public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsNonIndexedEmbedded() {
-				return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsNonIndexedEmbedded,
-						ContainedEmbeddable::getEmbContainingAsNonIndexedEmbedded
+				return PropertyAccessor.create( ContainedEmbeddable::setContainingAsNonIndexedEmbedded,
+						ContainedEmbeddable::getContainingAsNonIndexedEmbedded
 				);
 			}
 		};
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingEagerOnBothSidesIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingEagerOnBothSidesIT.java
index 456d1c55a0..fe0836d686 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingEagerOnBothSidesIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingEagerOnBothSidesIT.java
@@ -362,28 +362,26 @@ public static class ContainingEmbeddable {
 		@JoinColumn(name = "CEmbIdxEmbedded")
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" },
 				name = "containedIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedIndexedEmbedded;
+		private ContainedEntity containedIndexedEmbedded;
 
 		@OneToOne
 		@JoinColumn(name = "CEmbNonIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedNonIndexedEmbedded;
+		private ContainedEntity containedNonIndexedEmbedded;
 
-		public ContainedEntity getEmbContainedIndexedEmbedded() {
-			return embContainedIndexedEmbedded;
+		public ContainedEntity getContainedIndexedEmbedded() {
+			return containedIndexedEmbedded;
 		}
 
-		public void setEmbContainedIndexedEmbedded(ContainedEntity embContainedIndexedEmbedded) {
-			this.embContainedIndexedEmbedded = embContainedIndexedEmbedded;
+		public void setContainedIndexedEmbedded(ContainedEntity containedIndexedEmbedded) {
+			this.containedIndexedEmbedded = containedIndexedEmbedded;
 		}
 
-		public ContainedEntity getEmbContainedNonIndexedEmbedded() {
-			return embContainedNonIndexedEmbedded;
+		public ContainedEntity getContainedNonIndexedEmbedded() {
+			return containedNonIndexedEmbedded;
 		}
 
-		public void setEmbContainedNonIndexedEmbedded(ContainedEntity embContainedNonIndexedEmbedded) {
-			this.embContainedNonIndexedEmbedded = embContainedNonIndexedEmbedded;
+		public void setContainedNonIndexedEmbedded(ContainedEntity containedNonIndexedEmbedded) {
+			this.containedNonIndexedEmbedded = containedNonIndexedEmbedded;
 		}
 
 		static final ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity> PRIMITIVES = new ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity>() {
@@ -394,15 +392,15 @@ public ContainingEmbeddable newInstance() {
 
 			@Override
 			public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedIndexedEmbedded() {
-				return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedIndexedEmbedded,
-						ContainingEmbeddable::getEmbContainedIndexedEmbedded
+				return PropertyAccessor.create( ContainingEmbeddable::setContainedIndexedEmbedded,
+						ContainingEmbeddable::getContainedIndexedEmbedded
 				);
 			}
 
 			@Override
 			public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedNonIndexedEmbedded() {
-				return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedNonIndexedEmbedded,
-						ContainingEmbeddable::getEmbContainedNonIndexedEmbedded
+				return PropertyAccessor.create( ContainingEmbeddable::setContainedNonIndexedEmbedded,
+						ContainingEmbeddable::getContainedNonIndexedEmbedded
 				);
 			}
 		};
@@ -471,7 +469,7 @@ public static class ContainedEntity {
 		@JoinColumn(name = "CECAssocIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainedIndexedEmbedded")
+				@PropertyValue(propertyName = "containedIndexedEmbedded")
 		}))
 		private ContainingEntity containingAsElementCollectionAssociationsIndexedEmbedded;
 
@@ -483,7 +481,7 @@ public static class ContainedEntity {
 		@JoinColumn(name = "CECAssocNonIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainedNonIndexedEmbedded")
+				@PropertyValue(propertyName = "containedNonIndexedEmbedded")
 		}))
 		private ContainingEntity containingAsElementCollectionAssociationsNonIndexedEmbedded;
 
@@ -798,28 +796,26 @@ public PropertyAccessor<ContainedEntity, String> fieldUsedInCrossEntityDerivedFi
 
 	public static class ContainedEmbeddable {
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainedIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsIndexedEmbedded;
+		@OneToOne(mappedBy = "embeddedAssociations.containedIndexedEmbedded")
+		private ContainingEntity containingAsIndexedEmbedded;
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainedNonIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsNonIndexedEmbedded;
+		@OneToOne(mappedBy = "embeddedAssociations.containedNonIndexedEmbedded")
+		private ContainingEntity containingAsNonIndexedEmbedded;
 
-		public ContainingEntity getEmbContainingAsIndexedEmbedded() {
-			return embContainingAsIndexedEmbedded;
+		public ContainingEntity getContainingAsIndexedEmbedded() {
+			return containingAsIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsIndexedEmbedded(ContainingEntity embContainingAsIndexedEmbedded) {
-			this.embContainingAsIndexedEmbedded = embContainingAsIndexedEmbedded;
+		public void setContainingAsIndexedEmbedded(ContainingEntity containingAsIndexedEmbedded) {
+			this.containingAsIndexedEmbedded = containingAsIndexedEmbedded;
 		}
 
-		public ContainingEntity getEmbContainingAsNonIndexedEmbedded() {
-			return embContainingAsNonIndexedEmbedded;
+		public ContainingEntity getContainingAsNonIndexedEmbedded() {
+			return containingAsNonIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsNonIndexedEmbedded(ContainingEntity embContainingAsNonIndexedEmbedded) {
-			this.embContainingAsNonIndexedEmbedded = embContainingAsNonIndexedEmbedded;
+		public void setContainingAsNonIndexedEmbedded(ContainingEntity containingAsNonIndexedEmbedded) {
+			this.containingAsNonIndexedEmbedded = containingAsNonIndexedEmbedded;
 		}
 
 		static ContainedEmbeddablePrimitives<ContainedEmbeddable, ContainingEntity> PRIMITIVES = new ContainedEmbeddablePrimitives<ContainedEmbeddable, ContainingEntity>() {
@@ -830,15 +826,15 @@ public ContainedEmbeddable newInstance() {
 
 			@Override
 			public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsIndexedEmbedded() {
-				return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsIndexedEmbedded,
-						ContainedEmbeddable::getEmbContainingAsIndexedEmbedded
+				return PropertyAccessor.create( ContainedEmbeddable::setContainingAsIndexedEmbedded,
+						ContainedEmbeddable::getContainingAsIndexedEmbedded
 				);
 			}
 
 			@Override
 			public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsNonIndexedEmbedded() {
-				return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsIndexedEmbedded,
-						ContainedEmbeddable::getEmbContainingAsIndexedEmbedded
+				return PropertyAccessor.create( ContainedEmbeddable::setContainingAsIndexedEmbedded,
+						ContainedEmbeddable::getContainingAsIndexedEmbedded
 				);
 			}
 		};
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingLazyOnContainedSideIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingLazyOnContainedSideIT.java
index c623f1fe72..fa56b8f76b 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingLazyOnContainedSideIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingLazyOnContainedSideIT.java
@@ -384,28 +384,26 @@ public static class ContainingEmbeddable {
 		@JoinColumn(name = "CEmbIdxEmbedded")
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" },
 				name = "containedIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedIndexedEmbedded;
+		private ContainedEntity containedIndexedEmbedded;
 
 		@OneToOne
 		@JoinColumn(name = "CEmbNonIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedNonIndexedEmbedded;
+		private ContainedEntity containedNonIndexedEmbedded;
 
-		public ContainedEntity getEmbContainedIndexedEmbedded() {
-			return embContainedIndexedEmbedded;
+		public ContainedEntity getContainedIndexedEmbedded() {
+			return containedIndexedEmbedded;
 		}
 
-		public void setEmbContainedIndexedEmbedded(ContainedEntity embContainedIndexedEmbedded) {
-			this.embContainedIndexedEmbedded = embContainedIndexedEmbedded;
+		public void setContainedIndexedEmbedded(ContainedEntity containedIndexedEmbedded) {
+			this.containedIndexedEmbedded = containedIndexedEmbedded;
 		}
 
-		public ContainedEntity getEmbContainedNonIndexedEmbedded() {
-			return embContainedNonIndexedEmbedded;
+		public ContainedEntity getContainedNonIndexedEmbedded() {
+			return containedNonIndexedEmbedded;
 		}
 
-		public void setEmbContainedNonIndexedEmbedded(ContainedEntity embContainedNonIndexedEmbedded) {
-			this.embContainedNonIndexedEmbedded = embContainedNonIndexedEmbedded;
+		public void setContainedNonIndexedEmbedded(ContainedEntity containedNonIndexedEmbedded) {
+			this.containedNonIndexedEmbedded = containedNonIndexedEmbedded;
 		}
 
 		static final ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity> PRIMITIVES = new ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity>() {
@@ -416,15 +414,15 @@ public ContainingEmbeddable newInstance() {
 
 			@Override
 			public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedIndexedEmbedded() {
-				return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedIndexedEmbedded,
-						ContainingEmbeddable::getEmbContainedIndexedEmbedded
+				return PropertyAccessor.create( ContainingEmbeddable::setContainedIndexedEmbedded,
+						ContainingEmbeddable::getContainedIndexedEmbedded
 				);
 			}
 
 			@Override
 			public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedNonIndexedEmbedded() {
-				return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedNonIndexedEmbedded,
-						ContainingEmbeddable::getEmbContainedNonIndexedEmbedded
+				return PropertyAccessor.create( ContainingEmbeddable::setContainedNonIndexedEmbedded,
+						ContainingEmbeddable::getContainedNonIndexedEmbedded
 				);
 			}
 		};
@@ -500,7 +498,7 @@ public static class ContainedEntity {
 		@JoinColumn(name = "CECAssocIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainedIndexedEmbedded")
+				@PropertyValue(propertyName = "containedIndexedEmbedded")
 		}))
 		private ContainingEntity containingAsElementCollectionAssociationsIndexedEmbedded;
 
@@ -513,7 +511,7 @@ public static class ContainedEntity {
 		@JoinColumn(name = "CECAssocNonIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainedNonIndexedEmbedded")
+				@PropertyValue(propertyName = "containedNonIndexedEmbedded")
 		}))
 		private ContainingEntity containingAsElementCollectionAssociationsNonIndexedEmbedded;
 
@@ -828,30 +826,28 @@ public PropertyAccessor<ContainedEntity, String> fieldUsedInCrossEntityDerivedFi
 
 	public static class ContainedEmbeddable {
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainedIndexedEmbedded", fetch = FetchType.LAZY)
+		@OneToOne(mappedBy = "embeddedAssociations.containedIndexedEmbedded", fetch = FetchType.LAZY)
 		@LazyGroup("embeddable_containingAsIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsIndexedEmbedded;
+		private ContainingEntity containingAsIndexedEmbedded;
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainedNonIndexedEmbedded", fetch = FetchType.LAZY)
+		@OneToOne(mappedBy = "embeddedAssociations.containedNonIndexedEmbedded", fetch = FetchType.LAZY)
 		@LazyGroup("embeddable_containingAsNonIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsNonIndexedEmbedded;
+		private ContainingEntity containingAsNonIndexedEmbedded;
 
-		public ContainingEntity getEmbContainingAsIndexedEmbedded() {
-			return embContainingAsIndexedEmbedded;
+		public ContainingEntity getContainingAsIndexedEmbedded() {
+			return containingAsIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsIndexedEmbedded(ContainingEntity embContainingAsIndexedEmbedded) {
-			this.embContainingAsIndexedEmbedded = embContainingAsIndexedEmbedded;
+		public void setContainingAsIndexedEmbedded(ContainingEntity containingAsIndexedEmbedded) {
+			this.containingAsIndexedEmbedded = containingAsIndexedEmbedded;
 		}
 
-		public ContainingEntity getEmbContainingAsNonIndexedEmbedded() {
-			return embContainingAsNonIndexedEmbedded;
+		public ContainingEntity getContainingAsNonIndexedEmbedded() {
+			return containingAsNonIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsNonIndexedEmbedded(ContainingEntity embContainingAsNonIndexedEmbedded) {
-			this.embContainingAsNonIndexedEmbedded = embContainingAsNonIndexedEmbedded;
+		public void setContainingAsNonIndexedEmbedded(ContainingEntity containingAsNonIndexedEmbedded) {
+			this.containingAsNonIndexedEmbedded = containingAsNonIndexedEmbedded;
 		}
 
 		static ContainedEmbeddablePrimitives<ContainedEmbeddable, ContainingEntity> PRIMITIVES = new ContainedEmbeddablePrimitives<ContainedEmbeddable, ContainingEntity>() {
@@ -862,15 +858,15 @@ public ContainedEmbeddable newInstance() {
 
 			@Override
 			public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsIndexedEmbedded() {
-				return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsIndexedEmbedded,
-						ContainedEmbeddable::getEmbContainingAsIndexedEmbedded
+				return PropertyAccessor.create( ContainedEmbeddable::setContainingAsIndexedEmbedded,
+						ContainedEmbeddable::getContainingAsIndexedEmbedded
 				);
 			}
 
 			@Override
 			public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsNonIndexedEmbedded() {
-				return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsIndexedEmbedded,
-						ContainedEmbeddable::getEmbContainingAsIndexedEmbedded
+				return PropertyAccessor.create( ContainedEmbeddable::setContainingAsIndexedEmbedded,
+						ContainedEmbeddable::getContainingAsIndexedEmbedded
 				);
 			}
 		};
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingLazyOnContainingSideIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingLazyOnContainingSideIT.java
index ed9559cbbc..85faae7030 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingLazyOnContainingSideIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/onetoone/ownedbycontaining/AutomaticIndexingOneToOneOwnedByContainingLazyOnContainingSideIT.java
@@ -392,29 +392,27 @@ public static class ContainingEmbeddable {
 		@JoinColumn(name = "CEmbIdxEmbedded")
 		@IndexedEmbedded(includePaths = { "indexedField", "indexedElementCollectionField", "containedDerivedField" },
 				name = "containedIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedIndexedEmbedded;
+		private ContainedEntity containedIndexedEmbedded;
 
 		@OneToOne(fetch = FetchType.LAZY)
 		@LazyGroup("embeddable_containedNonIndexedEmbedded")
 		@JoinColumn(name = "CEmbNonIdxEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainedEntity embContainedNonIndexedEmbedded;
+		private ContainedEntity containedNonIndexedEmbedded;
 
-		public ContainedEntity getEmbContainedIndexedEmbedded() {
-			return embContainedIndexedEmbedded;
+		public ContainedEntity getContainedIndexedEmbedded() {
+			return containedIndexedEmbedded;
 		}
 
-		public void setEmbContainedIndexedEmbedded(ContainedEntity embContainedIndexedEmbedded) {
-			this.embContainedIndexedEmbedded = embContainedIndexedEmbedded;
+		public void setContainedIndexedEmbedded(ContainedEntity containedIndexedEmbedded) {
+			this.containedIndexedEmbedded = containedIndexedEmbedded;
 		}
 
-		public ContainedEntity getEmbContainedNonIndexedEmbedded() {
-			return embContainedNonIndexedEmbedded;
+		public ContainedEntity getContainedNonIndexedEmbedded() {
+			return containedNonIndexedEmbedded;
 		}
 
-		public void setEmbContainedNonIndexedEmbedded(ContainedEntity embContainedNonIndexedEmbedded) {
-			this.embContainedNonIndexedEmbedded = embContainedNonIndexedEmbedded;
+		public void setContainedNonIndexedEmbedded(ContainedEntity containedNonIndexedEmbedded) {
+			this.containedNonIndexedEmbedded = containedNonIndexedEmbedded;
 		}
 
 		static final ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity> PRIMITIVES = new ContainingEmbeddablePrimitives<ContainingEmbeddable, ContainedEntity>() {
@@ -425,15 +423,15 @@ public ContainingEmbeddable newInstance() {
 
 			@Override
 			public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedIndexedEmbedded() {
-				return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedIndexedEmbedded,
-						ContainingEmbeddable::getEmbContainedIndexedEmbedded
+				return PropertyAccessor.create( ContainingEmbeddable::setContainedIndexedEmbedded,
+						ContainingEmbeddable::getContainedIndexedEmbedded
 				);
 			}
 
 			@Override
 			public PropertyAccessor<ContainingEmbeddable, ContainedEntity> containedNonIndexedEmbedded() {
-				return PropertyAccessor.create( ContainingEmbeddable::setEmbContainedNonIndexedEmbedded,
-						ContainingEmbeddable::getEmbContainedNonIndexedEmbedded
+				return PropertyAccessor.create( ContainingEmbeddable::setContainedNonIndexedEmbedded,
+						ContainingEmbeddable::getContainedNonIndexedEmbedded
 				);
 			}
 		};
@@ -502,7 +500,7 @@ public static class ContainedEntity {
 		@JoinColumn(name = "CECAssocIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainedIndexedEmbedded")
+				@PropertyValue(propertyName = "containedIndexedEmbedded")
 		}))
 		private ContainingEntity containingAsElementCollectionAssociationsIndexedEmbedded;
 
@@ -514,7 +512,7 @@ public static class ContainedEntity {
 		@JoinColumn(name = "CECAssocNonIdxEmb")
 		@AssociationInverseSide(inversePath = @ObjectPath({
 				@PropertyValue(propertyName = "elementCollectionAssociations"),
-				@PropertyValue(propertyName = "embContainedNonIndexedEmbedded")
+				@PropertyValue(propertyName = "containedNonIndexedEmbedded")
 		}))
 		private ContainingEntity containingAsElementCollectionAssociationsNonIndexedEmbedded;
 
@@ -829,28 +827,26 @@ public PropertyAccessor<ContainedEntity, String> fieldUsedInCrossEntityDerivedFi
 
 	public static class ContainedEmbeddable {
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainedIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsIndexedEmbedded;
+		@OneToOne(mappedBy = "embeddedAssociations.containedIndexedEmbedded")
+		private ContainingEntity containingAsIndexedEmbedded;
 
-		@OneToOne(mappedBy = "embeddedAssociations.embContainedNonIndexedEmbedded")
-		// TODO Remove the "emb" prefix from this field when HHH-15604 gets fixed (it's just a workaround)
-		private ContainingEntity embContainingAsNonIndexedEmbedded;
+		@OneToOne(mappedBy = "embeddedAssociations.containedNonIndexedEmbedded")
+		private ContainingEntity containingAsNonIndexedEmbedded;
 
-		public ContainingEntity getEmbContainingAsIndexedEmbedded() {
-			return embContainingAsIndexedEmbedded;
+		public ContainingEntity getContainingAsIndexedEmbedded() {
+			return containingAsIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsIndexedEmbedded(ContainingEntity embContainingAsIndexedEmbedded) {
-			this.embContainingAsIndexedEmbedded = embContainingAsIndexedEmbedded;
+		public void setContainingAsIndexedEmbedded(ContainingEntity containingAsIndexedEmbedded) {
+			this.containingAsIndexedEmbedded = containingAsIndexedEmbedded;
 		}
 
-		public ContainingEntity getEmbContainingAsNonIndexedEmbedded() {
-			return embContainingAsNonIndexedEmbedded;
+		public ContainingEntity getContainingAsNonIndexedEmbedded() {
+			return containingAsNonIndexedEmbedded;
 		}
 
-		public void setEmbContainingAsNonIndexedEmbedded(ContainingEntity embContainingAsNonIndexedEmbedded) {
-			this.embContainingAsNonIndexedEmbedded = embContainingAsNonIndexedEmbedded;
+		public void setContainingAsNonIndexedEmbedded(ContainingEntity containingAsNonIndexedEmbedded) {
+			this.containingAsNonIndexedEmbedded = containingAsNonIndexedEmbedded;
 		}
 
 		static ContainedEmbeddablePrimitives<ContainedEmbeddable, ContainingEntity> PRIMITIVES = new ContainedEmbeddablePrimitives<ContainedEmbeddable, ContainingEntity>() {
@@ -861,15 +857,15 @@ public ContainedEmbeddable newInstance() {
 
 			@Override
 			public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsIndexedEmbedded() {
-				return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsIndexedEmbedded,
-						ContainedEmbeddable::getEmbContainingAsIndexedEmbedded
+				return PropertyAccessor.create( ContainedEmbeddable::setContainingAsIndexedEmbedded,
+						ContainedEmbeddable::getContainingAsIndexedEmbedded
 				);
 			}
 
 			@Override
 			public PropertyAccessor<ContainedEmbeddable, ContainingEntity> containingAsNonIndexedEmbedded() {
-				return PropertyAccessor.create( ContainedEmbeddable::setEmbContainingAsIndexedEmbedded,
-						ContainedEmbeddable::getEmbContainingAsIndexedEmbedded
+				return PropertyAccessor.create( ContainedEmbeddable::setContainingAsIndexedEmbedded,
+						ContainedEmbeddable::getContainingAsIndexedEmbedded
 				);
 			}
 		};
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/proxy/ContainedInTriggerUnnecessaryCollectionInitializationIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/proxy/ContainedInTriggerUnnecessaryCollectionInitializationIT.java
index 902615812e..9723769194 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/proxy/ContainedInTriggerUnnecessaryCollectionInitializationIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/proxy/ContainedInTriggerUnnecessaryCollectionInitializationIT.java
@@ -20,8 +20,6 @@
 
 import org.hibernate.Hibernate;
 import org.hibernate.SessionFactory;
-import org.hibernate.annotations.LazyCollection;
-import org.hibernate.annotations.LazyCollectionOption;
 import org.hibernate.collection.spi.PersistentCollection;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
@@ -138,7 +136,8 @@ public static class Group {
 		private int someInteger;
 
 		@OneToMany(mappedBy = "group")
-		@LazyCollection(LazyCollectionOption.EXTRA)
+		@SuppressWarnings("deprecation")
+		@org.hibernate.annotations.LazyCollection(org.hibernate.annotations.LazyCollectionOption.EXTRA)
 		private Set<Post> posts = new HashSet<>();
 
 		public Integer getId() {
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/session/FlushClearEvictAllIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/session/FlushClearEvictAllIT.java
index 767464177c..6f480f1d5e 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/session/FlushClearEvictAllIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/session/FlushClearEvictAllIT.java
@@ -25,8 +25,6 @@
 import jakarta.persistence.OrderColumn;
 import jakarta.persistence.Table;
 
-import org.hibernate.annotations.LazyCollection;
-import org.hibernate.annotations.LazyCollectionOption;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 import org.hibernate.search.util.impl.integrationtest.common.rule.BackendMock;
@@ -130,7 +128,8 @@ public static class Post {
 		private String name;
 
 		@OneToMany(mappedBy = "post", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
-		@LazyCollection(LazyCollectionOption.EXTRA)
+		@SuppressWarnings("deprecation")
+		@org.hibernate.annotations.LazyCollection(org.hibernate.annotations.LazyCollectionOption.EXTRA)
 		@OrderColumn(name = "idx")
 		private List<Comment> comments = new ArrayList<>();
 
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/dynamicmap/DynamicMapBaseIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/dynamicmap/DynamicMapBaseIT.java
index 7d1a6e73fb..6df49ccec6 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/dynamicmap/DynamicMapBaseIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/dynamicmap/DynamicMapBaseIT.java
@@ -127,7 +127,7 @@ public void simple() {
 			);
 
 			assertThat( query.fetchAllHits() ).containsExactly(
-					(Map) session.load( entityTypeName, 1 )
+					(Map) session.getReference( entityTypeName, 1 )
 			);
 		} );
 	}
@@ -212,7 +212,7 @@ public void searchObject() {
 			);
 
 			assertThat( query.fetchAllHits() ).containsExactly(
-					session.load( entityTypeName, 1 )
+					session.getReference( entityTypeName, 1 )
 			);
 		} );
 	}
@@ -331,7 +331,7 @@ public void nonEntityIdDocumentId() {
 			);
 
 			assertThat( query.fetchAllHits() ).containsExactly(
-					session.load( entityTypeName, 1 )
+					session.getReference( entityTypeName, 1 )
 			);
 		} );
 	}
@@ -418,8 +418,8 @@ public void inheritance() {
 			);
 
 			assertThat( query.fetchAllHits() ).containsExactly(
-					(Map) session.load( entityA_BTypeName, 1 ),
-					(Map) session.load( entityA_CTypeName, 2 )
+					(Map) session.getReference( entityA_BTypeName, 1 ),
+					(Map) session.getReference( entityA_CTypeName, 2 )
 			);
 		} );
 	}
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/hibernateormapis/ToHibernateOrmScrollableResultsIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/hibernateormapis/ToHibernateOrmScrollableResultsIT.java
index e556ccaf66..3cea4cab56 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/hibernateormapis/ToHibernateOrmScrollableResultsIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/hibernateormapis/ToHibernateOrmScrollableResultsIT.java
@@ -85,13 +85,13 @@ public void initData() {
 	public void next() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
+				assertThat( scroll.get() ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				for ( int i = 0; i < ENTITY_COUNT; i++ ) {
@@ -102,18 +102,14 @@ public void next() {
 					assertThat( scroll.getRowNumber() ).isEqualTo( i );
 					assertThat( scroll.isFirst() ).isEqualTo( i == 0 );
 					assertThat( scroll.isLast() ).isEqualTo( i == ( ENTITY_COUNT - 1 ) );
-					assertThat( scroll.get( 0 ) )
+					assertThat( scroll.get() )
 							.isEqualTo( session.getReference( IndexedEntity.class, i ) );
-					Object[] row = scroll.get();
-					assertThat( row ).hasSize( 1 );
-					assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, i ) );
 				}
 
 				assertThat( scroll.next() ).isFalse();
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				// Call next() again after reaching the end: should not do anything
@@ -122,7 +118,6 @@ public void next() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				expectScrollClose();
@@ -134,13 +129,12 @@ public void next() {
 	public void previous() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				// Going to the previous element means going backwards: it's forbidden
@@ -154,7 +148,6 @@ public void previous() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -165,7 +158,7 @@ public void previous() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 0 );
 				assertThat( scroll.isFirst() ).isTrue();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 0 ) );
 
 				// Going to the previous element means going backwards: it's forbidden
@@ -179,7 +172,7 @@ public void previous() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 0 );
 				assertThat( scroll.isFirst() ).isTrue();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 0 ) );
 
 				expectScrollClose();
@@ -191,13 +184,13 @@ public void previous() {
 	public void scrollMode_forwardsOnly() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll( ScrollMode.FORWARD_ONLY ) ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll( ScrollMode.FORWARD_ONLY ) ) {
 				backendMock.verifyExpectationsMet();
 				for ( int i = 0; i < ENTITY_COUNT; i++ ) {
 					expectScrollNextIfNecessary( i, DEFAULT_FETCH_SIZE, ENTITY_COUNT );
 					assertThat( scroll.next() ).isTrue();
 					backendMock.verifyExpectationsMet();
-					assertThat( scroll.get( 0 ) )
+					assertThat( scroll.get() )
 							.isEqualTo( session.getReference( IndexedEntity.class, i ) );
 				}
 
@@ -230,7 +223,7 @@ public void fetchSize() {
 			int customFetchSize = 10;
 			backendMock.expectScrollObjects( Collections.singletonList( IndexedEntity.NAME ),
 					customFetchSize, b -> { } );
-			try ( ScrollableResults scroll = Search.toOrmQuery( Search.session( session )
+			try ( ScrollableResults<?> scroll = Search.toOrmQuery( Search.session( session )
 					.search( IndexedEntity.class )
 					.where( f -> f.matchAll() )
 					.loading( o -> o.fetchSize( customFetchSize ) )
@@ -241,7 +234,6 @@ public void fetchSize() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				for ( int i = 0; i < ENTITY_COUNT; i++ ) {
@@ -252,18 +244,14 @@ public void fetchSize() {
 					assertThat( scroll.getRowNumber() ).isEqualTo( i );
 					assertThat( scroll.isFirst() ).isEqualTo( i == 0 );
 					assertThat( scroll.isLast() ).isEqualTo( i == ( ENTITY_COUNT - 1 ) );
-					assertThat( scroll.get( 0 ) )
+					assertThat( scroll.get() )
 							.isEqualTo( session.getReference( IndexedEntity.class, i ) );
-					Object[] row = scroll.get();
-					assertThat( row ).hasSize( 1 );
-					assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, i ) );
 				}
 
 				assertThat( scroll.next() ).isFalse();
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				expectScrollClose();
@@ -281,13 +269,12 @@ public void maxResults() {
 					.toQuery() );
 			query.setMaxResults( maxResults );
 			expectScrollCreate();
-			try ( ScrollableResults scroll = query.scroll() ) {
+			try ( ScrollableResults<?> scroll = query.scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				for ( int i = 0; i < maxResults; i++ ) {
@@ -298,18 +285,14 @@ public void maxResults() {
 					assertThat( scroll.getRowNumber() ).isEqualTo( i );
 					assertThat( scroll.isFirst() ).isEqualTo( i == 0 );
 					assertThat( scroll.isLast() ).isEqualTo( i == ( maxResults - 1 ) );
-					assertThat( scroll.get( 0 ) )
+					assertThat( scroll.get() )
 							.isEqualTo( session.getReference( IndexedEntity.class, i ) );
-					Object[] row = scroll.get();
-					assertThat( row ).hasSize( 1 );
-					assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, i ) );
 				}
 
 				assertThat( scroll.next() ).isFalse();
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				expectScrollClose();
@@ -321,13 +304,12 @@ public void maxResults() {
 	public void scroll() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -338,11 +320,8 @@ public void scroll() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 9 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 9 ) );
-				Object[] row = scroll.get();
-				assertThat( row ).hasSize( 1 );
-				assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, 9 ) );
 
 				// Scroll 0 positions: should not do anything
 				assertThat( scroll.scroll( 0 ) ).isTrue();
@@ -351,11 +330,8 @@ public void scroll() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 9 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 9 ) );
-				row = scroll.get();
-				assertThat( row ).hasSize( 1 );
-				assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, 9 ) );
 
 				// No call to the underlying scroll.next() is expected here
 				assertThat( scroll.scroll( 50 ) ).isTrue();
@@ -364,11 +340,8 @@ public void scroll() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 59 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 59 ) );
-				row = scroll.get();
-				assertThat( row ).hasSize( 1 );
-				assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, 59 ) );
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
 						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
@@ -382,11 +355,8 @@ public void scroll() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 259 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 259 ) );
-				row = scroll.get();
-				assertThat( row ).hasSize( 1 );
-				assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, 259 ) );
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
 						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
@@ -417,7 +387,6 @@ public void scroll() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				// Calling scroll(<positive number>) again after reaching the end should not do anything
@@ -426,7 +395,6 @@ public void scroll() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				assertThat( scroll.scroll( 1 ) ).isFalse();
@@ -434,7 +402,6 @@ public void scroll() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				expectScrollClose();
@@ -446,13 +413,12 @@ public void scroll() {
 	public void scroll_backwards() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				// scroll(<negative integer>) means going backwards: it's forbidden
@@ -466,7 +432,6 @@ public void scroll_backwards() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -477,7 +442,7 @@ public void scroll_backwards() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 9 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 9 ) );
 
 				// scroll(<negative integer>) means going backwards: it's forbidden
@@ -491,7 +456,7 @@ public void scroll_backwards() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 9 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 9 ) );
 
 				expectScrollClose();
@@ -503,13 +468,12 @@ public void scroll_backwards() {
 	public void setRowNumber() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -520,11 +484,8 @@ public void setRowNumber() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
-				Object[] row = scroll.get();
-				assertThat( row ).hasSize( 1 );
-				assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
 
 				// No call to the underlying scroll.next() is expected here
 				assertThat( scroll.setRowNumber( 50 ) ).isTrue();
@@ -533,11 +494,8 @@ public void setRowNumber() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 50 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 50 ) );
-				row = scroll.get();
-				assertThat( row ).hasSize( 1 );
-				assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, 50 ) );
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
 						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
@@ -551,11 +509,8 @@ public void setRowNumber() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 220 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 220 ) );
-				row = scroll.get();
-				assertThat( row ).hasSize( 1 );
-				assertThat( row[0] ).isEqualTo( session.getReference( IndexedEntity.class, 220 ) );
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
 						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
@@ -586,7 +541,6 @@ public void setRowNumber() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				expectScrollClose();
@@ -598,13 +552,12 @@ public void setRowNumber() {
 	public void setRowNumber_backwards() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -615,7 +568,7 @@ public void setRowNumber_backwards() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
 
 				// setRowNumber(<previous row number>) means going backwards: it's forbidden
@@ -629,7 +582,7 @@ public void setRowNumber_backwards() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
 
 				expectScrollClose();
@@ -641,13 +594,12 @@ public void setRowNumber_backwards() {
 	public void setRowNumber_relativeToEnd() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -658,7 +610,7 @@ public void setRowNumber_relativeToEnd() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
 
 				// setRowNumber(<negative integer>) means going to a position relative to the end: it's forbidden
@@ -672,7 +624,175 @@ public void setRowNumber_relativeToEnd() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
+						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
+
+				expectScrollClose();
+			}
+		} );
+	}
+
+	@Test
+	public void position() {
+		setupHolder.runInTransaction( session -> {
+			expectScrollCreate();
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
+				backendMock.verifyExpectationsMet();
+
+				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() ).isNull();
+
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT, references( 0, DEFAULT_FETCH_SIZE ) ) );
+				assertThat( scroll.position( 10 ) ).isTrue();
+				backendMock.verifyExpectationsMet();
+
+				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() )
+						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
+
+				// No call to the underlying scroll.next() is expected here
+				assertThat( scroll.position( 50 ) ).isTrue();
+				backendMock.verifyExpectationsMet();
+
+				assertThat( scroll.getRowNumber() ).isEqualTo( 50 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() )
+						.isEqualTo( session.getReference( IndexedEntity.class, 50 ) );
+
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
+								references( DEFAULT_FETCH_SIZE, 2 * DEFAULT_FETCH_SIZE ) ) );
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
+								references( 2 * DEFAULT_FETCH_SIZE, 3 * DEFAULT_FETCH_SIZE ) ) );
+				assertThat( scroll.position( 220 ) ).isTrue();
+				backendMock.verifyExpectationsMet();
+
+				assertThat( scroll.getRowNumber() ).isEqualTo( 220 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() )
+						.isEqualTo( session.getReference( IndexedEntity.class, 220 ) );
+
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
+								references( 3 * DEFAULT_FETCH_SIZE, 4 * DEFAULT_FETCH_SIZE ) ) );
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
+								references( 4 * DEFAULT_FETCH_SIZE, 5 * DEFAULT_FETCH_SIZE ) ) );
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
+								references( 5 * DEFAULT_FETCH_SIZE, 6 * DEFAULT_FETCH_SIZE ) ) );
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
+								references( 6 * DEFAULT_FETCH_SIZE, 7 * DEFAULT_FETCH_SIZE ) ) );
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
+								references( 7 * DEFAULT_FETCH_SIZE, 8 * DEFAULT_FETCH_SIZE ) ) );
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
+								references( 8 * DEFAULT_FETCH_SIZE, 9 * DEFAULT_FETCH_SIZE ) ) );
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT,
+								references( 9 * DEFAULT_FETCH_SIZE, 10 * DEFAULT_FETCH_SIZE ) ) );
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.afterLast() );
+				assertThat( scroll.position( 10000 ) ).isFalse();
+				backendMock.verifyExpectationsMet();
+
+				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() ).isNull();
+
+				expectScrollClose();
+			}
+		} );
+	}
+
+	@Test
+	public void position_backwards() {
+		setupHolder.runInTransaction( session -> {
+			expectScrollCreate();
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
+				backendMock.verifyExpectationsMet();
+
+				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() ).isNull();
+
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT, references( 0, DEFAULT_FETCH_SIZE ) ) );
+				assertThat( scroll.position( 10 ) ).isTrue();
+				backendMock.verifyExpectationsMet();
+
+				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() )
+						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
+
+				// position(<previous row number>) means going backwards: it's forbidden
+				assertThatThrownBy( () -> scroll.position( 5 ) )
+						.isInstanceOf( SearchException.class )
+						.hasMessageContaining(
+								"Cannot scroll backwards with Hibernate Search scrolls: they are forwards-only",
+								"Ensure you always increment the scroll position, and never decrement it" );
+
+				// We're still on the same element
+				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() )
+						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
+
+				expectScrollClose();
+			}
+		} );
+	}
+
+	@Test
+	public void position_relativeToEnd() {
+		setupHolder.runInTransaction( session -> {
+			expectScrollCreate();
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
+				backendMock.verifyExpectationsMet();
+
+				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() ).isNull();
+
+				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
+						StubNextScrollWorkBehavior.of( ENTITY_COUNT, references( 0, DEFAULT_FETCH_SIZE ) ) );
+				assertThat( scroll.position( 10 ) ).isTrue();
+				backendMock.verifyExpectationsMet();
+
+				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() )
+						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
+
+				// position(<negative integer>) means going to a position relative to the end: it's forbidden
+				assertThatThrownBy( () -> scroll.position( -500 ) )
+						.isInstanceOf( SearchException.class )
+						.hasMessageContaining(
+								"Cannot set the scroll position relative to the end with Hibernate Search scrolls",
+								"Ensure you always pass a positive number to position()" );
+
+				// We're still on the same element
+				assertThat( scroll.getRowNumber() ).isEqualTo( 10 );
+				assertThat( scroll.isFirst() ).isFalse();
+				assertThat( scroll.isLast() ).isFalse();
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 10 ) );
 
 				expectScrollClose();
@@ -684,13 +804,12 @@ public void setRowNumber_relativeToEnd() {
 	public void beforeFirst_fromBeforeFirst() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				// Calling beforeFirst() when we're before the first element should not do anything
@@ -699,7 +818,6 @@ public void beforeFirst_fromBeforeFirst() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				// next() still works after a call to beforeFirst()
@@ -711,7 +829,7 @@ public void beforeFirst_fromBeforeFirst() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 0 );
 				assertThat( scroll.isFirst() ).isTrue();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 0 ) );
 
 				expectScrollClose();
@@ -723,13 +841,12 @@ public void beforeFirst_fromBeforeFirst() {
 	public void beforeFirst_fromFirstOrAfter() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -741,7 +858,7 @@ public void beforeFirst_fromFirstOrAfter() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 0 );
 				assertThat( scroll.isFirst() ).isTrue();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 0 ) );
 
 				// Going before the first element would means going backwards: it's forbidden
@@ -760,13 +877,12 @@ public void beforeFirst_fromFirstOrAfter() {
 	public void first() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -778,7 +894,7 @@ public void first() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 0 );
 				assertThat( scroll.isFirst() ).isTrue();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 0 ) );
 
 				// Calling first() when we're on the first element should not do anything
@@ -787,7 +903,7 @@ public void first() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 0 );
 				assertThat( scroll.isFirst() ).isTrue();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 0 ) );
 
 				// next() still works after a call to first()
@@ -796,7 +912,7 @@ public void first() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 1 ) );
 
 				// Going to the first element would means going backwards: it's forbidden
@@ -815,7 +931,7 @@ public void first() {
 	public void first_fromAfterFirst() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -827,7 +943,7 @@ public void first_fromAfterFirst() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 1 ) );
 
 				// Going to the first element would means going backwards: it's forbidden
@@ -846,7 +962,7 @@ public void first_fromAfterFirst() {
 	public void last() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -887,7 +1003,7 @@ public void last() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( ENTITY_COUNT - 1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isTrue();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, ENTITY_COUNT - 1 ) );
 
 				// Calling last() when we're on the last element should not do anything
@@ -896,7 +1012,7 @@ public void last() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( ENTITY_COUNT - 1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isTrue();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, ENTITY_COUNT - 1 ) );
 
 				// next() still works after a call to last()
@@ -905,7 +1021,6 @@ public void last() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				// Going to the last element would means going backwards: it's forbidden
@@ -924,7 +1039,7 @@ public void last() {
 	public void afterLast_fromLastOrBefore() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -935,7 +1050,7 @@ public void afterLast_fromLastOrBefore() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( 9 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) )
+				assertThat( scroll.get() )
 						.isEqualTo( session.getReference( IndexedEntity.class, 9 ) );
 
 				scroll.afterLast();
@@ -943,7 +1058,6 @@ public void afterLast_fromLastOrBefore() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				expectScrollClose();
@@ -955,7 +1069,7 @@ public void afterLast_fromLastOrBefore() {
 	public void afterLast_fromAfterLast() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				backendMock.expectNextScroll( Collections.singletonList( IndexedEntity.NAME ),
@@ -995,7 +1109,6 @@ public void afterLast_fromAfterLast() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				scroll.afterLast();
@@ -1004,7 +1117,6 @@ public void afterLast_fromAfterLast() {
 				assertThat( scroll.getRowNumber() ).isEqualTo( -1 );
 				assertThat( scroll.isFirst() ).isFalse();
 				assertThat( scroll.isLast() ).isFalse();
-				assertThat( scroll.get( 0 ) ).isNull();
 				assertThat( scroll.get() ).isNull();
 
 				expectScrollClose();
@@ -1017,7 +1129,7 @@ public void afterLast_fromAfterLast() {
 	public void close() {
 		setupHolder.runInTransaction( session -> {
 			expectScrollCreate();
-			try ( ScrollableResults scroll = createSimpleQuery( session ).scroll() ) {
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session ).scroll() ) {
 				backendMock.verifyExpectationsMet();
 
 				ScrollableResultsImplementor implementor = (ScrollableResultsImplementor) scroll;
@@ -1059,7 +1171,7 @@ public void timeout() {
 		setupHolder.runInTransaction( session -> {
 			backendMock.expectScrollObjects( Collections.singletonList( IndexedEntity.NAME ),
 					DEFAULT_FETCH_SIZE, b -> b.failAfter( 200, TimeUnit.MILLISECONDS ) );
-			try ( ScrollableResults scroll = createSimpleQuery( session )
+			try ( ScrollableResults<?> scroll = createSimpleQuery( session )
 					.setHint( "jakarta.persistence.query.timeout", 200 )
 					.scroll() ) {
 				backendMock.verifyExpectationsMet();
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/massindexing/MassIndexingCachingIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/massindexing/MassIndexingCachingIT.java
index c032664bb9..4d205fdccf 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/massindexing/MassIndexingCachingIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/massindexing/MassIndexingCachingIT.java
@@ -57,7 +57,7 @@ public void setup(OrmSetupHelper.SetupContext setupContext) {
 		backendMock.expectAnySchema( IndexedEntity.NAME );
 
 		setupContext.withPropertyRadical( HibernateOrmMapperSettings.Radicals.INDEXING_LISTENERS_ENABLED, "false" )
-				.withProperty( AvailableSettings.JPA_SHARED_CACHE_MODE, SharedCacheMode.ALL.name() )
+				.withProperty( AvailableSettings.JAKARTA_SHARED_CACHE_MODE, SharedCacheMode.ALL.name() )
 				.withProperty( AvailableSettings.GENERATE_STATISTICS, "true" )
 				.withProperty( AvailableSettings.USE_SECOND_LEVEL_CACHE, "true" )
 				.withAnnotatedTypes( IndexedEntity.class );
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/model/BackRefPropertyIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/model/BackRefPropertyIT.java
index 6af91cdb9f..34c4c1b092 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/model/BackRefPropertyIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/model/BackRefPropertyIT.java
@@ -20,7 +20,7 @@
 
 import org.hibernate.SessionFactory;
 import org.hibernate.engine.spi.SessionFactoryImplementor;
-import org.hibernate.metamodel.spi.MetamodelImplementor;
+import org.hibernate.metamodel.MappingMetamodel;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.AssociationInverseSide;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
@@ -61,8 +61,8 @@ public void test() {
 
 		// Hibernate Search started successfully.
 		// Check that there actually is a backref:
-		MetamodelImplementor metamodel = sessionFactory.unwrap( SessionFactoryImplementor.class ).getMetamodel();
-		assertThat( metamodel.entityPersister( IndexedEntity.class ).getPropertyNames() )
+		MappingMetamodel metamodel = sessionFactory.unwrap( SessionFactoryImplementor.class ).getMappingMetamodel();
+		assertThat( metamodel.getEntityDescriptor( IndexedEntity.class ).getPropertyNames() )
 				.contains( "_containing_fk_containingidBackref" )
 				.contains( "_containingIndexBackref" );
 
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/model/GenericPropertyIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/model/GenericPropertyIT.java
index f3c50122f5..a31ff7cbb5 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/model/GenericPropertyIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/model/GenericPropertyIT.java
@@ -8,6 +8,8 @@
 
 import static org.hibernate.search.util.impl.integrationtest.mapper.orm.OrmUtils.with;
 
+import java.io.Serializable;
+import java.sql.Types;
 import java.util.ArrayList;
 import java.util.List;
 import jakarta.persistence.Basic;
@@ -17,6 +19,7 @@
 import jakarta.persistence.OneToMany;
 
 import org.hibernate.SessionFactory;
+import org.hibernate.annotations.JdbcTypeCode;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.IndexedEmbedded;
@@ -118,25 +121,18 @@ public void setGenericProperty(GenericEntity<String> genericProperty) {
 	}
 
 	@Entity(name = "generic")
-	public abstract static class GenericEntity<T> {
+	public abstract static class GenericEntity<T extends Serializable> {
 
 		@Id
 		private Integer id;
 
 		@Basic
 		@GenericField
-		// Necessary for Hibernate ORM: even if we make T extend Serializable,
-		// ORM doesn't take it into account for some reason.
-		@SuppressWarnings("deprecation")
-		@org.hibernate.annotations.Type(type = "serializable")
 		private T content;
 
 		@Basic
 		@GenericField
-		// Necessary for Hibernate ORM: even if we make T extend Serializable,
-		// ORM doesn't take it into account for some reason.
-		@SuppressWarnings("deprecation")
-		@org.hibernate.annotations.Type(type = "serializable")
+		@JdbcTypeCode(Types.VARBINARY)
 		private T[] arrayContent;
 
 		@OneToMany(mappedBy = "genericProperty")
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/model/SyntheticPropertyIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/model/SyntheticPropertyIT.java
index 3669e15c62..132ed8aed1 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/model/SyntheticPropertyIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/model/SyntheticPropertyIT.java
@@ -20,7 +20,7 @@
 
 import org.hibernate.SessionFactory;
 import org.hibernate.engine.spi.SessionFactoryImplementor;
-import org.hibernate.metamodel.spi.MetamodelImplementor;
+import org.hibernate.metamodel.MappingMetamodel;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
 import org.hibernate.search.mapper.pojo.mapping.definition.annotation.IndexedEmbedded;
@@ -58,8 +58,8 @@ public void test() {
 
 		// Hibernate Search started successfully.
 		// Check that there actually is a synthetic property:
-		MetamodelImplementor metamodel = sessionFactory.unwrap( SessionFactoryImplementor.class ).getMetamodel();
-		assertThat( metamodel.entityPersister( ContainedEntity.class ).getPropertyNames() )
+		MappingMetamodel metamodel = sessionFactory.unwrap( SessionFactoryImplementor.class ).getMappingMetamodel();
+		assertThat( metamodel.getEntityDescriptor( ContainedEntity.class ).getPropertyNames() )
 				.contains( "_" + IndexedEntity.class.getName().replace( '.', '_' ) + "_contained" );
 
 		// If we get here the bug was solved, but let's at least check that indexing works
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/search/loading/SearchQueryEntityLoadingCacheLookupIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/search/loading/SearchQueryEntityLoadingCacheLookupIT.java
index d59ed9252b..845fd60bc9 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/search/loading/SearchQueryEntityLoadingCacheLookupIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/search/loading/SearchQueryEntityLoadingCacheLookupIT.java
@@ -98,7 +98,7 @@ public void setup(OrmSetupHelper.SetupContext setupContext) {
 
 		setupContext.withProperty( HibernateOrmMapperSettings.QUERY_LOADING_CACHE_LOOKUP_STRATEGY,
 						defaultCacheLookupStrategy )
-				.withProperty( AvailableSettings.JPA_SHARED_CACHE_MODE, SharedCacheMode.ALL.name() )
+				.withProperty( AvailableSettings.JAKARTA_SHARED_CACHE_MODE, SharedCacheMode.ALL.name() )
 				.withConfiguration( c -> mapping.configure( c, model ) );
 	}
 
diff --git a/test/java/org/hibernate/search/integrationtest/mapper/orm/search/loading/SearchQueryEntityLoadingMultipleTypesIT.java b/test/java/org/hibernate/search/integrationtest/mapper/orm/search/loading/SearchQueryEntityLoadingMultipleTypesIT.java
index fdef5e495a..e7a0abc817 100644
--- a/test/java/org/hibernate/search/integrationtest/mapper/orm/search/loading/SearchQueryEntityLoadingMultipleTypesIT.java
+++ b/test/java/org/hibernate/search/integrationtest/mapper/orm/search/loading/SearchQueryEntityLoadingMultipleTypesIT.java
@@ -117,7 +117,7 @@ public void setup(OrmSetupHelper.SetupContext setupContext) {
 		backendMock.expectAnySchema( Hierarchy8_A_C_Cacheable.NAME );
 		backendMock.expectAnySchema( Hierarchy8_A_D_Cacheable.NAME );
 
-		setupContext.withProperty( AvailableSettings.JPA_SHARED_CACHE_MODE, SharedCacheMode.ENABLE_SELECTIVE.name() )
+		setupContext.withProperty( AvailableSettings.JAKARTA_SHARED_CACHE_MODE, SharedCacheMode.ENABLE_SELECTIVE.name() )
 				.withAnnotatedTypes(
 						Hierarchy1_A__Abstract.class,
 						Hierarchy1_A_B.class,
