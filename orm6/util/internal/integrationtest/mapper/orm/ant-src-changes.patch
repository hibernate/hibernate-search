diff --git a/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/ReusableOrmSetupHolder.java b/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/ReusableOrmSetupHolder.java
index 65d73c4459..58f21b13ed 100644
--- a/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/ReusableOrmSetupHolder.java
+++ b/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/ReusableOrmSetupHolder.java
@@ -458,7 +458,7 @@ private void clearDatabase(SessionFactoryImplementor sessionFactory, HibernateOr
 		for ( Class<?> entityClass : config.entityClearOrder ) {
 			EntityType<?> entityType;
 			try {
-				entityType = sessionFactory.getMetamodel().entity( entityClass );
+				entityType = sessionFactory.getJpaMetamodel().entity( entityClass );
 			}
 			catch (IllegalArgumentException e) {
 				// When using annotatedTypes to infer the clear order,
@@ -475,7 +475,7 @@ private void clearDatabase(SessionFactoryImplementor sessionFactory, HibernateOr
 		// we try to delete all remaining entity types.
 		// Note we're stabilizing the order, because ORM uses a HashSet internally
 		// and the order may change from one execution to the next.
-		List<EntityType<?>> sortedEntityTypes = sessionFactory.getMetamodel().getEntities().stream()
+		List<EntityType<?>> sortedEntityTypes = sessionFactory.getJpaMetamodel().getEntities().stream()
 				.sorted( Comparator.comparing( EntityType::getName ) )
 				.collect( Collectors.toList() );
 		for ( EntityType<?> entityType : sortedEntityTypes ) {
@@ -564,6 +564,7 @@ private static Query<?> createSelectOrDeleteAllOfSpecificTypeQuery(EntityType<?>
 			builder.append( " where type( e ) in (:type)" );
 			typeArg = entityType.getJavaType();
 		}
+		@SuppressWarnings("deprecation")
 		Query<?> query = QueryType.SELECT.equals( queryType )
 				? session.createQuery( builder.toString(), entityType.getJavaType() )
 				: session.createQuery( builder.toString() );
@@ -574,7 +575,7 @@ private static Query<?> createSelectOrDeleteAllOfSpecificTypeQuery(EntityType<?>
 	}
 
 	private static boolean hasEntitySubclass(SessionFactory sessionFactory, EntityType<?> parentEntity) {
-		Metamodel metamodel = sessionFactory.unwrap( SessionFactoryImplementor.class ).getMetamodel();
+		Metamodel metamodel = sessionFactory.unwrap( SessionFactoryImplementor.class ).getJpaMetamodel();
 		for ( EntityType<?> entity : metamodel.getEntities() ) {
 			if ( parentEntity.equals( entity.getSupertype() ) ) {
 				return true;
@@ -596,7 +597,7 @@ private static boolean hasPotentiallyJoinTable(SessionFactoryImplementor session
 				case ELEMENT_COLLECTION:
 					return true;
 				case EMBEDDED:
-					EmbeddableType<?> embeddable = sessionFactory.getMetamodel().embeddable( attribute.getJavaType() );
+					EmbeddableType<?> embeddable = sessionFactory.getJpaMetamodel().embeddable( attribute.getJavaType() );
 					if ( hasPotentiallyJoinTable( sessionFactory, embeddable ) ) {
 						return true;
 					}
diff --git a/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/multitenancy/impl/MultitenancyTestHelper.java b/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/multitenancy/impl/MultitenancyTestHelper.java
index ef2ee0d58a..1c09fefeb0 100644
--- a/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/multitenancy/impl/MultitenancyTestHelper.java
+++ b/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/multitenancy/impl/MultitenancyTestHelper.java
@@ -8,12 +8,12 @@
 
 import static org.junit.Assume.assumeTrue;
 
-import org.hibernate.MultiTenancyStrategy;
 import org.hibernate.cfg.AvailableSettings;
-import org.hibernate.dialect.Dialect;
 import org.hibernate.dialect.H2Dialect;
 import org.hibernate.search.util.impl.integrationtest.mapper.orm.SimpleSessionFactoryBuilder;
 
+import org.hibernate.testing.orm.junit.DialectContext;
+
 /**
  * Utility to help setting up a test SessionFactory which uses multi-tenancy based
  * on multiple databases.
@@ -35,21 +35,17 @@ private MultitenancyTestHelper(String[] tenantIds) {
 	}
 
 	private void attachTo(SimpleSessionFactoryBuilder builder) {
+		assumeTrue( "This test relies on multi-tenancy, which can currently only be set up with H2",
+				DialectContext.getDialect() instanceof H2Dialect );
+
 		// Force our own schema management tool which creates the schema for all tenants.
 		builder.onServiceRegistryBuilder( srb -> srb.addInitiator(
 				new MultitenancyTestHelperSchemaManagementTool.Initiator( tenantIds ) ) );
 
-		builder.setProperty( AvailableSettings.MULTI_TENANT, MultiTenancyStrategy.DATABASE.name() );
 		builder.setProperty( AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER,
 				new H2LazyMultiTenantConnectionProvider( tenantIds ) );
 		// any required backend-multi-tenancy property (e.g.:*.backend.multi_tenancy.strategy = discriminator)
 		// should be set by the client test
-
-		builder.onMetadata( metadataImplementor -> {
-			Dialect dialect = metadataImplementor.getDatabase().getDialect();
-			assumeTrue( "This test relies on multi-tenancy, which can currently only be set up with H2",
-					dialect instanceof H2Dialect );
-		} );
 	}
 
 }
diff --git a/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/multitenancy/impl/MultitenancyTestHelperSchemaManagementTool.java b/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/multitenancy/impl/MultitenancyTestHelperSchemaManagementTool.java
index 064f14cc09..c9a7eb2062 100644
--- a/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/multitenancy/impl/MultitenancyTestHelperSchemaManagementTool.java
+++ b/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/multitenancy/impl/MultitenancyTestHelperSchemaManagementTool.java
@@ -21,6 +21,7 @@
 import org.hibernate.tool.schema.internal.SchemaDropperImpl;
 import org.hibernate.tool.schema.internal.exec.GenerationTarget;
 import org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase;
+import org.hibernate.tool.schema.spi.ContributableMatcher;
 import org.hibernate.tool.schema.spi.DelayedDropAction;
 import org.hibernate.tool.schema.spi.ExecutionOptions;
 import org.hibernate.tool.schema.spi.ExtractionTool;
@@ -51,8 +52,7 @@ public Class<SchemaManagementTool> getServiceInitiated() {
 		}
 
 		@Override
-		@SuppressWarnings("rawtypes") // Can't do better: Map is raw in the superclass
-		public SchemaManagementTool initiateService(Map configurationValues, ServiceRegistryImplementor registry) {
+		public SchemaManagementTool initiateService(Map<String,Object> configurationValues, ServiceRegistryImplementor registry) {
 			return new MultitenancyTestHelperSchemaManagementTool( tenantIds );
 		}
 	}
@@ -88,13 +88,13 @@ private GenerationTargetToDatabase[] createSchemaTargets(ServiceRegistryImplemen
 	}
 
 	@Override
-	@SuppressWarnings("rawtypes") // Can't do better: Map is raw in the superclass
-	public SchemaCreator getSchemaCreator(Map options) {
+	public SchemaCreator getSchemaCreator(Map<String,Object> options) {
 		return new SchemaCreator() {
 			final SchemaCreatorImpl delegate = (SchemaCreatorImpl) toolDelegate.getSchemaCreator( options );
 
 			@Override
-			public void doCreation(Metadata metadata, ExecutionOptions options, SourceDescriptor sourceDescriptor,
+			public void doCreation(Metadata metadata, ExecutionOptions executionOptions,
+					ContributableMatcher contributableMatcher, SourceDescriptor sourceDescriptor,
 					TargetDescriptor targetDescriptor) {
 				delegate.doCreation( metadata, true, generationTargets );
 			}
@@ -102,20 +102,20 @@ public void doCreation(Metadata metadata, ExecutionOptions options, SourceDescri
 	}
 
 	@Override
-	@SuppressWarnings("rawtypes") // Can't do better: Map is raw in the superclass
-	public SchemaDropper getSchemaDropper(Map options) {
+	public SchemaDropper getSchemaDropper(Map<String,Object> options) {
 		return new SchemaDropper() {
 			final SchemaDropperImpl delegate = (SchemaDropperImpl) toolDelegate.getSchemaDropper( options );
 
 			@Override
-			public void doDrop(Metadata metadata, ExecutionOptions options, SourceDescriptor sourceDescriptor,
+			public void doDrop(Metadata metadata, ExecutionOptions executionOptions,
+					ContributableMatcher contributableMatcher, SourceDescriptor sourceDescriptor,
 					TargetDescriptor targetDescriptor) {
 				delegate.doDrop( metadata, true, generationTargets );
 			}
 
 			@Override
-			public DelayedDropAction buildDelayedAction(Metadata metadata, ExecutionOptions options,
-					SourceDescriptor sourceDescriptor) {
+			public DelayedDropAction buildDelayedAction(Metadata metadata, ExecutionOptions executionOptions,
+					ContributableMatcher contributableMatcher, SourceDescriptor sourceDescriptor) {
 				return new DelayedDropAction() {
 					@Override
 					public void perform(ServiceRegistry serviceRegistry) {
@@ -127,14 +127,12 @@ public void perform(ServiceRegistry serviceRegistry) {
 	}
 
 	@Override
-	@SuppressWarnings("rawtypes") // Can't do better: Map is raw in the superclass
-	public SchemaMigrator getSchemaMigrator(Map options) {
+	public SchemaMigrator getSchemaMigrator(Map<String,Object> options) {
 		throw notSupported();
 	}
 
 	@Override
-	@SuppressWarnings("rawtypes") // Can't do better: Map is raw in the superclass
-	public SchemaValidator getSchemaValidator(Map options) {
+	public SchemaValidator getSchemaValidator(Map<String,Object> options) {
 		throw notSupported();
 	}
 
diff --git a/main/resources/hibernate.properties b/main/resources/hibernate.properties
index d866f45e6d..e5542dbbc1 100644
--- a/main/resources/hibernate.properties
+++ b/main/resources/hibernate.properties
@@ -25,3 +25,10 @@ hibernate.cache.region.factory_class = org.hibernate.testing.cache.CachingRegion
 
 hibernate.implicit_naming_strategy = component-path
 
+# Temporary workaround for:
+# - https://hibernate.atlassian.net/browse/HHH-15054
+#   (affects org/hibernate/search/test/proxy/ProxyTest)
+# - https://hibernate.atlassian.net/browse/HHH-15058
+#   (affects tests in org/hibernate/search/integrationtest/mapper/orm/automaticindexing/association/bytype/manytomany,
+#   in particular)
+hibernate.mapping.default_list_semantics=bag
