diff --git a/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/multitenancy/impl/MultitenancyTestHelper.java b/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/multitenancy/impl/MultitenancyTestHelper.java
index cc6c240317..a536100782 100644
--- a/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/multitenancy/impl/MultitenancyTestHelper.java
+++ b/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/multitenancy/impl/MultitenancyTestHelper.java
@@ -8,7 +8,6 @@
 
 import static org.junit.Assume.assumeTrue;
 
-import org.hibernate.MultiTenancyStrategy;
 import org.hibernate.cfg.AvailableSettings;
 import org.hibernate.dialect.Dialect;
 import org.hibernate.dialect.H2Dialect;
@@ -39,7 +38,6 @@ private void attachTo(SimpleSessionFactoryBuilder builder) {
 		builder.onServiceRegistryBuilder( srb -> srb.addInitiator(
 				new MultitenancyTestHelperSchemaManagementTool.Initiator( tenantIds ) ) );
 
-		builder.setProperty( AvailableSettings.MULTI_TENANT, MultiTenancyStrategy.DATABASE.name() );
 		builder.setProperty( AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER,
 				new H2LazyMultiTenantConnectionProvider( tenantIds ) );
 		// any required backend-multi-tenancy property (e.g.:*.backend.multi_tenancy.strategy = discriminator)
diff --git a/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/multitenancy/impl/MultitenancyTestHelperSchemaManagementTool.java b/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/multitenancy/impl/MultitenancyTestHelperSchemaManagementTool.java
index d5366722a2..03a984c4e7 100644
--- a/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/multitenancy/impl/MultitenancyTestHelperSchemaManagementTool.java
+++ b/main/java/org/hibernate/search/util/impl/integrationtest/mapper/orm/multitenancy/impl/MultitenancyTestHelperSchemaManagementTool.java
@@ -21,6 +21,7 @@
 import org.hibernate.tool.schema.internal.SchemaDropperImpl;
 import org.hibernate.tool.schema.internal.exec.GenerationTarget;
 import org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase;
+import org.hibernate.tool.schema.spi.ContributableMatcher;
 import org.hibernate.tool.schema.spi.DelayedDropAction;
 import org.hibernate.tool.schema.spi.ExecutionOptions;
 import org.hibernate.tool.schema.spi.ExtractionTool;
@@ -93,7 +94,8 @@ public SchemaCreator getSchemaCreator(Map options) {
 		return new SchemaCreator() {
 			final SchemaCreatorImpl delegate = (SchemaCreatorImpl) toolDelegate.getSchemaCreator( options );
 			@Override
-			public void doCreation(Metadata metadata, ExecutionOptions options, SourceDescriptor sourceDescriptor,
+			public void doCreation(Metadata metadata, ExecutionOptions executionOptions,
+					ContributableMatcher contributableMatcher, SourceDescriptor sourceDescriptor,
 					TargetDescriptor targetDescriptor) {
 				delegate.doCreation( metadata, true, generationTargets );
 			}
@@ -106,14 +108,15 @@ public SchemaDropper getSchemaDropper(Map options) {
 		return new SchemaDropper() {
 			final SchemaDropperImpl delegate = (SchemaDropperImpl) toolDelegate.getSchemaDropper( options );
 			@Override
-			public void doDrop(Metadata metadata, ExecutionOptions options, SourceDescriptor sourceDescriptor,
+			public void doDrop(Metadata metadata, ExecutionOptions executionOptions,
+					ContributableMatcher contributableMatcher, SourceDescriptor sourceDescriptor,
 					TargetDescriptor targetDescriptor) {
 				delegate.doDrop( metadata, true, generationTargets );
 			}
 
 			@Override
-			public DelayedDropAction buildDelayedAction(Metadata metadata, ExecutionOptions options,
-					SourceDescriptor sourceDescriptor) {
+			public DelayedDropAction buildDelayedAction(Metadata metadata, ExecutionOptions executionOptions,
+					ContributableMatcher contributableMatcher, SourceDescriptor sourceDescriptor) {
 				return new DelayedDropAction() {
 					@Override
 					public void perform(ServiceRegistry serviceRegistry) {
