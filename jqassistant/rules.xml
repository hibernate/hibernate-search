<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~ Hibernate Search, full-text search for your domain model
 ~
 ~ License: GNU Lesser General Public License (LGPL), version 2.1 or later
 ~ See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
  -->
<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/analysis/rules/schema/v1.0">

    <concept id="my-rules:TypeMetadata">
        <description>
            Contributes additional metadata to the :Type nodes.
        </description>
        <cypher><![CDATA[
            MATCH
                (type:Type)
            SET
                type.nameWithoutContainingTypeName = SPLIT(type.name, "$")[-1]
            RETURN
                type
        ]]></cypher>
    </concept>

    <concept id="my-rules:Anonymous">
        <description>
            Contributes the :Anonymous label to anonymous types
        </description>
        <cypher><![CDATA[
            MATCH
                (type:Type)
            WHERE
                type.name =~ ".*\\$[0-9]+$"
            SET
                type:Anonymous
            RETURN
                type
        ]]></cypher>
    </concept>

    <concept id="my-rules:Generated">
        <description>
            Contributes the :Generated label to generated types
        </description>
        <cypher><![CDATA[
            MATCH
                (type:Type)
            WHERE
                type.name =~ ".*_\\$(logger|bundle)$"
            SET
                type:Generated
            RETURN
                type
        ]]></cypher>
    </concept>

    <concept id="my-rules:Spi">
        <description>
            Contributes the :Spi label to SPI types
        </description>
        <cypher><![CDATA[
            MATCH
                (type:Type)
            WHERE
                type.fqn =~ ".*\\.spi\\..*"
                AND type.visibility = "public"
            SET
                type:Spi, type:Public
            RETURN
                type
        ]]></cypher>
    </concept>

    <concept id="my-rules:Impl">
        <description>
            Contributes the :Impl label to implementation types
        </description>
        <cypher><![CDATA[
            MATCH
                (type:Type)
            WHERE
                type.fqn =~ ".*\\.impl\\..*"
                // Apache HTTP Client uses an impl package, but puts public classes in there... Such as the client builder.
                AND NOT type.fqn STARTS WITH "org.apache.http.impl."
                OR type.visibility <> "public"
            SET
                type:Impl
            RETURN
                type
        ]]></cypher>
    </concept>

    <concept id="my-rules:Test">
        <description>
            Contributes the :Test label to :Type nodes that exist for test purposes only.
        </description>
        <cypher><![CDATA[
            MATCH
                (type:Type)<-[:CONTAINS]-(artifact:Maven:Artifact)
            WHERE
                artifact.type = "test-jar"
                OR artifact.name =~ "hibernate-search-integrationtest-.*"
                OR artifact.name =~ "hibernate-search-util-internal-test.*"
                OR artifact.name =~ "hibernate-search-util-internal-integrationtest.*"
            SET
                type:Test
            RETURN
                artifact
        ]]></cypher>
    </concept>

    <concept id="my-rules:Api">
        <requiresConcept refId="my-rules:Test" />
        <requiresConcept refId="my-rules:Spi" />
        <requiresConcept refId="my-rules:Impl" />
        <description>
            Contributes the :Api label to API types
        </description>
        <cypher><![CDATA[
            MATCH
                (type:Type)
            WHERE
                NOT type:Test
                AND NOT type:Impl
                AND NOT type:Spi
            SET
                type:Api, type:Public
            RETURN
                type
        ]]></cypher>
    </concept>

    <concept id="my-rules:HibernateSearch">
        <description>
            Contributes the :HibernateSearch label to :Maven:Artifact and :Type nodes from Hibernate Search.
        </description>
        <cypher><![CDATA[
            MATCH
                (type:Type)<-[:CONTAINS]-(artifact:Maven:Artifact)
            WHERE
                artifact.name =~ "hibernate-search-.*"
            SET
                artifact:HibernateSearch,
                type:HibernateSearch
            RETURN
                type
        ]]></cypher>
    </concept>

    <concept id="my-rules:UtilArtifacts">
        <requiresConcept refId="my-rules:HibernateSearch" />
        <description>
            Contributes the :Util label to :Maven:Artifact nodes representing utils artifacts.
        </description>
        <cypher><![CDATA[
            MATCH
                (artifact:Maven:Artifact:HibernateSearch)
            WHERE
                artifact.name =~ ".*-util-.*"
            SET
                artifact:Util
            RETURN
                artifact
        ]]></cypher>
    </concept>

    <concept id="my-rules:ArtifactMetadata">
        <requiresConcept refId="my-rules:HibernateSearch" />
        <description>
            Contributes additional metadata to the :Maven:Artifact:HibernateSearch nodes.
        </description>
        <cypher><![CDATA[
            MATCH
                (artifact:Maven:Artifact:HibernateSearch)
            SET
                // Assign a keyword to each module
                artifact.moduleSpecificKeyword =
                    CASE artifact.name
                        WHEN 'hibernate-search-backend-lucene' THEN 'Lucene'
                        WHEN 'hibernate-search-backend-elasticsearch' THEN 'Elasticsearch'
                        WHEN 'hibernate-search-backend-elasticsearch-aws' THEN 'ElasticsearchAws'
                        WHEN 'hibernate-search-mapper-pojo' THEN 'Pojo'
                        WHEN 'hibernate-search-mapper-javabean' THEN 'JavaBean'
                        WHEN 'hibernate-search-mapper-orm' THEN 'HibernateOrm'
                        ELSE 'UNKNOWN-MODULE-SPECIFIC-KEYWORD-PLEASE-UPDATE-JQASSISTANT-RULES'
                    END
            RETURN
                artifact
        ]]></cypher>
    </concept>

    <constraint id="my-rules:PublicTypesMayNotExtendInternalTypes">
        <requiresConcept refId="my-rules:Api" />
        <requiresConcept refId="my-rules:Spi" />
        <requiresConcept refId="my-rules:Impl" />
        <description>API/SPI types must not extend/implement internal types.</description>
        <cypher><![CDATA[
            MATCH
                (type:Type:Public)-[:EXTENDS|:IMPLEMENTS]->(supertype:Type:Impl)
            RETURN
                type
        ]]></cypher>
    </constraint>

    <constraint id="my-rules:PublicMethodsMayNotExposeInternalTypes">
        <requiresConcept refId="my-rules:Api" />
        <requiresConcept refId="my-rules:Spi" />
        <requiresConcept refId="my-rules:Impl" />
        <description>API/SPI methods must not expose internal types.</description>
        <cypher><![CDATA[
            // return values
            MATCH
                (type:Type:Public)-[:DECLARES]->(method)-[:RETURNS]->(returntype:Type:Impl)
            WHERE
                (method.visibility="public" OR method.visibility="protected")
            RETURN
                method

            // parameters
            UNION ALL
            MATCH
                (type:Type:Public)-[:DECLARES]->(method)-[:HAS]->(parameter)-[:OF_TYPE]->(parametertype:Type:Impl)
            WHERE
                (method.visibility="public" OR method.visibility="protected")
            RETURN
                method
        ]]></cypher>
    </constraint>

    <constraint id="my-rules:PublicFieldsMayNotExposeInternalTypes">
        <requiresConcept refId="my-rules:Api" />
        <requiresConcept refId="my-rules:Spi" />
        <requiresConcept refId="my-rules:Impl" />
        <description>API/SPI fields must not expose internal types.</description>
        <cypher><![CDATA[
            MATCH
                (type:Type:Public)-[:DECLARES]->(field)-[:OF_TYPE]->(fieldtype:Type:Impl)
            WHERE
                (field.visibility="public" OR field.visibility="protected")
            RETURN
                field
        ]]></cypher>
    </constraint>

    <constraint id="my-rules:APITypesMayNotExtendSPITypes">
        <requiresConcept refId="my-rules:Api" />
        <requiresConcept refId="my-rules:Spi" />
        <description>API types must not extend/implement SPI types.</description>
        <cypher><![CDATA[
            MATCH
                (type:Type:Api)-[:EXTENDS|:IMPLEMENTS]->(supertype:Type:Spi)
            RETURN
                type
        ]]></cypher>
    </constraint>

    <constraint id="my-rules:APIMethodsMayNotExposeSPITypes">
        <requiresConcept refId="my-rules:Api" />
        <requiresConcept refId="my-rules:Spi" />
        <description>API methods must not expose SPI types.</description>
        <cypher><![CDATA[
            // return values
            MATCH
                (type:Type:Api)-[:DECLARES]->(method)-[:RETURNS]->(returntype:Type:Spi)
            WHERE
                (method.visibility="public" OR method.visibility="protected")
                // Exclude extensions from SPI leak rules: they are *meant* to allow SPI leaks
                AND NOT type.name =~ ".*Extension"
            RETURN
                method

            // parameters
            UNION ALL
            MATCH
                (type:Type:Api)-[:DECLARES]->(method)-[:HAS]->(parameter)-[:OF_TYPE]->(parametertype:Type:Spi)
            WHERE
                (method.visibility="public" OR method.visibility="protected")
                // Exclude extensions from SPI leak rules: they are *meant* to allow SPI leaks
                AND NOT type.name =~ ".*Extension"
            RETURN
                method
        ]]></cypher>
    </constraint>

    <constraint id="my-rules:APIFieldsMayNotExposeSPITypes">
        <requiresConcept refId="my-rules:Api" />
        <requiresConcept refId="my-rules:Spi" />
        <description>API fields must not expose SPI types.</description>
        <cypher><![CDATA[
            MATCH
                (type:Type:Api)-[:DECLARES]->(field)-[:OF_TYPE]->(fieldtype:Type:Spi)
            WHERE
                (field.visibility="public" OR field.visibility="protected")
            RETURN
                field
        ]]></cypher>
    </constraint>

    <constraint id="my-rules:TypesMayNotDependOnImplementationTypeFromOtherModules">
        <requiresConcept refId="my-rules:UtilArtifacts" />
        <requiresConcept refId="my-rules:Test" />
        <requiresConcept refId="my-rules:Impl" />
        <description>
            Types must not depend on implementation types from other modules.
            SPIs must be used for such dependencies.
            Exceptions are allowed only when the dependency type is in a util module,
            or the depending type is a test type.
        </description>
        <cypher><![CDATA[
            MATCH (artifact1:Maven:Artifact)-[:CONTAINS]->(type1:Type)-[:DEPENDS_ON]->
                (type2:Type:Impl)<-[:CONTAINS]-(artifact2:Maven:Artifact)
            WHERE
                artifact1 <> artifact2
                // Exceptions
                AND NOT type1:Test
                AND NOT artifact2:Util
            RETURN
                artifact1, type1, artifact2, type2
        ]]></cypher>
    </constraint>

    <constraint id="my-rules:TypesShouldUseImplSuffixWithRestraint">
        <requiresConcept refId="my-rules:TypeMetadata" />
        <requiresConcept refId="my-rules:Test" />
        <requiresConcept refId="my-rules:HibernateSearch" />
        <description>
            The 'Impl' suffix should only be used when naming classes that are the only implementation
            for a given Hibernate Search interface (excluding its own subclasses).
            Whenever multiple implementations exist, a more meaningful name should be given to the implementation.
        </description>
        <cypher><![CDATA[
            // Hibernate Search classes named "<prefix>Impl"
            MATCH (implementingTypeEndingWithImpl:Class:HibernateSearch)
            WHERE
                implementingTypeEndingWithImpl.nameWithoutContainingTypeName =~ ".*Impl$"
            // The interface they implement, named "<prefix>" (if any)
            OPTIONAL MATCH (implementingTypeEndingWithImpl)-[:IMPLEMENTS|EXTENDS *]->(implementedType:Interface:HibernateSearch)
            WHERE
                implementingTypeEndingWithImpl.nameWithoutContainingTypeName = (implementedType.nameWithoutContainingTypeName + "Impl")
            // All the implementing types that do not extend implementingTypeEndingWithImpl
            OPTIONAL MATCH (topLevelImplementingType:Class)-[:IMPLEMENTS|EXTENDS *]->(implementedType)
            WHERE
                NOT topLevelImplementingType:Test // Ignore stubs
                AND NOT (topLevelImplementingType)-[:EXTENDS *]->(implementingTypeEndingWithImpl)
            WITH implementingTypeEndingWithImpl, implementedType, count(distinct topLevelImplementingType) AS topLevelImplementingTypeCount
            WHERE
                implementedType IS NULL OR topLevelImplementingTypeCount > 1
            RETURN implementingTypeEndingWithImpl, implementedType
        ]]></cypher>
    </constraint>


    <constraint id="my-rules:AbstractTypesShouldUseAbstractPrefix">
        <requiresConcept refId="my-rules:TypeMetadata" />
        <requiresConcept refId="my-rules:HibernateSearch" />
        <description>
            The 'Abstract' prefix should be used on abstract types.
            Exceptions are allowed when:
            - the abstract type doesn't implement any Hibernate Search interface, or just interfaces from a util module,
            in which case the abstract class is assumed to represent both the interface and part of the implementation.
            - the abstract type has only private constructors,
            in which case the type may just be a marker (to be used in annotations for example).
        </description>
        <cypher><![CDATA[
            // Abstract types without an "Abstract" prefix in their name that implement a meaningful interface
            MATCH (type:Type:HibernateSearch)-[:EXTENDS|IMPLEMENTS *]->(interface:Interface:HibernateSearch)
                    <-[:CONTAINS]-(interfaceArtifact:Maven:Artifact)
            WHERE
                type.abstract
                AND NOT type.nameWithoutContainingTypeName =~ "^Abstract.*"
                // Exceptions
                AND NOT interfaceArtifact.name STARTS WITH "hibernate-search-util-"
            // Exclude types that have only private constructors
            OPTIONAL MATCH (type)-[:DECLARES]->(nonPrivateConstructor:Constructor)
            WHERE
                nonPrivateConstructor.visibility <> 'private'
            WITH type, count(nonPrivateConstructor) = 0 AS hasOnlyPrivateConstructors
            WHERE
                NOT hasOnlyPrivateConstructors
            RETURN type
        ]]></cypher>
    </constraint>

    <constraint id="my-rules:TypesExtendingTypeFromAnotherModuleMustHaveModuleSpecificKeywordInName">
        <requiresConcept refId="my-rules:TypeMetadata" />
        <requiresConcept refId="my-rules:Anonymous" />
        <requiresConcept refId="my-rules:Generated" />
        <requiresConcept refId="my-rules:Test" />
        <requiresConcept refId="my-rules:HibernateSearch" />
        <requiresConcept refId="my-rules:ArtifactMetadata" />
        <description>
            Types extending/implementing a Hibernate Search type from another module must have a module-specific keyword in their name,
            either at the very start or just after "Abstract".
            This allows to more easily understand which module a given type comes from.
            Exceptions are allowed when:
            - the misnamed type is an anonymous type, a generated type or a test type;
            - or the misnamed type is an inner/nested type named "Builder" and its parent type does use the module-specific keyword;
            - or the implemented type is in a util module,
            in which case the implemented interface may just be a detail.
        </description>
        <cypher><![CDATA[
            MATCH (misnamedTypeArtifact:Maven:Artifact)-[:CONTAINS]->(misnamedType:Type)
                    -[:IMPLEMENTS|EXTENDS *]->
                    (externalParentType:Type:HibernateSearch)<-[:CONTAINS]-(externalParentTypeArtifact:Maven:Artifact)
            WHERE
                misnamedTypeArtifact <> externalParentTypeArtifact
                // Abstract<Keyword><something> or <Keyword><something>
                // Ignore the containing type for inner/nested types
                AND NOT misnamedType.nameWithoutContainingTypeName =~ ("^(Abstract)?\\Q" + misnamedTypeArtifact.moduleSpecificKeyword + "\\E.*")
                // Exceptions
                AND NOT misnamedType:Anonymous
                AND NOT misnamedType:Generated
                AND NOT misnamedType:Test
                AND NOT (
                        misnamedType.nameWithoutContainingTypeName = "Builder"
                        AND misnamedType.name =~ ("^(Abstract)?\\Q" + misnamedTypeArtifact.moduleSpecificKeyword + "\\E.*")
                )
                AND NOT externalParentTypeArtifact.name STARTS WITH "hibernate-search-util-"
                AND NOT externalParentTypeArtifact.name STARTS WITH "hibernate-search-util-"
            RETURN misnamedTypeArtifact.moduleSpecificKeyword, misnamedType, externalParentType
        ]]></cypher>
    </constraint>

    <constraint id="my-rules:TypeNamesShouldBeUniqueInInterdependentModules">
        <requiresConcept refId="java:Deprecated" />
        <requiresConcept refId="my-rules:TypeMetadata" />
        <requiresConcept refId="my-rules:HibernateSearch" />
        <requiresConcept refId="my-rules:Api" />
        <requiresConcept refId="my-rules:Spi" />
        <requiresConcept refId="my-rules:Impl" />
        <description>
            The simple (non-qualified) name of public Hibernate Search types should be unique.
            Exceptions are only allowed when the two types sharing an identical name:
            - are located in two modules that do not depend on each other
            - or are deprecated (at least one of them)
            - or are both nested types.
        </description>
        <cypher><![CDATA[
            MATCH (artifact1:Maven:Artifact)-[:DEPENDS_ON *0]->(artifact2:Maven:Artifact)
            MATCH (artifact1:Maven:Artifact)-[:CONTAINS]->(type1:Type:HibernateSearch:Public)
            MATCH (artifact2:Maven:Artifact)-[:CONTAINS]->(type2:Type:HibernateSearch:Public)
            WHERE
                type1 <> type2
                AND type1.nameWithoutContainingTypeName = type2.nameWithoutContainingTypeName
                AND NOT (type1.name =~ ".*\\$.*" AND type2.name =~ ".*\\$.*")
                AND NOT (type1:Deprecated OR type2:Deprecated)
            RETURN
                type1, type2
        ]]></cypher>
    </constraint>

    <group id="default">
        <includeConstraint refId="my-rules:PublicTypesMayNotExtendInternalTypes" />
        <includeConstraint refId="my-rules:PublicMethodsMayNotExposeInternalTypes" />
        <includeConstraint refId="my-rules:PublicFieldsMayNotExposeInternalTypes" />
        <includeConstraint refId="my-rules:APITypesMayNotExtendSPITypes" />
        <includeConstraint refId="my-rules:APIMethodsMayNotExposeSPITypes" />
        <includeConstraint refId="my-rules:APIFieldsMayNotExposeSPITypes" />
        <includeConstraint refId="my-rules:TypesMayNotDependOnImplementationTypeFromOtherModules" />
        <includeConstraint refId="my-rules:TypesShouldUseImplSuffixWithRestraint" />
        <includeConstraint refId="my-rules:AbstractTypesShouldUseAbstractPrefix" />
        <includeConstraint refId="my-rules:TypesExtendingTypeFromAnotherModuleMustHaveModuleSpecificKeywordInName" />
        <includeConstraint refId="my-rules:TypeNamesShouldBeUniqueInInterdependentModules" />
    </group>

</jqa:jqassistant-rules>
