<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~ Hibernate Search, full-text search for your domain model
 ~
 ~ License: GNU Lesser General Public License (LGPL), version 2.1 or later
 ~ See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
  -->
<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/analysis/rules/schema/v1.0">

    <concept id="my-rules:Spi">
        <description>
            Contributes the :Spi label to SPI types
        </description>
        <cypher><![CDATA[
            MATCH
                (type:Type)
            WHERE
                type.fqn =~ ".*\\.spi\\..*"
            SET
                type:Spi, type:Public
            RETURN
                type
        ]]></cypher>
    </concept>

    <concept id="my-rules:Impl">
        <description>
            Contributes the :Impl label to implementation types
        </description>
        <cypher><![CDATA[
            MATCH
                (type:Type)
            WHERE
                type.fqn =~ ".*\\.impl\\..*"
            SET
                type:Impl
            RETURN
                type
        ]]></cypher>
    </concept>

    <concept id="my-rules:Test">
        <description>
            Contributes the :Test label to :Type nodes that exist for test purposes only.
        </description>
        <cypher><![CDATA[
            MATCH
                (type:Type)<-[:CONTAINS]-(artifact:Maven:Artifact)
            WHERE
                artifact.type = "test-jar"
                OR artifact.name =~ "hibernate-search-integrationtest-.*"
                OR artifact.name =~ "hibernate-search-util-internal-test.*"
                OR artifact.name =~ "hibernate-search-util-internal-integrationtest.*"
            SET
                type:Test
            RETURN
                artifact
        ]]></cypher>
    </concept>

    <concept id="my-rules:Api">
        <requiresConcept refId="my-rules:Test" />
        <requiresConcept refId="my-rules:Spi" />
        <requiresConcept refId="my-rules:Impl" />
        <description>
            Contributes the :Api label to API types
        </description>
        <cypher><![CDATA[
            MATCH
                (type:Type)
            WHERE
                NOT type:Test
                AND NOT type:Impl
                AND NOT type:Spi
            SET
                type:Api, type:Public
            RETURN
                type
        ]]></cypher>
    </concept>

    <concept id="my-rules:HibernateSearch">
        <description>
            Contributes the :HibernateSearch label to :Maven:Artifact and :Type nodes from Hibernate Search.
        </description>
        <cypher><![CDATA[
            MATCH
                (type:Type)<-[:CONTAINS]-(artifact:Maven:Artifact)
            WHERE
                artifact.name =~ "hibernate-search-.*"
            SET
                artifact:HibernateSearch,
                type:HibernateSearch
            RETURN
                type
        ]]></cypher>
    </concept>

    <concept id="my-rules:InternalArtifacts">
        <requiresConcept refId="my-rules:HibernateSearch" />
        <description>
            Contributes the :Internal label to strictly internal :Maven:Artifact nodes.
        </description>
        <cypher><![CDATA[
            MATCH
                (artifact:Maven:Artifact:HibernateSearch)
            WHERE
                artifact.type = "test-jar"
                OR artifact.name =~ ".*-integrationtest-.*"
                OR artifact.name =~ ".*-internal-.*"
            SET
                artifact:Internal
            RETURN
                artifact
        ]]></cypher>
    </concept>

    <constraint id="my-rules:PublicTypesMayNotExtendInternalTypes">
        <requiresConcept refId="my-rules:Api" />
        <requiresConcept refId="my-rules:Spi" />
        <requiresConcept refId="my-rules:Impl" />
        <description>API/SPI types must not extend/implement internal types.</description>
        <cypher><![CDATA[
            MATCH
                (type:Type:Public)-[:EXTENDS|:IMPLEMENTS]->(supertype:Type:Impl)
            RETURN
                type
        ]]></cypher>
    </constraint>

    <constraint id="my-rules:PublicMethodsMayNotExposeInternalTypes">
        <requiresConcept refId="my-rules:Api" />
        <requiresConcept refId="my-rules:Spi" />
        <requiresConcept refId="my-rules:Impl" />
        <description>API/SPI methods must not expose internal types.</description>
        <cypher><![CDATA[
            // return values
            MATCH
                (type:Type:Public)-[:DECLARES]->(method)-[:RETURNS]->(returntype:Type:Impl)
            WHERE
                (method.visibility="public" OR method.visibility="protected")
            RETURN
                method

            // parameters
            UNION ALL
            MATCH
                (type:Type:Public)-[:DECLARES]->(method)-[:HAS]->(parameter)-[:OF_TYPE]->(parametertype:Type:Impl)
            WHERE
                (method.visibility="public" OR method.visibility="protected")
            RETURN
                method
        ]]></cypher>
    </constraint>

    <constraint id="my-rules:PublicFieldsMayNotExposeInternalTypes">
        <requiresConcept refId="my-rules:Api" />
        <requiresConcept refId="my-rules:Spi" />
        <requiresConcept refId="my-rules:Impl" />
        <description>API/SPI fields must not expose internal types.</description>
        <cypher><![CDATA[
            MATCH
                (type:Type:Public)-[:DECLARES]->(field)-[:OF_TYPE]->(fieldtype:Type:Impl)
            WHERE
                (field.visibility="public" OR field.visibility="protected")
            RETURN
                field
        ]]></cypher>
    </constraint>

    <constraint id="my-rules:APITypesMayNotExtendSPITypes">
        <requiresConcept refId="my-rules:Api" />
        <requiresConcept refId="my-rules:Spi" />
        <description>API types must not extend/implement SPI types.</description>
        <cypher><![CDATA[
            MATCH
                (type:Type:Api)-[:EXTENDS|:IMPLEMENTS]->(supertype:Type:Spi)
            RETURN
                type
        ]]></cypher>
    </constraint>

    <constraint id="my-rules:APIMethodsMayNotExposeSPITypes">
        <requiresConcept refId="my-rules:Api" />
        <requiresConcept refId="my-rules:Spi" />
        <description>API methods must not expose SPI types.</description>
        <cypher><![CDATA[
            // return values
            MATCH
                (type:Type:Api)-[:DECLARES]->(method)-[:RETURNS]->(returntype:Type:Spi)
            WHERE
                (method.visibility="public" OR method.visibility="protected")
                // Exclude extensions from SPI leak rules: they are *meant* to allow SPI leaks
                AND NOT type.name =~ ".*Extension"
            RETURN
                method

            // parameters
            UNION ALL
            MATCH
                (type:Type:Api)-[:DECLARES]->(method)-[:HAS]->(parameter)-[:OF_TYPE]->(parametertype:Type:Spi)
            WHERE
                (method.visibility="public" OR method.visibility="protected")
                // Exclude extensions from SPI leak rules: they are *meant* to allow SPI leaks
                AND NOT type.name =~ ".*Extension"
            RETURN
                method
        ]]></cypher>
    </constraint>

    <constraint id="my-rules:APIFieldsMayNotExposeSPITypes">
        <requiresConcept refId="my-rules:Api" />
        <requiresConcept refId="my-rules:Spi" />
        <description>API fields must not expose SPI types.</description>
        <cypher><![CDATA[
            MATCH
                (type:Type:Api)-[:DECLARES]->(field)-[:OF_TYPE]->(fieldtype:Type:Spi)
            WHERE
                (field.visibility="public" OR field.visibility="protected")
            RETURN
                field
        ]]></cypher>
    </constraint>

    <constraint id="my-rules:TypesMayNotDependOnImplementationTypeFromOtherModules">
        <requiresConcept refId="my-rules:InternalArtifacts" />
        <requiresConcept refId="my-rules:Test" />
        <requiresConcept refId="my-rules:Impl" />
        <description>
            Types must not depend on implementation types from other modules.
            SPIs must be used for such dependencies.
            Exceptions are allowed only when the dependency type is in an internal module,
            or the depending type is a test type.
        </description>
        <cypher><![CDATA[
            MATCH (artifact1:Maven:Artifact)-[:CONTAINS]->(type1:Type)-[:DEPENDS_ON]->
                (type2:Type:Impl)<-[:CONTAINS]-(artifact2:Maven:Artifact)
            WHERE
                artifact1 <> artifact2
                // Exceptions
                AND NOT type1:Test
                AND NOT artifact2:Internal
            RETURN
                artifact1, type1, artifact2, type2
        ]]></cypher>
    </constraint>

    <group id="default">
        <includeConstraint refId="my-rules:PublicTypesMayNotExtendInternalTypes" />
        <includeConstraint refId="my-rules:PublicMethodsMayNotExposeInternalTypes" />
        <includeConstraint refId="my-rules:PublicFieldsMayNotExposeInternalTypes" />
        <includeConstraint refId="my-rules:APITypesMayNotExtendSPITypes" />
        <includeConstraint refId="my-rules:APIMethodsMayNotExposeSPITypes" />
        <includeConstraint refId="my-rules:APIFieldsMayNotExposeSPITypes" />
        <includeConstraint refId="my-rules:TypesMayNotDependOnImplementationTypeFromOtherModules" />
    </group>

</jqa:jqassistant-rules>
