<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~ Hibernate Search, full-text search for your domain model
 ~
 ~ License: GNU Lesser General Public License (LGPL), version 2.1 or later
 ~ See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
  -->
<!-- child.project.url.inherit.append.path is weird but necessary to have correct URLs in flattened POMs,
     see XSD for more info. -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"
         child.project.url.inherit.append.path="false">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.hibernate.search</groupId>
    <artifactId>hibernate-search-parent</artifactId>
    <version>7.0.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>Hibernate Search Root POM</name>
    <description>Hibernate Search Root POM</description>

    <url>http://hibernate.org/search/</url>

    <inceptionYear>2006</inceptionYear>

    <issueManagement>
        <system>JIRA</system>
        <url>https://hibernate.atlassian.net/browse/HSEARCH</url>
    </issueManagement>

    <!-- The various child.*.append.path are weird but necessary to have correct URLs in flattened POMs,
         see XSD for more info. -->
    <scm child.scm.connection.inherit.append.path="false"
         child.scm.developerConnection.inherit.append.path="false"
         child.scm.url.inherit.append.path="false">
        <connection>scm:git:git://github.com/hibernate/hibernate-search.git</connection>
        <developerConnection>scm:git:git@github.com:hibernate/hibernate-search.git</developerConnection>
        <url>http://github.com/hibernate/hibernate-search</url>
        <tag>HEAD</tag>
    </scm>

    <organization>
        <name>Hibernate</name>
        <url>http://www.hibernate.org</url>
    </organization>

    <licenses>
        <license>
            <name>GNU Lesser General Public License v2.1 or later</name>
            <url>http://www.opensource.org/licenses/LGPL-2.1</url>
            <comments>See also: http://hibernate.org/license</comments>
        </license>
    </licenses>

    <ciManagement>
        <system>Jenkins</system>
        <url>https://ci.hibernate.org/job/hibernate-search/</url>
    </ciManagement>

    <developers>
        <developer>
            <id>epbernard</id>
            <name>Emmanuel Bernard</name>
            <email>emmanuel@hibernate.org</email>
            <organization>Red Hat, Inc.</organization>
            <url>http://in.relation.to/emmanuel-bernard/</url>
        </developer>
        <developer>
            <id>hardy.ferentschik</id>
            <name>Hardy Ferentschik</name>
            <email>hferents@redhat.com</email>
            <organization>Red Hat, Inc.</organization>
            <url>http://in.relation.to/hardy-ferentschik/</url>
        </developer>
        <developer>
            <id>sannegrinovero</id>
            <name>Sanne Grinovero</name>
            <email>sanne@hibernate.org</email>
            <organization>Red Hat, Inc.</organization>
            <url>http://in.relation.to/sanne-grinovero/</url>
        </developer>
        <developer>
            <id>gunnar.morling</id>
            <name>Gunnar Morling</name>
            <email>gunnar@hibernate.org</email>
            <organization>Red Hat, Inc.</organization>
            <url>http://in.relation.to/gunnar-morling/</url>
        </developer>
        <developer>
            <id>davide.dalto</id>
            <name>Davide D'Alto</name>
            <email>davide@hibernate.org</email>
            <organization>Red Hat, Inc.</organization>
            <url>http://in.relation.to/davide-dalto/</url>
        </developer>
        <developer>
            <id>guillaume.smet</id>
            <name>Guillaume Smet</name>
            <email>guillaume@hibernate.org</email>
            <organization>Red Hat, Inc.</organization>
            <url>http://in.relation.to/guillaume-smet/</url>
        </developer>
        <developer>
            <id>yoann.rodiere</id>
            <name>Yoann Rodi√®re</name>
            <email>yoann@hibernate.org</email>
            <organization>Red Hat, Inc.</organization>
            <url>http://in.relation.to/yoann-rodiere/</url>
        </developer>
        <developer>
            <id>fabio.ercoli</id>
            <name>Fabio Massimo Ercoli</name>
            <email>fabio@hibernate.org</email>
            <organization>Red Hat, Inc.</organization>
            <url>http://in.relation.to/fabio-massimo-ercoli/</url>
        </developer>
        <developer>
            <id>mincong-h</id>
            <name>Mincong Huang</name>
            <email>mincong.h@gmail.com</email>
            <url>http://mincong-h.github.io</url>
        </developer>
    </developers>

    <mailingLists>
        <mailingList>
            <name>Hibernate Announcements</name>
            <post>hibernate-announce@lists.jboss.org</post>
            <subscribe>https://lists.jboss.org/mailman/listinfo/hibernate-announce</subscribe>
            <unsubscribe>https://lists.jboss.org/mailman/listinfo/hibernate-announce</unsubscribe>
            <archive>http://lists.jboss.org/pipermail/hibernate-dev/</archive>
        </mailingList>
        <mailingList>
            <name>Hibernate Commit Notifications</name>
            <post>hibernate-commits@lists.jboss.org</post>
            <subscribe>https://lists.jboss.org/mailman/listinfo/hibernate-commits</subscribe>
            <unsubscribe>https://lists.jboss.org/mailman/listinfo/hibernate-commits</unsubscribe>
            <archive>http://lists.jboss.org/pipermail/hibernate-commits/</archive>
        </mailingList>
        <mailingList>
            <name>Hibernate Developers</name>
            <post>hibernate-dev@lists.jboss.org</post>
            <subscribe>https://lists.jboss.org/mailman/listinfo/hibernate-dev</subscribe>
            <unsubscribe>https://lists.jboss.org/mailman/listinfo/hibernate-dev</unsubscribe>
            <archive>http://lists.jboss.org/pipermail/hibernate-dev/</archive>
            <otherArchives>
                <otherArchive>http://www.mail-archive.com/hibernate-dev%40lists.jboss.org/index.html</otherArchive>
            </otherArchives>
        </mailingList>
        <mailingList>
            <name>Hibernate Issue Notifications</name>
            <post>hibernate-issues@lists.jboss.org</post>
            <subscribe>https://lists.jboss.org/mailman/listinfo/hibernate-issues</subscribe>
            <unsubscribe>https://lists.jboss.org/mailman/listinfo/hibernate-issues</unsubscribe>
            <archive>http://lists.jboss.org/pipermail/hibernate-issues/</archive>
        </mailingList>
    </mailingLists>

    <modules>
        <module>bom/public</module>
        <module>build/parents/relocation</module>
        <module>build/parents/build</module>
        <module>build/enforcer</module>
        <module>build/config</module>
        <module>build/parents/internal</module>
        <module>util/internal/test/common</module>
        <module>util/internal/test/orm</module>
        <module>build/parents/public</module>
        <module>util/common</module>
        <module>engine</module>
        <module>backend/lucene</module>
        <module>backend/elasticsearch</module>
        <module>backend/elasticsearch-aws</module>
        <module>mapper/pojo-base</module>
        <module>mapper/pojo-standalone</module>
        <module>mapper/orm</module>
        <module>mapper/orm-outbox-polling</module>
        <module>mapper/orm-coordination-outbox-polling</module>
        <module>mapper/orm-batch-jsr352/core</module>
        <module>mapper/orm-batch-jsr352/jberet</module>
        <module>mapper/orm-jakarta-batch/core</module>
        <module>mapper/orm-jakarta-batch/jberet</module>
        <module>v5migrationhelper/engine</module>
        <module>v5migrationhelper/orm</module>
        <module>util/internal/integrationtest</module>
        <module>build/parents/integrationtest</module>
        <module>integrationtest</module>
        <module>documentation</module>
    </modules>

    <properties>
        <!--
             Version to be used as baseline for API/SPI change reports,
             and for the migration guide
          -->
        <version.org.hibernate.search.previous-stable>6.2.0.CR1</version.org.hibernate.search.previous-stable>

        <!-- Build settings -->

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!-- JDK version required for the build; we target 11 but require at least 17 for the build -->
        <jdk.min.version>17</jdk.min.version>
        <!-- The lowest supported version of Java for applications using Hibernate Search -->
        <!-- Set statically, independently from the current JDK: we want our code to comply with this version -->
        <java-version.main.release>11</java-version.main.release>
        <java-version.main.compiler.java_home>${java.home}</java-version.main.compiler.java_home>
        <java-version.main.compiler>${java-version.main.compiler.java_home}/bin/javac</java-version.main.compiler>
        <!-- The version of test bytecode, useful for testing compatibility with newer JDKs -->
        <!-- Set to the expected version of the JDK running Maven by default, but overridden on CI -->
        <java-version.test.release>${jdk.min.version}</java-version.test.release>
        <java-version.test.compiler.java_home>${java.home}</java-version.test.compiler.java_home>
        <java-version.test.compiler>${java-version.test.compiler.java_home}/bin/javac</java-version.test.compiler>
        <!-- IMPORTANT: For Java 8, this must be the path to the JDK, not to the JRE -->
        <java-version.test.launcher.java_home>${java-version.test.compiler.java_home}</java-version.test.launcher.java_home>
        <java-version.test.launcher>${java-version.test.launcher.java_home}/bin/java</java-version.test.launcher>

        <!--
             The absolute path to the root project directory.
             This property is set by the build-helper plugin.
             We initialize it to some crude, potentially wrong value,
             because the Sonar Maven plugin uses this property indirectly,
             but ignores any change made by other plugins.
             This default value is the best we can do without the help of a Maven plugin.

             Useful resources:
              - https://www.mojohaus.org/build-helper-maven-plugin/rootlocation-mojo.html
          -->
        <rootProject.directory>${user.dir}</rootProject.directory>
        <!--
            The absolute path to an empty subdirectory of the root project.
            This is used in places where we need a path to an existing, empty directory,
            such as when fooling Sonar into thinking there is no "main" source in a project.
         -->
        <rootProject.emptySubdirectory>${rootProject.directory}/.empty</rootProject.emptySubdirectory>

        <!-- Maven version required for the build -->
        <!--
             WARNING: Do not forget to call 'mvn wrapper:wrapper'
             when you update this property!
         -->
        <maven.min.version>3.9.4</maven.min.version>

        <!-- Set this through a property so that it can be overridden from the commandline -->
        <maven.compiler.failOnWarning>true</maven.compiler.failOnWarning>

        <maven.compiler.release>${java-version.main.release}</maven.compiler.release>
        <maven.compiler.testRelease>${java-version.test.release}</maven.compiler.testRelease>

        <!-- Also set source/target, because several other plugins rely on this and don't understand release -->
        <maven.compiler.source>${maven.compiler.release}</maven.compiler.source>
        <maven.compiler.target>${maven.compiler.release}</maven.compiler.target>
        <maven.compiler.testSource>${maven.compiler.testRelease}</maven.compiler.testSource>
        <maven.compiler.testTarget>${maven.compiler.testRelease}</maven.compiler.testTarget>

        <!-- Plugin versions -->
        <version.clean.plugin>3.3.1</version.clean.plugin>
        <version.install.plugin>3.1.1</version.install.plugin>
        <version.enforcer.plugin>3.4.0</version.enforcer.plugin>
        <version.project-info.plugin>3.4.5</version.project-info.plugin>
        <version.japicmp.plugin>0.18.0</version.japicmp.plugin>
        <version.nexus-staging.plugin>1.6.13</version.nexus-staging.plugin>
        <version.deploy.plugin>3.1.1</version.deploy.plugin>
        <version.gpg.plugin>3.1.0</version.gpg.plugin>
        <version.flatten-maven-plugin>1.5.0</version.flatten-maven-plugin>
        <version.assembly.plugin>3.6.0</version.assembly.plugin>
        <version.buildhelper.plugin>3.4.0</version.buildhelper.plugin>
        <version.checkstyle.plugin>3.3.0</version.checkstyle.plugin>
        <version.bundle.plugin>5.1.9</version.bundle.plugin>
        <!-- Needing 3.6.2 at least because of MCOMPILER-294 -->
        <version.compiler.plugin>3.11.0</version.compiler.plugin>
        <version.dependency.plugin>3.6.0</version.dependency.plugin>
        <!-- Check dependencies for security vulnerabilities -->
        <version.dependency-check.plugin>8.4.0</version.dependency-check.plugin>
        <version.exec.plugin>3.1.0</version.exec.plugin>
        <version.forbiddenapis.plugin>3.5.1</version.forbiddenapis.plugin>
        <version.jandex.plugin>3.1.5</version.jandex.plugin>
        <version.maven.injection.plugin>1.0.2</version.maven.injection.plugin>
        <version.jar.plugin>3.3.0</version.jar.plugin>
        <version.javadoc.plugin>3.6.0</version.javadoc.plugin>
        <version.jdeps.plugin>0.5.1</version.jdeps.plugin>
        <version.processor.plugin>4.5</version.processor.plugin>
        <version.resources.plugin>3.3.1</version.resources.plugin>
        <version.shade.plugin>3.5.1</version.shade.plugin>
        <version.source.plugin>3.3.0</version.source.plugin>
        <!-- Surefire versions are a minefield of bugs: be careful with upgrades -->
        <version.surefire.plugin>3.1.2</version.surefire.plugin>
        <version.surefire.plugin.java-version.asm>9.5</version.surefire.plugin.java-version.asm>
        <version.jacoco.plugin>0.8.10</version.jacoco.plugin>
        <version.com.buschmais.jqassistant.plugin>2.0.7</version.com.buschmais.jqassistant.plugin>
        <version.docker.maven.plugin>0.43.4</version.docker.maven.plugin>
        <version.moditect.plugin>1.0.0.Final</version.moditect.plugin>
        <version.sonar.plugin>3.10.0.2594</version.sonar.plugin>
        <version.scripting.plugin>3.0.0</version.scripting.plugin>
        <version.org.apache.groovy.groovy-jsr223>4.0.13</version.org.apache.groovy.groovy-jsr223>
        <version.com.puppycrawl.tools.checkstyle>10.9.3</version.com.puppycrawl.tools.checkstyle>
        <version.versions.plugin>2.16.1</version.versions.plugin>
        <version.maven-wrapper-plugin>3.2.0</version.maven-wrapper-plugin>
        <version.impsort-maven-plugin>1.9.0</version.impsort-maven-plugin>
        <version.formatter-maven-plugin>2.23.0</version.formatter-maven-plugin>
        <version.org.eclipse.m2e.lifecycle-mapping>1.0.0</version.org.eclipse.m2e.lifecycle-mapping>
        <version.sisu-maven-plugin>0.9.0.M2</version.sisu-maven-plugin>
        <gitflow-incremental-builder.version>4.5.1</gitflow-incremental-builder.version>

        <!-- Repository Deployment URLs -->

        <ossrh.releases.repo.id>ossrh</ossrh.releases.repo.id>
        <ossrh.releases.repo.url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</ossrh.releases.repo.url>
        <ossrh.releases.repo.baseUrl>https://oss.sonatype.org/</ossrh.releases.repo.baseUrl>
        <ossrh.snapshots.repo.id>ossrh</ossrh.snapshots.repo.id>
        <ossrh.snapshots.repo.url>https://oss.sonatype.org/content/repositories/snapshots</ossrh.snapshots.repo.url>

        <!--
            We don't want to publish or sign any modules by default.
            Specific modules will override the setting at their own level.
        -->
        <deploy.skip>true</deploy.skip>

        <!-- Can be overridden by subprojects if dependency convergence cannot be achieved -->
        <enforcer.dependencyconvergence.skip>false</enforcer.dependencyconvergence.skip>

        <!-- Maven Central repository -->

        <mavencentral.repo.url>https://repo.maven.apache.org/maven2/</mavencentral.repo.url>

        <!-- Eclipse repository (for the ECJ compiler, disabled by default) -->

        <eclipse.repo.id>eclipse-staging</eclipse.repo.id>
        <eclipse.repo.url>https://repo.eclipse.org/content/repositories/eclipse-staging/</eclipse.repo.url>
        <!--
                Options to compile with the Eclipse compiler when building with maven (not with the IDE).
                See profile "compiler-eclipse".
                Note the version of ECJ is overridden because the one bundled with the latest plexus-compiler version
                is outdated and leads to compilation errors.
         -->
        <version.org.codehaus.plexus.plexus-compiler.compiler-eclipse>2.13.0</version.org.codehaus.plexus.plexus-compiler.compiler-eclipse>
        <version.org.eclipse.jdt.ecj>3.35.0</version.org.eclipse.jdt.ecj>

        <!-- Asciidoctor -->

        <version.asciidoctor.plugin>2.2.4</version.asciidoctor.plugin>
        <version.org.hibernate.infra.hibernate-asciidoctor-theme>2.0.0.Final</version.org.hibernate.infra.hibernate-asciidoctor-theme>
        <version.org.asciidoctor.asciidoctorj>2.5.10</version.org.asciidoctor.asciidoctorj>
        <version.org.asciidoctor.asciidoctorj-pdf>2.3.9</version.org.asciidoctor.asciidoctorj-pdf>

        <!--
            Defines what to do with dependency management section of the flattened pom.
            We'd like to keep the section for the BOMs (since it is the BOM's only purpose).
            But in case of other published modules, we only need the dependencies themselves and not the management section.
            By default, we want to preserve the section and property references to be replaced with values.
        -->
        <flatten-maven-plugin.dependencyManagement.action>resolve</flatten-maven-plugin.dependencyManagement.action>

        <!-- Overridden in profiles to disable the plugin (which doesn't have a 'skip' property...) -->
        <injection-plugin.phase>compile</injection-plugin.phase>

        <javadoc.generate.jar.phase>none</javadoc.generate.jar.phase>

        <!-- Test settings -->

        <!-- Properties overridden in profiles to disable certain tests that only work with specific Java versions -->
        <!-- These are only used in integration tests, hence the default to "none", which is overridden in integration tests -->
        <java-version.test.java17.add-main-source-phase.default>none</java-version.test.java17.add-main-source-phase.default>
        <java-version.test.java17.add-main-source-phase>${java-version.test.java17.add-main-source-phase.default}</java-version.test.java17.add-main-source-phase>
        <!-- These are used in all modules -->
        <java-version.test.java17.add-test-source-phase>generate-test-sources</java-version.test.java17.add-test-source-phase>

        <!--
            This is an explicit setting to control compiler plugin execution for the no `-parameters` flag case.
            Needed as when `testIncludes` doesn't match any test classes, it brings all test sources and re-compiles them.
         -->
        <maven.compiler.testSources.noParameterCompilation.skip>true</maven.compiler.testSources.noParameterCompilation.skip>
        <java-version.test.java17.noParameters.skip>${maven.compiler.testSources.noParameterCompilation.skip}</java-version.test.java17.noParameters.skip>

        <!-- Container images for various integration tests -->
        <!-- The latest version of Elasticsearch tested against by default -->
        <version.org.elasticsearch.latest>8.10.2</version.org.elasticsearch.latest>
        <test.elasticsearch.version>${version.org.elasticsearch.latest}</test.elasticsearch.version>

        <test.elasticsearch.run.elastic.skip>true</test.elasticsearch.run.elastic.skip>
        <test.elasticsearch.run.elastic.image.name>elastic/elasticsearch</test.elasticsearch.run.elastic.image.name>
        <test.elasticsearch.run.elastic.image.tag>${test.elasticsearch.version}</test.elasticsearch.run.elastic.image.tag>

        <test.elasticsearch.run.opensearch.skip>true</test.elasticsearch.run.opensearch.skip>
        <test.elasticsearch.run.opensearch.image.name>opensearchproject/opensearch</test.elasticsearch.run.opensearch.image.name>
        <test.elasticsearch.run.opensearch.image.tag>${test.elasticsearch.version}</test.elasticsearch.run.opensearch.image.tag>

        <!-- Run containers for additional ORM databases -->
        <test.database.run.skip>true</test.database.run.skip>
        <!-- PostgreSQL -->
        <!-- See https://hub.docker.com/_/postgres -->
        <test.database.run.postgres.skip>true</test.database.run.postgres.skip>
        <test.database.run.postgres.image.name>postgres</test.database.run.postgres.image.name>
        <test.database.run.postgres.image.tag>15.1</test.database.run.postgres.image.tag>
        <!-- MariaDB -->
        <!-- See https://hub.docker.com/_/mariadb -->
        <test.database.run.mariadb.skip>true</test.database.run.mariadb.skip>
        <test.database.run.mariadb.image.name>mariadb</test.database.run.mariadb.image.name>
        <test.database.run.mariadb.image.tag>10.10.2</test.database.run.mariadb.image.tag>
        <!-- MySQL -->
        <!-- See https://hub.docker.com/_/mysql -->
        <test.database.run.mysql.skip>true</test.database.run.mysql.skip>
        <test.database.run.mysql.image.name>mysql</test.database.run.mysql.image.name>
        <test.database.run.mysql.image.tag>8.0.31</test.database.run.mysql.image.tag>
        <!-- DB2 -->
        <!-- See https://hub.docker.com/r/ibmcom/db2 -->
        <test.database.run.db2.skip>true</test.database.run.db2.skip>
        <test.database.run.db2.image.name>ibmcom/db2</test.database.run.db2.image.name>
        <test.database.run.db2.image.tag>11.5.8.0</test.database.run.db2.image.tag>
        <!-- Oracle -->
        <!-- See https://hub.docker.com/r/gvenzl/oracle-xe -->
        <test.database.run.oracle.skip>true</test.database.run.oracle.skip>
        <test.database.run.oracle.image.name>gvenzl/oracle-xe</test.database.run.oracle.image.name>
        <test.database.run.oracle.image.tag>21.3.0-slim-faststart</test.database.run.oracle.image.tag>
        <!-- MS SQL Server -->
        <!-- See https://hub.docker.com/_/microsoft-mssql-server -->
        <test.database.run.mssql.skip>true</test.database.run.mssql.skip>
        <test.database.run.mssql.image.name>mcr.microsoft.com/mssql/server</test.database.run.mssql.image.name>
        <test.database.run.mssql.image.tag>2019-CU18-ubuntu-20.04</test.database.run.mssql.image.tag>
        <!-- CockroachDB -->
        <!-- See https://hub.docker.com/r/cockroachdb/cockroach/tags -->
        <test.database.run.cockroachdb.skip>true</test.database.run.cockroachdb.skip>
        <test.database.run.cockroachdb.image.name>cockroachdb/cockroach</test.database.run.cockroachdb.image.name>
        <test.database.run.cockroachdb.image.tag>v23.1.4</test.database.run.cockroachdb.image.tag>

        <!-- Set empty default values to avoid Maven leaving property references (${...}) when it doesn't find a value -->

        <surefire.jvm.args.memory>-Xmx512m -Xms128m</surefire.jvm.args.memory>
        <surefire.jvm.args.misc>-Djdk.attach.allowAttachSelf=true</surefire.jvm.args.misc>
        <!-- JVM args to be customized depending on the Java version -->
        <surefire.jvm.args.java-version></surefire.jvm.args.java-version>
        <!-- JVM args generated by JaCoCo -->
        <surefire.jvm.args.jacoco></surefire.jvm.args.jacoco>
        <failsafe.jvm.args.jacoco></failsafe.jvm.args.jacoco>
        <!-- JVM args to be customized by each Maven module -->
        <surefire.jvm.args.module></surefire.jvm.args.module>
        <surefire.jvm.args.module.add-opens></surefire.jvm.args.module.add-opens>
        <!--
             Pass these properties as system properties to be able to switch to
             a different database without re-compiling the hibernate.properties file
             (which is located in a dependency of the integration tests modules)
         -->
        <failsafe.jvm.args.hibernate-orm></failsafe.jvm.args.hibernate-orm>
        <!-- Database profile jdbc java arguments -->
        <failsafe.jvm.args.jdbc></failsafe.jvm.args.jdbc>
        <!-- Argument passed from the command line -->
        <test.launcher.args></test.launcher.args>
        <surefire.jvm.args>${surefire.jvm.args.memory} ${surefire.jvm.args.misc} ${surefire.jvm.args.java-version} ${surefire.jvm.args.module} ${surefire.jvm.args.jacoco} ${test.launcher.args}</surefire.jvm.args>
        <failsafe.jvm.args>${surefire.jvm.args.memory} ${surefire.jvm.args.misc} ${surefire.jvm.args.java-version} ${surefire.jvm.args.module} ${failsafe.jvm.args.jacoco} ${failsafe.jvm.args.hibernate-orm} ${failsafe.jvm.args.jdbc} ${test.launcher.args}</failsafe.jvm.args>

        <!-- Disable integration tests selectively. To be set in specific profile, e.g. for a specific JDK version. -->
        <failsafe.spring.skip>false</failsafe.spring.skip>

        <!-- This allows us to distinguish between multiple executions of the same test in test reports. -->
        <surefire.reportNameSuffix>${surefire.module}-${surefire.integration}-${surefire.environment}</surefire.reportNameSuffix>
        <!-- This should be set from the command line by CI jobs that execute the same tests in multiple environments -->
        <surefire.environment>default</surefire.environment>
        <!-- This should be set in modules that re-execute tests imported from a dependency (using <dependenciesToScan>)
             to differentiate multiple executions of the same tests in multiple modules. -->
        <surefire.module>default</surefire.module>
        <!-- This should be set in modules that transform Hibernate Search code for a different integration
             (Jakarta EE, ORM 6, ...). -->
        <surefire.integration>default</surefire.integration>

        <!-- Formatting -->
        <format.skip>false</format.skip>
        <goal.impsort-maven-plugin>sort</goal.impsort-maven-plugin>
        <goal.formatter-maven-plugin>format</goal.formatter-maven-plugin>

        <!-- Sonar options -->
        <!--
            We want to take into account coverage data from integration tests from other projects as well.
            This requires to use a single destination file for ITs, because:
             - Integration tests cover code from other modules.
             - The Sonar plugin computes coverage when inspecting each module,
               and by default only takes into account JaCoCo coverage reports from the inspected module.
               Thus it ignores some relevant ITs by default.
             - Even when configured, the Sonar plugin only accept an *explicit* list of JaCoCo coverage reports
               (no wildcards).
               Thus we cannot easily configure the Sonar plugin to inspect JaCoCo coverage reports from other modules,
               unless we somehow aggregate all of the coverage data into a single, shared JaCoCo coverage report.
            The chosen solution was to make the "reports" module invoke jacoco's "report-aggregate" goal
            to create a single aggregate report, and configure sonar to only inspect that file.

            Useful resources to understand what is going on (caution, not everything is up-to-date):
             - https://docs.sonarqube.org/display/SONAR/Analysis+Parameters
             - https://docs.sonarqube.org/display/PLUG/Usage+of+JaCoCo+with+Java+Plugin
             - https://www.devcon5.ch/en/blog/2015/05/29/multi-module-integration-test-coverage-sonar-jacoco/
             - http://javamemento.blogspot.fr/2016/02/sonar-jacoco-maven-multi-module.html
             - https://github.com/SonarSource/sonar-scanning-examples/blob/master/sonarqube-scanner-maven/pom.xml
             - https://stackoverflow.com/a/49528226/6692043
             - https://www.eclemma.org/jacoco/trunk/doc/report-aggregate-mojo.html
             - Not relevant anymore, but we used to merge *.exec files: https://www.eclemma.org/jacoco/trunk/doc/merge-mojo.html
         -->
        <sonar.coverage.jacoco.xmlReportPaths>${rootProject.directory}/build/reports/target/site/jacoco-aggregate/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>
        <!--
            Exclude build code and integration tests defined in the main source (utils, Showcases, Backend TCK)
            from coverage computation.
         -->
        <sonar.coverage.exclusions>
            **/org/hibernate/checkstyle/**,
            **/org/hibernate/search/build/enforcer/**,
            **/org/hibernate/search/util/impl/test/**,
            **/org/hibernate/search/util/impl/integrationtest/**,
            **/org/hibernate/search/integrationtest/**
        </sonar.coverage.exclusions>
        <!--
            Exclude build code, unit tests and integration tests from duplication analysis.
         -->
        <sonar.cpd.exclusions>
            **/org/hibernate/checkstyle/**,
            **/org/hibernate/search/build/enforcer/**,
            **/src/test/java/**,
            **/org/hibernate/search/integrationtest/**
        </sonar.cpd.exclusions>
    </properties>

    <build>
        <defaultGoal>install</defaultGoal>
        <pluginManagement>
            <plugins>
                <!--
                    Clean and install plugins will be called from the root,
                    so we want to make sure that their versions are aligned
                 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>${version.clean.plugin}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>${version.install.plugin}</version>
                </plugin>
                <!--
                    We want to do some custom enforcer rules on the public BOM,
                 `  hence we manage enforcer version in the root pom.
                 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>${version.enforcer.plugin}</version>
                    <executions>
                        <execution>
                            <id>enforce-common-rules</id>
                            <goals>
                                <goal>enforce</goal>
                            </goals>
                            <configuration>
                                <rules>
                                    <requireJavaVersion>
                                        <version>[${jdk.min.version},)</version>
                                    </requireJavaVersion>
                                    <requireMavenVersion>
                                        <version>${maven.min.version}</version>
                                    </requireMavenVersion>
                                    <banDuplicatePomDependencyVersions />
                                </rules>
                            </configuration>
                        </execution>
                        <execution>
                            <id>enforce-dependency-convergence</id>
                            <goals>
                                <goal>enforce</goal>
                            </goals>
                            <configuration>
                                <skip>${enforcer.dependencyconvergence.skip}</skip>
                                <rules>
                                    <DependencyConvergence />
                                </rules>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <!-- We want to deploy the public BOM, so we manage this plugin in the root pom. -->
                <plugin>
                    <groupId>org.sonatype.plugins</groupId>
                    <artifactId>nexus-staging-maven-plugin</artifactId>
                    <version>${version.nexus-staging.plugin}</version>
                    <configuration>
                        <skipNexusStagingDeployMojo>${deploy.skip}</skipNexusStagingDeployMojo>
                    </configuration>
                </plugin>
                <!-- We want to disable this plugin as soon as possible, hence we manage it in the root pom. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>${version.deploy.plugin}</version>
                </plugin>
                <!-- Public BOM must be also signed, so we manage this plugin in the root pom. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-gpg-plugin</artifactId>
                    <version>${version.gpg.plugin}</version>
                    <executions>
                        <execution>
                            <id>sign-artifacts</id>
                            <phase>verify</phase>
                            <goals>
                                <goal>sign</goal>
                            </goals>
                            <configuration>
                                <skip>${deploy.skip}</skip>
                                <homedir>${env.RELEASE_GPG_HOMEDIR}</homedir>
                                <passphrase>${env.RELEASE_GPG_PASSPHRASE}</passphrase>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <!-- Public BOM will be flattened too, so we manage this plugin in the root pom. -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>flatten-maven-plugin</artifactId>
                    <version>${version.flatten-maven-plugin}</version>
                    <configuration>
                        <outputDirectory>${project.build.directory}</outputDirectory>
                        <!-- Keep things like url, inceptionYear, authors...
                             everything that's required by the OSSRH Maven repository -->
                        <flattenMode>ossrh</flattenMode>
                    </configuration>
                    <executions>
                        <execution>
                            <id>flatten-pom</id>
                            <phase>process-resources</phase>
                            <goals>
                                <goal>flatten</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-wrapper-plugin</artifactId>
                    <version>${version.maven-wrapper-plugin}</version>
                    <configuration>
                        <mavenVersion>${maven.min.version}</mavenVersion>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>com.github.marschall</groupId>
                    <artifactId>jdeps-maven-plugin</artifactId>
                    <version>${version.jdeps.plugin}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${version.resources.plugin}</version>
                    <configuration>
                        <!-- Don't overwrite existing files if the destination files are newer.
                             Necessary to avoid rebuilding JARs when executing Maven twice,
                             which has dramatic cascading effects as it leads to recompiling
                             sources for all depending projects. -->
                        <overwrite>false</overwrite>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${version.jar.plugin}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${version.compiler.plugin}</version>
                    <configuration>
                        <fork>true</fork>
                        <showWarnings>true</showWarnings>
                        <showDeprecation>true</showDeprecation>
                        <failOnWarning>${maven.compiler.failOnWarning}</failOnWarning>
                        <release>${maven.compiler.release}</release>
                        <testRelease>${maven.compiler.testRelease}</testRelease>
                        <encoding>UTF-8</encoding>
                        <compilerArgs>
                            <compilerArg>-Xlint:unchecked</compilerArg>
                        </compilerArgs>
                    </configuration>
                    <executions>
                        <execution>
                            <id>default-compile</id>
                            <configuration>
                                <executable>${java-version.main.compiler}</executable>
                            </configuration>
                        </execution>
                        <execution>
                            <id>default-testCompile</id>
                            <configuration>
                                <proc>none</proc>
                                <executable>${java-version.test.compiler}</executable>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.bsc.maven</groupId>
                    <artifactId>maven-processor-plugin</artifactId>
                    <version>${version.processor.plugin}</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>${version.assembly.plugin}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${version.javadoc.plugin}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>${version.source.plugin}</version>
                    <executions>
                        <execution>
                            <id>attach-sources</id>
                            <phase>verify</phase>
                            <goals>
                                <goal>jar-no-fork</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>${version.dependency.plugin}</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>${version.exec.plugin}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.felix</groupId>
                    <artifactId>maven-bundle-plugin</artifactId>
                    <extensions>true</extensions>
                    <version>${version.bundle.plugin}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>${version.shade.plugin}</version>
                    <configuration>
                        <createDependencyReducedPom>false</createDependencyReducedPom>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>${version.buildhelper.plugin}</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>${version.versions.plugin}</version>
                </plugin>
                <plugin>
                    <groupId>de.thetaphi</groupId>
                    <artifactId>forbiddenapis</artifactId>
                    <version>${version.forbiddenapis.plugin}</version>
                    <configuration>
                        <!-- if the used Java version is too new, don't fail, just do nothing: -->
                        <failOnUnsupportedJava>false</failOnUnsupportedJava>
                        <failOnMissingClasses>false</failOnMissingClasses>
                        <ignoreSignaturesOfMissingClasses>true</ignoreSignaturesOfMissingClasses>
                        <suppressAnnotations>
                            <suppressAnnotation>javax.annotation.processing.Generated</suppressAnnotation>
                            <suppressAnnotation>org.hibernate.search.util.common.annotation.impl.SuppressForbiddenApis</suppressAnnotation>
                            <suppressAnnotation>org.hibernate.search.util.impl.test.annotation.SuppressForbiddenApis</suppressAnnotation>
                        </suppressAnnotations>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-checkstyle-plugin</artifactId>
                    <version>${version.checkstyle.plugin}</version>
                </plugin>
                <plugin>
                    <groupId>org.moditect</groupId>
                    <artifactId>moditect-maven-plugin</artifactId>
                    <version>${version.moditect.plugin}</version>
                </plugin>
                <plugin>
                    <groupId>org.jboss.maven.plugins</groupId>
                    <artifactId>maven-injection-plugin</artifactId>
                    <version>${version.maven.injection.plugin}</version>
                    <executions>
                        <execution>
                            <phase>${injection-plugin.phase}</phase>
                            <goals>
                                <goal>bytecode</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>io.smallrye</groupId>
                    <artifactId>jandex-maven-plugin</artifactId>
                    <version>${version.jandex.plugin}</version>
                    <executions>
                        <execution>
                            <id>make-index</id>
                            <goals>
                                <goal>jandex</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!--
                    Test configuration
                 -->

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${version.surefire.plugin}</version>
                    <configuration>
                        <forkCount>1</forkCount>
                        <reuseForks>true</reuseForks>
                        <redirectTestOutputToFile>true</redirectTestOutputToFile>
                        <runOrder>alphabetical</runOrder>
                        <!--
                             Stack traces for failing tests are useless if trimStackTrace = true (the default).
                             See https://issues.apache.org/jira/browse/SUREFIRE-1226?focusedCommentId=16187391&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-16187391
                         -->
                        <trimStackTrace>false</trimStackTrace>
                        <jvm>${java-version.test.launcher}</jvm>
                        <argLine>${surefire.jvm.args}</argLine>
                        <reportNameSuffix>${surefire.reportNameSuffix}</reportNameSuffix>
                    </configuration>
                    <dependencies>
                        <!--
                             Force tests to execute with JUnit 4
                             See http://maven.apache.org/surefire/maven-failsafe-plugin/examples/junit.html
                         -->
                        <dependency>
                            <groupId>org.apache.maven.surefire</groupId>
                            <artifactId>surefire-junit47</artifactId>
                            <version>${version.surefire.plugin}</version>
                        </dependency>
                        <!--
                             maven-surefire-plugin and maven-failsafe-plugin use an older version of ASM
                             that cannot handle Java 15+ bytecode.
                             Let's upgrade that dependency and hope for the best;
                             if it doesn't work, the build is very likely to fail and we'll know about it.
                         -->
                        <dependency>
                            <groupId>org.ow2.asm</groupId>
                            <artifactId>asm</artifactId>
                            <version>${version.surefire.plugin.java-version.asm}</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${version.surefire.plugin}</version>
                    <configuration>
                        <forkCount>1</forkCount>
                        <reuseForks>true</reuseForks>
                        <redirectTestOutputToFile>true</redirectTestOutputToFile>
                        <runOrder>alphabetical</runOrder>
                        <!--
                             Stack traces for failing tests are useless if trimStackTrace = true (the default).
                             See https://issues.apache.org/jira/browse/SUREFIRE-1226?focusedCommentId=16187391&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-16187391
                         -->
                        <trimStackTrace>false</trimStackTrace>
                        <jvm>${java-version.test.launcher}</jvm>
                        <argLine>${failsafe.jvm.args}</argLine>
                        <reportNameSuffix>${surefire.reportNameSuffix}</reportNameSuffix>
                        <!-- Catch configuration problems that could cause the plugin
                             to not detect any tests.
                             For example, in the past, we've had:
                             - JUnit 5 Jupiter creeping up our classpath through transitive dependencies,
                               causing the maven-failsafe-plugin to simply switch to JUnit 5 mode and
                               ignore all JUnit 4 tests.
                             - Misconfigured "source copy" artifacts (e.g. jakarta) that ended up not copying tests
                               from the original module at all.
                         -->
                        <failIfNoTests>true</failIfNoTests>
                    </configuration>
                    <dependencies>
                        <!--
                             Force tests to execute with JUnit 4
                             See http://maven.apache.org/surefire/maven-failsafe-plugin/examples/junit.html
                         -->
                        <dependency>
                            <groupId>org.apache.maven.surefire</groupId>
                            <artifactId>surefire-junit47</artifactId>
                            <version>${version.surefire.plugin}</version>
                        </dependency>
                        <!--
                             maven-surefire-plugin and maven-failsafe-plugin use an older version of ASM
                             that cannot handle Java 15+ bytecode.
                             Let's upgrade that dependency and hope for the best;
                             if it doesn't work, the build is very likely to fail and we'll know about it.
                         -->
                        <dependency>
                            <groupId>org.ow2.asm</groupId>
                            <artifactId>asm</artifactId>
                            <version>${version.surefire.plugin.java-version.asm}</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>io.fabric8</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>${version.docker.maven.plugin}</version>
                </plugin>
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${version.jacoco.plugin}</version>
                </plugin>
                <plugin>
                    <groupId>org.asciidoctor</groupId>
                    <artifactId>asciidoctor-maven-plugin</artifactId>
                    <version>${version.asciidoctor.plugin}</version>
                    <configuration>
                        <!-- Enabled to validate internal links -->
                        <enableVerbose>true</enableVerbose>
                        <!-- Abort the build if something seems wrong -->
                        <logHandler>
                            <failIf>
                                <severity>WARN</severity>
                            </failIf>
                        </logHandler>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>org.asciidoctor</groupId>
                            <artifactId>asciidoctorj</artifactId>
                            <version>${version.org.asciidoctor.asciidoctorj}</version>
                        </dependency>
                        <dependency>
                            <groupId>org.asciidoctor</groupId>
                            <artifactId>asciidoctorj-pdf</artifactId>
                            <version>${version.org.asciidoctor.asciidoctorj-pdf}</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>org.sonarsource.scanner.maven</groupId>
                    <artifactId>sonar-maven-plugin</artifactId>
                    <version>${version.sonar.plugin}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-scripting-plugin</artifactId>
                    <version>${version.scripting.plugin}</version>
                    <executions>
                        <execution>
                            <id>list-container-images</id>
                            <configuration>
                                <engineName>groovy</engineName>
                                <!--
                                     Note that expressions ('${...}') are evaluated by Maven before the script is
                                     interpreted by the Groovy interpreter.
                                     That's the only way to access profile-defined properties,
                                     since accessing project.properties within the script will ignore profiles.
                                 -->
                                <script><![CDATA[
                                    def images = []
                                    def isFalseString = { string -> !string || !Boolean.parseBoolean( string ) }
                                    if ( isFalseString( '${test.elasticsearch.run.elastic.skip}' ) ) {
                                        images += '${test.elasticsearch.run.elastic.image.name}:${test.elasticsearch.run.elastic.image.tag}'
                                    }
                                    if ( isFalseString( '${test.elasticsearch.run.opensearch.skip}' ) ) {
                                        images += '${test.elasticsearch.run.opensearch.image.name}:${test.elasticsearch.run.opensearch.image.tag}'
                                    }
                                    if ( isFalseString( '${test.database.run.postgres.skip}' ) ) {
                                        images += '${test.database.run.postgres.image.name}:${test.database.run.postgres.image.tag}'
                                    }
                                    if ( isFalseString( '${test.database.run.mariadb.skip}' ) ) {
                                        images += '${test.database.run.mariadb.image.name}:${test.database.run.mariadb.image.tag}'
                                    }
                                    if ( isFalseString( '${test.database.run.mysql.skip}' ) ) {
                                        images += '${test.database.run.mysql.image.name}:${test.database.run.mysql.image.tag}'
                                    }
                                    if ( isFalseString( '${test.database.run.db2.skip}' ) ) {
                                        images += '${test.database.run.db2.image.name}:${test.database.run.db2.image.tag}'
                                    }
                                    if ( isFalseString( '${test.database.run.oracle.skip}' ) ) {
                                        images += '${test.database.run.oracle.image.name}:${test.database.run.oracle.image.tag}'
                                    }
                                    if ( isFalseString( '${test.database.run.mssql.skip}' ) ) {
                                        images += '${test.database.run.mssql.image.name}:${test.database.run.mssql.image.tag}'
                                    }
                                    if ( isFalseString( '${test.database.run.cockroachdb.skip}' ) ) {
                                        images += '${test.database.run.cockroachdb.image.name}:${test.database.run.cockroachdb.image.tag}'
                                    }
                                    // Exclude images from non-dockerhub repositories
                                    new File('${containerImagesListFile}').append( images.findAll{ref -> !(ref ==~ /^(?!((.*\.)?docker\.io))[\w\d\.]+\/[\w\d\.]+\/[\w\d\.]+(:.+)?$/)}.join('\n') + '\n' )
                                ]]></script>
                            </configuration>
                        </execution>
                    </executions>
                    <dependencies>
                        <!-- ScriptEngines -->
                        <dependency>
                            <groupId>org.apache.groovy</groupId>
                            <artifactId>groovy-jsr223</artifactId>
                            <version>${version.org.apache.groovy.groovy-jsr223}</version> <!-- look for latest -->
                        </dependency>
                    </dependencies>
                </plugin>
                <!--
                   Code formatting configuration:
               -->
                <plugin>
                    <groupId>net.revelc.code</groupId>
                    <artifactId>impsort-maven-plugin</artifactId>
                    <version>${version.impsort-maven-plugin}</version>
                    <configuration>
                        <!-- store outside of target to speed up formatting when mvn clean is used -->
                        <cachedir>.cache/impsort-maven-plugin-${version.impsort-maven-plugin}</cachedir>
                        <groups>java.,javax.,jakarta.,org.hibernate., org.hibernate.testing., org.hibernate.test., org.junit., org.jboss., com., *</groups>
                        <staticGroups>*</staticGroups>
                        <!-- To make static imports go on top: -->
                        <staticAfter>false</staticAfter>
                        <skip>${format.skip}</skip>
                        <removeUnused>true</removeUnused>
                    </configuration>
                    <executions>
                        <execution>
                            <id>import-sorting</id>
                            <goals>
                                <goal>${goal.impsort-maven-plugin}</goal>
                            </goals>
                            <phase>process-sources</phase>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>net.revelc.code.formatter</groupId>
                    <artifactId>formatter-maven-plugin</artifactId>
                    <version>${version.formatter-maven-plugin}</version>
                    <dependencies>
                        <dependency>
                            <groupId>org.hibernate.search</groupId>
                            <artifactId>hibernate-search-build-config</artifactId>
                            <version>${project.version}</version>
                        </dependency>
                    </dependencies>
                    <configuration>
                        <!-- store outside of target to speed up formatting when mvn clean is used -->
                        <cachedir>.cache/formatter-maven-plugin-${version.formatter-maven-plugin}</cachedir>
                        <configFile>hibernate_search_style.xml</configFile>
                        <skip>${format.skip}</skip>
                        <removeTrailingWhitespace>true</removeTrailingWhitespace>
                    </configuration>
                    <executions>
                        <execution>
                            <id>code-formatting</id>
                            <goals>
                                <goal>${goal.formatter-maven-plugin}</goal>
                            </goals>
                            <phase>process-sources</phase>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.eclipse.sisu</groupId>
                    <artifactId>sisu-maven-plugin</artifactId>
                    <version>${version.sisu-maven-plugin}</version>
                </plugin>
                <plugin>
                    <groupId>io.github.gitflow-incremental-builder</groupId>
                    <artifactId>gitflow-incremental-builder</artifactId>
                    <version>${gitflow-incremental-builder.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <!-- Skip the deploy plugin explicitly: we use nexus-staging-maven-plugin instead -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <!--
                 Configure the nexus-staging-maven-plugin explicitly (without <extension>true</extension>)
                 in order to work around a problem in the "reports" module (see that module's POM for more info).
             -->
            <plugin>
                <groupId>org.sonatype.plugins</groupId>
                <artifactId>nexus-staging-maven-plugin</artifactId>
                <extensions>false</extensions><!-- This is essential: do not put true here -->
                <configuration>
                    <serverId>${ossrh.releases.repo.id}</serverId>
                    <!-- The following, by default, is only used for actual releases, not for snapshot deployments -->
                    <nexusUrl>${ossrh.releases.repo.baseUrl}</nexusUrl>
                    <!-- oss.sonatype.org has been very slow when closing repositories lately;
                         let's raise the timeout until we switch to s01.sonatype.org -->
                    <stagingProgressTimeoutMinutes>60</stagingProgressTimeoutMinutes>
                </configuration>
                <executions>
                    <execution>
                        <id>default-deploy</id>
                        <phase>deploy</phase>
                        <goals>
                            <!--
                                This will only put artifacts in a staging directory.
                                See the "reports" module for actual deployment, at the end of the build.
                             -->
                            <goal>deploy</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>exec-maven-plugin</artifactId>
                <groupId>org.codehaus.mojo</groupId>
                <executions>
                    <execution>
                        <id>print-java-main-compiler-version</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>${java-version.main.compiler}</executable>
                            <commandlineArgs>-version</commandlineArgs>
                            <inheritIo>true</inheritIo>
                        </configuration>
                    </execution>
                    <!-- This is necessary even if we have the above,
                         because javac -version doesn't print the full version for Early Access releases -->
                    <execution>
                        <id>print-java-main-compiler-java-version</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>${java-version.main.compiler.java_home}/bin/java</executable>
                            <commandlineArgs>-version</commandlineArgs>
                            <inheritIo>true</inheritIo>
                        </configuration>
                    </execution>
                    <execution>
                        <id>print-java-main-release-version</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>echo</executable>
                            <commandlineArgs>Main code compiled with -release ${maven.compiler.release}</commandlineArgs>
                            <inheritIo>true</inheritIo>
                            <workingDirectory>${rootProject.directory}/build/script</workingDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>print-java-test-compiler-version</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>${java-version.test.compiler}</executable>
                            <commandlineArgs>-version</commandlineArgs>
                            <inheritIo>true</inheritIo>
                        </configuration>
                    </execution>
                    <!-- This is necessary even if we have the above,
                         because javac -version doesn't print the full version for Early Access releases -->
                    <execution>
                        <id>print-java-test-compiler-java-version</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>${java-version.test.compiler.java_home}/bin/java</executable>
                            <commandlineArgs>-version</commandlineArgs>
                            <inheritIo>true</inheritIo>
                        </configuration>
                    </execution>
                    <execution>
                        <id>print-java-test-launcher-version</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>${java-version.test.launcher}</executable>
                            <commandlineArgs>-version</commandlineArgs>
                            <inheritIo>true</inheritIo>
                        </configuration>
                    </execution>
                    <execution>
                        <id>print-java-test-release-version</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>echo</executable>
                            <commandlineArgs>Tests compiled with -release ${maven.compiler.testRelease}</commandlineArgs>
                            <inheritIo>true</inheritIo>
                            <workingDirectory>${rootProject.directory}/build/script</workingDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>com.github.marschall</groupId>
                <artifactId>jdeps-maven-plugin</artifactId>
                <!--
                    Not enabling automatic executions; run:
                     > mvn jdeps:jdeps
                     to get a report.
                -->
                <configuration>
                    <!-- Allows to see which JRE profiles will be needed -->
                    <profile>true</profile>
                    <failOnWarning>true</failOnWarning>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>set-root-location-property</id>
                        <goals>
                            <goal>rootlocation</goal>
                        </goals>
                        <configuration>
                            <rootLocationProperty>rootProject.directory</rootLocationProperty>
                        </configuration>
                    </execution>
                    <execution>
                        <id>parse-project-version</id>
                        <goals>
                            <goal>parse-version</goal>
                        </goals>
                        <configuration>
                            <propertyPrefix>parsed-version.org.hibernate.search</propertyPrefix>
                            <versionString>${project.version}</versionString>
                        </configuration>
                    </execution>
                    <execution>
                        <id>parse-project-previous-stable-version</id>
                        <goals>
                            <goal>parse-version</goal>
                        </goals>
                        <configuration>
                            <propertyPrefix>parsed-version.org.hibernate.search.previous-stable</propertyPrefix>
                            <versionString>${version.org.hibernate.search.previous-stable}</versionString>
                        </configuration>
                    </execution>
                    <execution>
                        <id>add-main-source-java17</id>
                        <phase>${java-version.test.java17.add-main-source-phase}</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>src/main/java17</source>
                            </sources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>add-test-source-java17</id>
                        <phase>${java-version.test.java17.add-test-source-phase}</phase>
                        <goals>
                            <goal>add-test-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>src/test/java17</source>
                            </sources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>add-test-source-java17-noparameters</id>
                        <phase>${java-version.test.java17.add-test-source-phase}</phase>
                        <goals>
                            <goal>add-test-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>src/test/java17-noparameters</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <distributionManagement>
        <repository>
            <id>${ossrh.releases.repo.id}</id>
            <name>OSSRH Releases Repository</name>
            <url>${ossrh.releases.repo.url}</url>
        </repository>
        <snapshotRepository>
            <id>${ossrh.snapshots.repo.id}</id>
            <name>OSSRH Snapshots Repository</name>
            <url>${ossrh.snapshots.repo.url}</url>
        </snapshotRepository>
    </distributionManagement>

    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>${version.project-info.plugin}</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>index</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <plugin>
                <groupId>com.github.siom79.japicmp</groupId>
                <artifactId>japicmp-maven-plugin</artifactId>
                <version>${version.japicmp.plugin}</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>cmp-report</report>
                        </reports>
                    </reportSet>
                </reportSets>
                <configuration>
                    <skip>true</skip>
                    <oldVersion>
                        <dependency>
                            <groupId>org.hibernate.search</groupId>
                            <artifactId>${project.artifactId}</artifactId>
                            <version>${version.org.hibernate.search.previous-stable}</version>
                            <type>${project.packaging}</type>
                        </dependency>
                    </oldVersion>
                    <newVersion>
                        <file>
                            <path>
                                ${project.build.directory}/${project.artifactId}-${project.version}.${project.packaging}
                            </path>
                        </file>
                    </newVersion>
                    <parameter>
                        <onlyModified>true</onlyModified>
                        <excludes>
                            <exclude>org.hibernate.search.*.impl</exclude>
                        </excludes>
                        <accessModifier>public</accessModifier>
                        <!--
                            The next two should make sure that this report is not run for this POM-packaged parent module itself
                            That's not working, though, resulting a build failure. I'm thus setting skip to "true" below, which
                            needs to be overridden within those modules for which this report should be created
                        -->
                        <skipPomModules>true</skipPomModules>
                        <packagingSupporteds>
                            <packagingSupported>jar</packagingSupported>
                        </packagingSupporteds>
                    </parameter>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
    </reporting>

    <profiles>
        <profile>
            <id>dist</id>
            <modules>
                <module>distribution</module>
                <module>build/configuration-properties-collector</module>
            </modules>
        </profile>

        <profile>
            <id>release</id>
            <activation>
                <property>
                    <name>performRelease</name>
                    <value>true</value>
                </property>
            </activation>
            <properties>
                <!-- We want this execution to happen before moditect (which executes at package phase) -->
                <javadoc.generate.jar.phase>prepare-package</javadoc.generate.jar.phase>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>skip-checks</id>
            <properties>
                <enforcer.skip>true</enforcer.skip>
                <checkstyle.skip>true</checkstyle.skip>
                <format.skip>true</format.skip>
                <forbiddenapis.skip>true</forbiddenapis.skip>
            </properties>
        </profile>

        <profile>
            <id>testWithJdkSpecifiedExplicitly</id>
            <activation>
                <property>
                    <name>java-version.test.compiler.java_home</name>
                </property>
            </activation>
            <properties>
                <!-- ForbiddenAPIs uses the Maven JDK to resolve signatures,
                     which leads to some trouble when using a different JDK version to compile tests
                     (see https://hibernate.atlassian.net/browse/HSEARCH-4521)
                     Since the main build is supposed to catch all forbidden API invocations already,
                     we can safely disable ForbiddenAPIs in builds that target other JDKs. -->
                <forbiddenapis.skip>true</forbiddenapis.skip>
            </properties>
        </profile>

        <profile>
            <id>testWithJdk11</id>
            <activation>
                <property>
                    <name>java-version.test.release</name>
                    <value>11</value>
                </property>
            </activation>
            <properties>
                <!-- illegal-access=deny is not the default yet in JDK 11  -->
                <surefire.jvm.args.java-version>
                    --illegal-access=deny
                </surefire.jvm.args.java-version>
                <!-- Tests specific to Java 17+ won't work with JDK 11, so we disable them. -->
                <java-version.test.java17.add-main-source-phase>none</java-version.test.java17.add-main-source-phase>
                <java-version.test.java17.add-test-source-phase>none</java-version.test.java17.add-test-source-phase>
                <java-version.test.java17.noParameters.skip>true</java-version.test.java17.noParameters.skip>
            </properties>
        </profile>

        <profile>
            <id>testWithJdk20</id>
            <activation>
                <property>
                    <name>java-version.test.release</name>
                    <value>20</value>
                </property>
            </activation>
            <properties>
                <!-- impsort-maven-plugin doesn't work with JDK20 yet? -->
                <format.skip>true</format.skip>
            </properties>
        </profile>

        <profile>
            <id>testWithJdk21</id>
            <activation>
                <property>
                    <name>java-version.test.release</name>
                    <value>21</value>
                </property>
            </activation>
            <properties>
                <!-- impsort-maven-plugin doesn't work with JDK21 yet -->
                <format.skip>true</format.skip>
            </properties>
        </profile>

        <profile>
            <id>testWithJdk22</id>
            <activation>
                <property>
                    <name>java-version.test.release</name>
                    <value>22</value>
                </property>
            </activation>
            <properties>
                <!-- We need net.bytebuddy.experimental=true to make BytecodeEnhancementIT and mockito-based tests pass -->
                <surefire.jvm.args.java-version>
                    -Djdk.attach.allowAttachSelf=true
                    -Dnet.bytebuddy.experimental=true
                </surefire.jvm.args.java-version>
                <!-- Spring Boot 3 isn't ready for JDK22 yet -->
                <failsafe.spring.skip>true</failsafe.spring.skip>
                <!-- impsort-maven-plugin doesn't work with JDK22 yet -->
                <format.skip>true</format.skip>
            </properties>
        </profile>

        <profile>
            <id>compiler-eclipse</id>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <artifactId>maven-compiler-plugin</artifactId>
                            <configuration>
                                <compilerId>eclipse</compilerId>
                                <!-- ECJ doesn't seem to understand the "release" argument -->
                                <release></release>
                                <source>${maven.compiler.release}</source>
                                <target>${maven.compiler.release}</target>
                                <compilerArgs>
                                    <!-- Ignore warnings in generated code -->
                                    <compilerArg>-nowarn:[${project.build.directory}/generated-sources/apt]</compilerArg>
                                    <!-- For a list of warning categories that can be passed to -warn,
                                         see https://git.eclipse.org/c/jdt/eclipse.jdt.core.git/tree/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/messages.properties#n376
                                     -->
                                    <!-- Ignore warnings that we don't care about -->
                                    <compilerArg>-warn:-serial,intfAnnotation</compilerArg>
                                    <!-- Ignore warnings that give false positives with ecj (or are addressed by other tools) -->
                                    <compilerArg>-warn:-unusedImport,warningToken,unusedPrivate,enumSwitch</compilerArg>
                                </compilerArgs>
                            </configuration>
                            <executions>
                                <execution>
                                    <id>default-testCompile</id>
                                    <configuration>
                                        <compilerArgs combine.children="append">
                                            <!-- Ignore warnings that are too annoying for tests -->
                                            <compilerArg>-warn:-unused,resource</compilerArg>
                                        </compilerArgs>
                                    </configuration>
                                </execution>
                                <execution>
                                    <id>noparameters-testCompile</id>
                                    <configuration>
                                        <compilerArgs combine.children="append">
                                            <!-- Ignore warnings that are too annoying for tests -->
                                            <compilerArg>-warn:-unused,resource</compilerArg>
                                        </compilerArgs>
                                    </configuration>
                                </execution>
                            </executions>
                            <dependencies>
                                <dependency>
                                    <groupId>org.codehaus.plexus</groupId>
                                    <artifactId>plexus-compiler-api</artifactId>
                                    <version>${version.org.codehaus.plexus.plexus-compiler.compiler-eclipse}</version>
                                </dependency>
                                <dependency>
                                    <groupId>org.codehaus.plexus</groupId>
                                    <artifactId>plexus-compiler-manager</artifactId>
                                    <version>${version.org.codehaus.plexus.plexus-compiler.compiler-eclipse}</version>
                                </dependency>
                                <dependency>
                                    <groupId>org.codehaus.plexus</groupId>
                                    <artifactId>plexus-compiler-eclipse</artifactId>
                                    <version>${version.org.codehaus.plexus.plexus-compiler.compiler-eclipse}</version>
                                </dependency>
                                <dependency>
                                    <groupId>org.eclipse.jdt</groupId>
                                    <artifactId>ecj</artifactId>
                                    <version>${version.org.eclipse.jdt.ecj}</version>
                                </dependency>
                            </dependencies>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
            <pluginRepositories>
                <!--
                     This is needed to access pre-release versions of ECJ,
                     when bugs that affect us are fixed but not yet released.
                     It's been used in particular to get a fix for https://bugs.eclipse.org/bugs/show_bug.cgi?id=547807.
                     This configuration *MUST STAY IN A SPECIFIC PROFILE*,
                     otherwise it would "taint" projects that depend on Hibernate Search.
                 -->
                <pluginRepository>
                    <id>${eclipse.repo.id}</id>
                    <url>${eclipse.repo.url}</url>
                    <releases>
                        <enabled>true</enabled>
                        <updatePolicy>never</updatePolicy>
                    </releases>
                    <snapshots>
                        <enabled>false</enabled>
                    </snapshots>
                </pluginRepository>
            </pluginRepositories>
        </profile>

        <profile>
            <id>coverage</id>
            <properties>
                <!--
                    Caution, we use @{...} for late property evaluation here:
                    http://maven.apache.org/surefire/maven-surefire-plugin/faq.html#late-property-evaluation
                    This is necessary for Jacoco to work as expected.
                    However, we wrap the @{...} references into two early-evaluated properties
                    because in certain environments (IntelliJ IDEA), the use of late property evaluation
                    is not supported and breaks test execution.
                    This is because IntelliJ tries to parse the POM to retrieve the surefire/failsafe
                    argLine and pass them to the test execution directly,
                    but then fails to evaluate "@{...}" references, resulting in errors.
                    As a result, this profile will not work in IntelliJ,
                    but we don't need JaCoCo in IntelliJ anyway.
                 -->
                <surefire.jvm.args.jacoco>@{surefire.jvm.args.jacoco.lateEval}</surefire.jvm.args.jacoco>
                <failsafe.jvm.args.jacoco>@{failsafe.jvm.args.jacoco.lateEval}</failsafe.jvm.args.jacoco>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <configuration>
                            <excludes>
                                <exclude>**/*_$logger.class</exclude>
                                <exclude>**/*_$bundle.class</exclude>
                                <!-- Exclude DTOs generated by Avro -->
                                <exclude>org/hibernate/search/mapper/orm/coordination/outboxpolling/avro/generated/impl/**</exclude>
                            </excludes>
                        </configuration>
                        <executions>
                            <execution>
                                <id>jacoco-prepare-agent</id>
                                <goals>
                                    <goal>prepare-agent</goal>
                                </goals>
                                <configuration>
                                    <propertyName>surefire.jvm.args.jacoco.lateEval</propertyName>
                                </configuration>
                            </execution>
                            <execution>
                                <id>jacoco-prepare-prepare-agent-integration</id>
                                <!--
                                    This is necessary in order for the property to be set before we process resources,
                                    such as arquillian.xml in WildFly tests or maven.properties in OSGi tests.
                                 -->
                                <phase>initialize</phase>
                                <goals>
                                    <goal>prepare-agent-integration</goal>
                                </goals>
                                <configuration>
                                    <propertyName>failsafe.jvm.args.jacoco.lateEval</propertyName>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!--
           A profile executing jqassistant scanning and analysis for all relevant modules.
           Our rules are in build/jqassistant/rules.xml.
           See CONTRIBUTING.md for usage.
       -->
        <profile>
            <id>jqassistant</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.buschmais.jqassistant</groupId>
                        <artifactId>jqassistant-maven-plugin</artifactId>
                        <version>${version.com.buschmais.jqassistant.plugin}</version>
                        <configuration>
                            <configurationLocations>
                                <!-- Any JQAssistant configurations go in this yml file:  -->
                                <configurationLocation>build/jqassistant/.jqassistant.yml</configurationLocation>
                            </configurationLocations>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>scan</goal>
                                    <goal>analyze</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>owasp</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.owasp</groupId>
                        <artifactId>dependency-check-maven</artifactId>
                        <version>${version.dependency-check.plugin}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>aggregate</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>ci-sources-check</id>
            <properties>
                <goal.impsort-maven-plugin>check</goal.impsort-maven-plugin>
                <goal.formatter-maven-plugin>validate</goal.formatter-maven-plugin>
            </properties>
        </profile>

        <!-- A profile for CI when we've already built the whole tree but for some reason need
             to run Maven again, preferably without cleaning.
             Useful for example when we do `mvn clean verify -DskipITs` then `mvn verify -Dincremental`;
             the second execution needs this profile to fix a few things.
         -->
        <profile>
            <id>ci-rebuild</id>
            <properties>
                <!-- Don't inject code again if we already did a full build (we only do this in the engine).
                     Necessary to avoid rebuilding JARs when executing Maven twice,
                     which has dramatic cascading effects as it leads to recompiling
                     sources for all depending projects. -->
                <injection-plugin.phase>none</injection-plugin.phase>
                <!-- Once we've already built the main modules, we don't need to run Moditect a second time,
                     and doing so will actually lead to errors because Moditect worries about overwriting
                     module-info.class files. -->
                <moditect.skip>true</moditect.skip>
            </properties>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-surefire-plugin</artifactId>
                            <configuration>
                                <!-- This is to skip Surefire without skipping Failsafe -->
                                <skipTests>true</skipTests >
                            </configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>

        <profile>
            <id>IDEA</id>
            <!--
            Dependencies to allow easy project import in IntelliJ IDEA.
            These should not be listed as project dependencies to users
            but are necessary during compile time as they include the
            JBoss Logger annotation processor.
            -->
            <activation>
                <!-- This is a trick to have the profile automatically activated by IDEA -->
                <property>
                    <name>idea.maven.embedder.version</name>
                </property>
            </activation>
            <properties>
                <!-- Intellij IDEA only understands the main -release argument,
                     so we need to do this in order for tests to compile.
                     Here's the issue in the IDEA bug tracker: https://youtrack.jetbrains.com/issue/IDEA-85478
                     It's fixed in 2022.1 EAP 6, so hopefully we'll be able to get rid of this soon. -->
                <java-version.main.release>${java-version.test.release}</java-version.main.release>
                <!-- Dependency convergence checks seem to fail in IntelliJ IDEA,
                     for some reason. Maybe it's because of the two additional dependencies below.
                     Anyway, let's disable these checks so the build works correctly in IDEA. -->
                <enforcer.dependencyconvergence.skip>true</enforcer.dependencyconvergence.skip>
            </properties>
            <!-- See build parent POM for any additional IDEA-specific configurations. -->
        </profile>

        <profile>
            <id>eclipse</id>
            <activation>
                <property>
                    <!-- This is a trick to have the profile automatically activated by Eclipse -->
                    <name>m2e.version</name>
                </property>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <!--
                                This plugin's configuration is used in m2e only.
                                We want to configure this in a separate profile because the plugin doesn't really exist
                                and Maven will complain because it doesn't find it if executed outside of Eclipse.
                             -->
                            <groupId>org.eclipse.m2e</groupId>
                            <artifactId>lifecycle-mapping</artifactId>
                            <version>${version.org.eclipse.m2e.lifecycle-mapping}</version>
                            <configuration>
                                <lifecycleMappingMetadata>
                                    <pluginExecutions>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>org.apache.maven.plugins</groupId>
                                                <artifactId>maven-dependency-plugin</artifactId>
                                                <versionRange>[2.1,)</versionRange>
                                                <goals>
                                                    <goal>unpack</goal>
                                                    <goal>unpack-dependencies</goal>
                                                    <goal>build-classpath</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore />
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>org.apache.felix</groupId>
                                                <artifactId>maven-bundle-plugin</artifactId>
                                                <versionRange>[2.3.7,)</versionRange>
                                                <goals>
                                                    <goal>manifest</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore />
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>org.codehaus.mojo</groupId>
                                                <artifactId>build-helper-maven-plugin</artifactId>
                                                <versionRange>[1.9.1,)</versionRange>
                                                <goals>
                                                    <goal>parse-version</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore />
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>de.thetaphi</groupId>
                                                <artifactId>forbiddenapis</artifactId>
                                                <versionRange>[3.1,)</versionRange>
                                                <goals>
                                                    <goal>check</goal>
                                                    <goal>testCheck</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore />
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>
                                                    org.asciidoctor
                                                </groupId>
                                                <artifactId>
                                                    asciidoctor-maven-plugin
                                                </artifactId>
                                                <versionRange>
                                                    [2.2.1,)
                                                </versionRange>
                                                <goals>
                                                    <goal>
                                                        process-asciidoc
                                                    </goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore></ignore>
                                            </action>
                                        </pluginExecution>
                                    </pluginExecutions>
                                </lifecycleMappingMetadata>
                            </configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>

        <profile>
            <id>incremental</id>
            <activation>
                <property>
                    <name>incremental</name>
                </property>
            </activation>
            <properties>
                <!-- The *local* main, not refs/remotes/... -->
                <!-- This property is overridden in CI jobs to point to refs/remotes/...
                        so that CI build can find the sources to compare to. -->
                <gib.referenceBranch>main</gib.referenceBranch>
                <gib.disableSelectedProjectsHandling>true</gib.disableSelectedProjectsHandling>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.github.gitflow-incremental-builder</groupId>
                        <artifactId>gitflow-incremental-builder</artifactId>
                        <extensions>true</extensions>
                        <!-- https://github.com/gitflow-incremental-builder/gitflow-incremental-builder#configuration
                             General recap: Anything that is directly set in <configuration> cannot be redefined via '-D...'!
                             See also: https://github.com/gitflow-incremental-builder/gitflow-incremental-builder/issues/213 -->
                        <configuration>
                            <!-- pointless to attempt incremental build if something like mvnw was changed -->
                            <skipIfPathMatches>\.mvn[/\\].*|mvnw.*</skipIfPathMatches>
                            <!--
                                Let's ignore any changes in the files that do not affect documentation, classes, build resources
                                e.g. various readme or text files.

                                Use [/\\] for path separators because of Windows.
                            -->
                            <excludePathsMatching>[/\\][^/\\]*\.(md|txt)|[/\\]\..*|[/\\].*[/\\]README\.(md|txt)|[/\\]ci[/\\]dependency-update[/\\].*</excludePathsMatching>
                            <!-- The reports module always needs to be built, otherwise we don't generate
                                 some important reports like coverage reports -->
                            <forceBuildModules>hibernate-search-reports</forceBuildModules>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!--
             WARNING: this MUST be the very last profile,
             so that the "report" module is the very last module,
             in particular when deploying artifacts to a Nexus repository.
             See the "build/reports" module POM for more information.
         -->
        <profile>
            <id>build-reports-as-last-module</id>
            <activation>
                <property>
                    <name>!some.property.that.will.never.exist</name>
                </property>
            </activation>
            <modules>
                <module>build/reports</module>
            </modules>
        </profile>

        <!-- DO NOT ADD ANY PROFILE AFTER THIS: see above -->
    </profiles>
</project>
