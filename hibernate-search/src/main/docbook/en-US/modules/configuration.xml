<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~  Copyright (c) 2010, Red Hat, Inc. and/or its affiliates or third-party contributors as
  ~  indicated by the @author tags or express copyright attribution
  ~  statements applied by the authors.  All third-party contributions are
  ~  distributed under license by Red Hat, Inc.
  ~
  ~  This copyrighted material is made available to anyone wishing to use, modify,
  ~  copy, or redistribute it subject to the terms and conditions of the GNU
  ~  Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~  This program is distributed in the hope that it will be useful,
  ~  but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~  for more details.
  ~
  ~  You should have received a copy of the GNU Lesser General Public License
  ~  along with this distribution; if not, write to:
  ~  Free Software Foundation, Inc.
  ~  51 Franklin Street, Fifth Floor
  ~  Boston, MA  02110-1301  USA
  -->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../hsearch.ent">
%BOOK_ENTITIES;
]>
<chapter id="search-configuration">
  <title>Configuration</title>

  <section id="search-configuration-directory" revision="1">
    <title>Directory configuration</title>

    <para>Apache Lucene has a notion of a <classname>Directory</classname> to
    store the index files. The <classname>Directory</classname> implementation
    can be customized and Lucene comes bundled with a file system and an
    in-memory implementation. <classname>DirectoryProvider</classname> is the
    Hibernate Search abstraction around a Lucene
    <classname>Directory</classname> and handles the configuration and the
    initialization of the underlying Lucene resources. <xref
    linkend="directory-provider-table" /> shows the list of the directory
    providers available in Hibernate Search together with their corresponding
    options. </para>

    <para>To configure your <classname>DirectoryProvider</classname> you have
    to understand that each indexed entity is associated to a Lucene index
    (except of the case where multiple entities share the same index - <xref
    linkend="section-sharing-indexes" />). The name of the index is given by
    the <constant>index</constant> property of the
    <classname>@Indexed</classname> annotation. If the
    <constant>index</constant> property is not specified the fully qualified
    name of the indexed class will be used as name. </para>

    <para>Knowing the index name, you can configure the directory provider and
    any additional options by using the prefix
    <constant>hibernate.search.</constant><replaceable>&lt;indexname&gt;</replaceable>.
    The name <constant>default</constant>
    (<constant>hibernate.search.default</constant>) is reserved and can be
    used to define properties which apply to all indexes. <xref
    linkend="example-configuring-directory-providers" /> shows how
    <constant>hibernate.search.default.directory_provider</constant> is used
    to set the default directory provider to be the filesystem one.
    <constant>hibernate.search.default.indexBase</constant> sets then the
    default base directory for the indexes. As a result the index for the
    entity <classname>Status</classname> is created in
    <filename>/usr/lucene/indexes/org.hibernate.example.Status</filename>.</para>

    <para>The index for the <classname>Rule</classname> entity, however, is
    using an in-memory directory, because the default directory provider for
    this entity is overriden by the property
    <constant>hibernate.search.Rules.directory_provider</constant>.</para>

    <para>Finally the <classname>Action</classname> entity uses a custom
    directory provider <classname>CustomDirectoryProvider</classname>
    specified via
    <constant>hibernate.search.Actions.directory_provider</constant>.</para>

    <example>
      <title>Specifying the index name</title>

      <programlisting>package org.hibernate.example;

@Indexed
public class Status { ... }

@Indexed(index="Rules")
public class Rule { ... }

@Indexed(index="Actions")
public class Action { ... }</programlisting>
    </example>

    <example id="example-configuring-directory-providers">
      <title>Configuring directory providers</title>

      <programlisting>hibernate.search.default.directory_provider filesystem
hibernate.search.default.indexBase=/usr/lucene/indexes
hibernate.search.Rules.directory_provider ram
hibernate.search.Actions.directory_provider com.acme.hibernate.provider.CustomDirectoryProvider</programlisting>
    </example>

    <tip>
      <para>Using the described configuration scheme you can easily define
      common rules like the directory provider and base directory, and
      override those defaults later on on a per index basis.</para>
    </tip>

    <table id="directory-provider-table">
      <title>List of built-in
      <classname>DirectoryProvider</classname>s</title>

      <tgroup cols="3">
        <thead>
          <row>
            <entry align="center">Class or shortcut name</entry>

            <entry align="center">Description</entry>

            <entry align="center">Properties</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>ram</entry>

            <entry>Memory based directory, the directory will be uniquely
            identified (in the same deployment unit) by the
            <literal>@Indexed.index</literal> element</entry>

            <entry>none</entry>
          </row>

          <row>
            <entry>filesystem</entry>

            <entry>File system based directory. The directory used will be
            &lt;indexBase&gt;/&lt; indexName &gt;</entry>

            <entry><para><literal>indexBase</literal> : Base
            directory</para><para><literal>indexName</literal>: override
            @Indexed.index (useful for sharded
            indexes)</para><para><literal>locking_strategy</literal> :
            optional, see <xref
            linkend="search-configuration-directory-lockfactories" />
            </para><para><literal>filesystem_access_type</literal>: allows to
            determine the exact type of <classname>FSDirectory</classname>
            implementation used by this
            <classname>DirectoryProvider</classname>. Allowed values are
            <literal>auto</literal> (the default value, selects
            <classname>NIOFSDirectory</classname> on non Windows systems,
            <classname>SimpleFSDirectory</classname> on Windows),
            <literal>simple</literal>
            (<classname>SimpleFSDirectory</classname>), <literal>nio</literal>
            (<classname>NIOFSDirectory</classname>), <literal>mmap</literal>
            (<classname>MMapDirectory</classname>). Make sure to refer to
            Javadocs of these <classname>Directory</classname> implementations
            before changing this setting. Even though
            <classname>NIOFSDirectory</classname> or
            <classname>MMapDirectory</classname> can bring substantial
            performace boosts they also have their issues.</para></entry>
          </row>

          <row>
            <entry>filesystem-master</entry>

            <entry><para>File system based directory. Like
            <literal>filesystem</literal>. It also copies the index to a
            source directory (aka copy directory) on a regular basis.
            </para><para>The recommended value for the refresh period is (at
            least) 50% higher that the time to copy the information (default
            3600 seconds - 60 minutes).</para><para>Note that the copy is
            based on an incremental copy mechanism reducing the average copy
            time.</para><para>DirectoryProvider typically used on the master
            node in a JMS back end cluster.</para><para>The <literal>
            buffer_size_on_copy</literal> optimum depends on your operating
            system and available RAM; most people reported good results using
            values between 16 and 64MB.</para></entry>

            <entry><para><literal>indexBase</literal>: Base
            directory</para><para><literal>indexName</literal>: override
            @Indexed.index (useful for sharded
            indexes)</para><para><literal>sourceBase</literal>: Source (copy)
            base directory.</para><para><literal>source</literal>: Source
            directory suffix (default to <literal>@Indexed.index</literal>).
            The actual source directory name being
            <filename>&lt;sourceBase&gt;/&lt;source&gt;</filename>
            </para><para><literal>refresh</literal>: refresh period in second
            (the copy will take place every refresh
            seconds).</para><para><literal>buffer_size_on_copy</literal>: The
            amount of MegaBytes to move in a single low level copy
            instruction; defaults to
            16MB.</para><para><literal>locking_strategy</literal> : optional,
            see <xref
            linkend="search-configuration-directory-lockfactories" />
            </para><para><literal>filesystem_access_type</literal>: allows to
            determine the exact type of <classname>FSDirectory</classname>
            implementation used by this
            <classname>DirectoryProvider</classname>. Allowed values are
            <literal>auto</literal> (the default value, selects
            <classname>NIOFSDirectory</classname> on non Windows systems,
            <classname>SimpleFSDirectory</classname> on Windows),
            <literal>simple</literal>
            (<classname>SimpleFSDirectory</classname>), <literal>nio</literal>
            (<classname>NIOFSDirectory</classname>), <literal>mmap</literal>
            (<classname>MMapDirectory</classname>). Make sure to refer to
            Javadocs of these <classname>Directory</classname> implementations
            before changing this setting. Even though
            <classname>NIOFSDirectory</classname> or
            <classname>MMapDirectory</classname> can bring substantial
            performace boosts they also have their issues.</para></entry>
          </row>

          <row>
            <entry>filesystem-slave</entry>

            <entry><para>File system based directory. Like
            <literal>filesystem</literal>, but retrieves a master version
            (source) on a regular basis. To avoid locking and inconsistent
            search results, 2 local copies are kept. </para><para>The
            recommended value for the refresh period is (at least) 50% higher
            that the time to copy the information (default 3600 seconds - 60
            minutes).</para><para>Note that the copy is based on an
            incremental copy mechanism reducing the average copy
            time.</para><para>DirectoryProvider typically used on slave nodes
            using a JMS back end.</para><para>The <literal>
            buffer_size_on_copy</literal> optimum depends on your operating
            system and available RAM; most people reported good results using
            values between 16 and 64MB.</para></entry>

            <entry><para><literal>indexBase</literal>: Base
            directory</para><para><literal>indexName</literal>: override
            @Indexed.index (useful for sharded
            indexes)</para><para><literal>sourceBase</literal>: Source (copy)
            base directory.</para><para><literal>source</literal>: Source
            directory suffix (default to <literal>@Indexed.index</literal>).
            The actual source directory name being
            <filename>&lt;sourceBase&gt;/&lt;source&gt;</filename>
            </para><para><literal>refresh</literal>: refresh period in second
            (the copy will take place every refresh
            seconds).</para><para><literal>buffer_size_on_copy</literal>: The
            amount of MegaBytes to move in a single low level copy
            instruction; defaults to
            16MB.</para><para><literal>locking_strategy</literal> : optional,
            see <xref
            linkend="search-configuration-directory-lockfactories" />
            </para><para><literal>retry_marker_lookup</literal> : optional,
            default to 0. Defines how many times, we look for the marker files
            in the source directory before failing. Waiting 5 seconds between
            each try. </para><para><literal>filesystem_access_type</literal>:
            allows to determine the exact type of
            <classname>FSDirectory</classname> implementation used by this
            <classname>DirectoryProvider</classname>. Allowed values are
            <literal>auto</literal> (the default value, selects
            <classname>NIOFSDirectory</classname> on non Windows systems,
            <classname>SimpleFSDirectory</classname> on Windows),
            <literal>simple</literal>
            (<classname>SimpleFSDirectory</classname>), <literal>nio</literal>
            (<classname>NIOFSDirectory</classname>), <literal>mmap</literal>
            (<classname>MMapDirectory</classname>). Make sure to refer to
            Javadocs of these <classname>Directory</classname> implementations
            before changing this setting. Even though
            <classname>NIOFSDirectory</classname> or
            <classname>MMapDirectory</classname> can bring substantial
            performace boosts they also have their issues.</para></entry>
          </row>

          <row>
            <entry>infinispan</entry>

            <entry><para>Infinispan based directory. Use it to store the index
            in a distributed grid, making index changes visible to all
            elements of the cluster very quickly. Also see <xref
            linkend="infinispan-directories" /> for additional requirements
            and configuration settings. Infinispan needs a global
            configuration and additional dependencies; the settings defined
            here apply to each different index.</para></entry>

            <entry><para><literal>locking_cachename</literal>: name of the
            Infinispan cache to use to store
            locks.</para><para><literal>data_cachename</literal> : name of the
            Infinispan cache to use to store the largest data chunks; this
            area will contain the largest objects, use replication if you have
            enough memory or switch to distribution.</para>
            <para><literal>metadata_cachename</literal>: name of the
            Infinispan cache to use to store the metadata relating to the
            index; this data is rather small and read very often, it's
            recommended to have this cache setup using replication.</para>
            <para><literal>chunk_size</literal>: large files of the index are
            split in smaller chunks, you might want to set the highest value
            efficiently handled by your network. Networking tuning might be
            useful.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <tip>
      <para>If the built-in directory providers do not fit your needs, you can
      write your own directory provider by implementing the
      <classname>org.hibernate.store.DirectoryProvider</classname> interface.
      In this case, pass the fully qualified class name of your provider into
      the <literal>directory_provider</literal> property. You can pass any
      additional properties using the prefix
      <constant>hibernate.search.</constant><replaceable>&lt;indexname&gt;</replaceable>.</para>
    </tip>
  </section>

  <section id="search-configuration-directory-sharding" revision="1">
    <title>Sharding indexes</title>

    <para>In some cases it can be useful to split (shard) the indexed data of
    a given entity into several Lucene indexes.</para>

    <warning>
      <para> This solution is not recommended unless there is a pressing need.
      Searches will be slower as all shards have to be opened for a single
      search. Don't do it until you have a real use case!</para>
    </warning>

    <para>Possible use cases for sharding are:</para>

    <itemizedlist>
      <listitem>
        <para>A single index is so huge that index update times are slowing
        the application down.</para>
      </listitem>

      <listitem>
        <para>A typical search will only hit a sub-set of the index, such as
        when data is naturally segmented by customer, region or
        application.</para>
      </listitem>
    </itemizedlist>

    <para>By default sharding is not enabled unless the number of shards is
    configured. To do this use the
    <constant>hibernate.search.&lt;indexName&gt;.sharding_strategy.nbr_of_shards</constant>
    property as seen in <xref linkend="example-index-sharding" />. In this
    example 5 shards are enabled.</para>

    <example id="example-index-sharding">
      <title>Enabling index sharding</title>

      <programlisting>hibernate.search.&lt;indexName&gt;.sharding_strategy.nbr_of_shards 5</programlisting>
    </example>

    <para>Resposible for splitting the data into sub-indexes is the
    <classname>IndexShardingStrategy</classname>. The default sharding
    strategy splits the data according to the hash value of the id string
    representation (generated by the <classname>FieldBridge</classname>). This
    ensures a fairly balanced sharding. You can replace the default strategy
    by implementing a custom <classname>IndexShardingStrategy</classname>. To
    use your custom strategy you have to set the
    <constant>hibernate.search.&lt;indexName&gt;.sharding_strategy</constant>
    property.</para>

    <example>
      <title>Specifying a custom sharding strategy</title>

      <programlisting>hibernate.search.&lt;indexName&gt;.sharding_strategy my.shardingstrategy.Implementation</programlisting>
    </example>

    <para>The <classname> IndexShardingStrategy</classname> also allows for
    optimizing searches by selecting which shard to run the query against. By
    activating a filter (see <xref linkend="query-filter-shard" />), a
    sharding strategy can select a subset of the shards used to answer a query
    (<classname>IndexShardingStrategy.getDirectoryProvidersForQuery</classname>)
    and thus speed up the query execution.</para>

    <para>Each shard has an independent directory provider configuration. The
    <classname>DirectoryProvider</classname> index names for the Animal entity
    in <xref linkend="example-sharding-configuration" /> are
    <literal>Animal.0</literal> to <literal>Animal.4</literal>. In other
    words, each shard has the name of it's owning index followed by
    <constant>.</constant> (dot) and its index number (see also <xref
    linkend="search-configuration-directory" />).</para>

    <example id="example-sharding-configuration">
      <title>Sharding configuration for entity
      <classname>Animal</classname></title>

      <programlisting>hibernate.search.default.indexBase /usr/lucene/indexes

hibernate.search.Animal.sharding_strategy.nbr_of_shards 5
hibernate.search.Animal.directory_provider filesystem
hibernate.search.Animal.0.indexName Animal00
hibernate.search.Animal.3.indexBase /usr/lucene/sharded
hibernate.search.Animal.3.indexName Animal03</programlisting>
    </example>

    <para>In <xref linkend="example-sharding-configuration" /> the
    configuration uses the default id string hashing strategy and shards the
    <classname>Animal</classname> index into 5 sub-indexes. All sub-indexes
    are filesystem instances and the directory where each sub-index is stored
    is as followed:</para>

    <itemizedlist>
      <listitem>
        <para>for sub-index 0:
        <filename>/usr/lucene/indexes/Animal00</filename> (shared indexBase
        but overridden indexName)</para>
      </listitem>

      <listitem>
        <para>for sub-index 1:
        <filename>/usr/lucene/indexes/Animal.1</filename> (shared indexBase,
        default indexName)</para>
      </listitem>

      <listitem>
        <para>for sub-index 2:
        <filename>/usr/lucene/indexes/Animal.2</filename> (shared indexBase,
        default indexName)</para>
      </listitem>

      <listitem>
        <para>for sub-index 3:
        <filename>/usr/lucene/shared/Animal03</filename> (overridden
        indexBase, overridden indexName)</para>
      </listitem>

      <listitem>
        <para>for sub-index 4:
        <filename>/usr/lucene/indexes/Animal.4</filename> (shared indexBase,
        default indexName)</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="section-sharing-indexes">
    <title>Sharing indexes</title>

    <para>It is technically possible to store the information of more than one
    entity into a single Lucene index. There are two ways to accomplish
    this:</para>

    <itemizedlist>
      <listitem>
        <para>Configuring the underlying directory providers to point to the
        same physical index directory. In practice, you set the property
        <literal>hibernate.search.[fully qualified entity
        name].indexName</literal> to the same value. As an example let’s use
        the same index (directory) for the <classname>Furniture</classname>
        and <classname>Animal</classname> entity. We just set
        <literal>indexName</literal> for both entities to for example
        “Animal”. Both entities will then be stored in the Animal
        directory.</para>

        <para><programlisting>hibernate.search.org.hibernate.search.test.shards.Furniture.indexName = Animal
hibernate.search.org.hibernate.search.test.shards.Animal.indexName = Animal</programlisting></para>
      </listitem>

      <listitem>
        <para>Setting the <code>@Indexed</code> annotation’s
        <methodname>index</methodname> attribute of the entities you want to
        merge to the same value. If we again wanted all
        <classname>Furniture</classname> instances to be indexed in the
        <classname>Animal</classname> index along with all instances of
        <classname>Animal</classname> we would specify
        <code>@Indexed(index="Animal")</code> on both
        <classname>Animal</classname> and <classname>Furniture</classname>
        classes.<note>
            <para>This is only presented here so that you know the option is
            available. There is really not much benefit in sharing
            indexes.</para>
          </note></para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Worker configuration</title>

    <para>It is possible to refine how Hibernate Search interacts with Lucene
    through the worker configuration. There exist several architectural
    components and possible extension points. Let's have a closer look.</para>

    <para>First there is a <classname>Worker</classname>. An implementation of
    the <classname>Worker</classname> interface is reponsible for receiving
    all entity changes, queuing them by context and applying them once a
    context ends. The most intuative context, especially in connection with
    ORM, is the transaction. For this reason Hibernate Search will per default
    use the <classname>TransactionalWorker</classname> to scope all changes
    per transaction. One can, however, imagine a scenario where the context
    depends for example on the number of entity changes or some other
    application (lifecycle) events. For this reason the
    <classname>Worker</classname> implementation is configurable as shown in
    <xref linkend="table-worker-configuration" />.</para>

    <table id="table-worker-configuration">
      <title>Scope configuration</title>

      <tgroup cols="2">
        <tbody>
          <row>
            <entry><emphasis role="bold">Property</emphasis></entry>

            <entry><emphasis role="bold">Description</emphasis></entry>
          </row>

          <row>
            <entry><literal>hibernate.search.worker.scope</literal></entry>

            <entry>The fully qualifed class name of the
            <classname>Worker</classname> implementation to use. If this
            property is not set, empty or <literal>transaction</literal> the
            default <classname>TransactionalWorker</classname> is
            used.</entry>
          </row>

          <row>
            <entry><literal>hibernate.search.worker.*</literal></entry>

            <entry>All configuration properties prefixed with
            <literal>hibernate.search.worker</literal> are passed to the
            Worker during initialization. This allows adding custom, worker
            specific parameters.</entry>
          </row>

          <row>
            <entry><literal>hibernate.search.worker.batch_size</literal></entry>

            <entry>Defines the maximum number of indexing operation batched
            per context. Once the limit is reached indexing will be triggered
            even though the context has not ended yet. This property only
            works if the <classname>Worker</classname> implementation
            delegates the queued work to BatchedQueueingProcessor (which is
            what the <classname>TransactionalWorker</classname> does)</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Once a context ends it is time to prepare and apply the index
    changes. This can be done synchronously or asynchronously from within a
    new thread. Synchronous updates have the advantage that the index is at
    all times in sync with the databases. Asynchronous updates, on the other
    hand, can help to minimize the user response time. The drawback is
    potential discrepancies between database and index states. Lets look at
    the configuration options shown in <xref
    linkend="table-work-execution-configuration" />.</para>

    <table id="table-work-execution-configuration">
      <title>Execution configuration</title>

      <tgroup cols="2">
        <tbody>
          <row>
            <entry><emphasis role="bold">Property</emphasis></entry>

            <entry><emphasis role="bold">Description</emphasis></entry>
          </row>

          <row>
            <entry><literal>hibernate.search.worker.execution</literal></entry>

            <entry><para><literal>sync</literal>: synchronous execution
            (default)</para><para><literal>async</literal>: asynchronous
            execution</para></entry>
          </row>

          <row>
            <entry><literal>hibernate.search.worker.thread_pool.size</literal></entry>

            <entry>Defines the number of threads in the pool for asynchronous
            execution. Defaults to 1.</entry>
          </row>

          <row>
            <entry><literal>hibernate.search.worker.buffer_queue.max</literal></entry>

            <entry>Defines the maximal number of work queue if the thread poll
            is starved. Useful only for asynchronous execution. Default to
            infinite. If the limit is reached, the work is done by the main
            thread.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>So far all work is done within the same Virtual Machine (VM), no
    matter which execution mode. The total amount of work has not changed for
    the single VM. Luckily there is a better approach, namely delegation. It
    is possible to send the indexing work to a different server by configuring
    hibernate.search.worker.backend - see <xref
    linkend="table-backend-configuration" />.</para>

    <table id="table-backend-configuration">
      <title>Backend configuration</title>

      <tgroup cols="2">
        <tbody>
          <row>
            <entry><emphasis role="bold">Property</emphasis></entry>

            <entry><emphasis role="bold">Description</emphasis></entry>
          </row>

          <row>
            <entry><literal>hibernate.search.worker.backend</literal></entry>

            <entry><para><literal>lucene</literal>: The default backend which
            runs index updates in the same VM. Also used when the property is
            undefined or empty.</para><para><literal>jms</literal>: JMS
            backend. Index updates are send to a JMS queue to be processed by
            an indexing master. See <xref
            linkend="table-jms-backend-configuration" /> for additional
            configuration options and <xref linkend="jms-backend" /> for a
            more detailed descripton of this
            setup.</para><para><literal>jgroupsMaster</literal> or
            <literal>jgroupsSlave</literal>: Backend using <ulink
            url="http://www.jgroups.org/">JGroups</ulink> as communication
            layer. See <xref linkend="table-jgroups-backend-configuration" />
            for additional configuration options and <xref
            linkend="jgroups-backend" /> for a more detailed description of
            this setup.</para><para><literal>blackhole</literal>: Mainly a
            test/developer setting which ignores all indexing
            work</para><para>You can also specify the fully qualified name of
            a class implementing
            <classname>BackendQueueProcessorFactory</classname>. This way you
            can implement your own communication layer. The implementation is
            responsilbe for returning a <classname>Runnable</classname>
            instance which on execution will process the index
            work.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <table id="table-jms-backend-configuration">
      <title>JMS backend configuration</title>

      <tgroup cols="2">
        <tbody>
          <row>
            <entry><emphasis role="bold">Property</emphasis></entry>

            <entry><emphasis role="bold">Description</emphasis></entry>
          </row>

          <row>
            <entry><literal>hibernate.search.worker.jndi.*</literal></entry>

            <entry>Defines the JNDI properties to initiate the InitialContext
            (if needed). JNDI is only used by the JMS back end.</entry>
          </row>

          <row>
            <entry><literal>hibernate.search.worker.jms.connection_factory</literal></entry>

            <entry>Mandatory for the JMS back end. Defines the JNDI name to
            lookup the JMS connection factory from
            (<literal>/ConnectionFactory</literal> by default in JBoss
            AS)</entry>
          </row>

          <row>
            <entry><literal>hibernate.search.worker.jms.queue</literal></entry>

            <entry>Mandatory for the JMS back end. Defines the JNDI name to
            lookup the JMS queue from. The queue will be used to post work
            messages.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <table id="table-jgroups-backend-configuration">
      <title>JGroups backend configuration</title>

      <tgroup cols="2">
        <tbody>
          <row>
            <entry><emphasis role="bold">Property</emphasis></entry>

            <entry><emphasis role="bold">Description</emphasis></entry>
          </row>

          <row>
            <entry><literal>hibernate.search.worker.jgroups.clusterName</literal></entry>

            <entry>Optional for JGroups back end. Defines the name of JGroups
            channel.</entry>
          </row>

          <row>
            <entry><literal>hibernate.search.worker.jgroups.configurationFile</literal></entry>

            <entry>Optional JGroups network stack configuration. Defines the
            name of a JGroups configuration file, which must exist on
            classpath.</entry>
          </row>

          <row>
            <entry><literal>hibernate.search.worker.jgroups.configurationXml</literal></entry>

            <entry>Optional JGroups network stack configuration. Defines a
            String representing JGroups configuration as XML.</entry>
          </row>

          <row>
            <entry><literal>hibernate.search.worker.jgroups.configurationString</literal></entry>

            <entry>Optional JGroups network stack configuration. Provides
            JGroups configuration in plain text.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <warning>
      <para>As you probably noticed, some of the shown properties are
      correlated which means that not all combinations of property values make
      sense. In fact you can end up with a non-functional configuration. This
      is especially true for the case that you provide your own
      implementations of some of the shown interfaces. Make sure to study the
      existing code before you write your own <classname>Worker</classname> or
      <classname>BackendQueueProcessorFactory</classname>
      implementation.</para>
    </warning>
  </section>

  <section id="jms-backend">
    <title>JMS Master/Slave configuration</title>

    <para>This section describes in greater detail how to configure the
    Master/Slave Hibernate Search architecture.</para>

    <mediaobject>
      <imageobject role="html">
        <imagedata align="center" fileref="jms-backend.png" format="PNG" />
      </imageobject>

      <imageobject role="fo">
        <imagedata align="center" depth="" fileref="jms-backend.png"
                   format="PNG" scalefit="1" width="12cm" />
      </imageobject>

      <caption><para>JMS back end configuration.</para></caption>
    </mediaobject>

    <section>
      <title>Slave nodes</title>

      <para>Every index update operation is sent to a JMS queue. Index
      querying operations are executed on a local index copy.</para>

      <example>
        <title>JMS Slave configuration</title>

        <programlisting>### slave configuration

## DirectoryProvider
# (remote) master location
hibernate.search.default.sourceBase = /mnt/mastervolume/lucenedirs/mastercopy

# local copy location
hibernate.search.default.indexBase = /Users/prod/lucenedirs

# refresh every half hour
hibernate.search.default.refresh = 1800

# appropriate directory provider
hibernate.search.default.directory_provider = filesystem-slave

## Backend configuration
hibernate.search.worker.backend = jms
hibernate.search.worker.jms.connection_factory = /ConnectionFactory
hibernate.search.worker.jms.queue = queue/hibernatesearch
#optional jndi configuration (check your JMS provider for more information)

## Optional asynchronous execution strategy
# hibernate.search.worker.execution = async
# hibernate.search.worker.thread_pool.size = 2
# hibernate.search.worker.buffer_queue.max = 50</programlisting>
      </example>

      <tip>
        <para>A file system local copy is recommended for faster search
        results.</para>
      </tip>

      <tip>
        <para>The refresh period should be higher that the expected copy
        time.</para>
      </tip>
    </section>

    <section>
      <title>Master node</title>

      <para>Every index update operation is taken from a JMS queue and
      executed. The master index is copied on a regular basis.</para>

      <example>
        <title>JMS Master configuration</title>

        <programlisting>### master configuration

## DirectoryProvider
# (remote) master location where information is copied to
hibernate.search.default.sourceBase = /mnt/mastervolume/lucenedirs/mastercopy

# local master location
hibernate.search.default.indexBase = /Users/prod/lucenedirs

# refresh every half hour
hibernate.search.default.refresh = 1800

# appropriate directory provider
hibernate.search.default.directory_provider = filesystem-master

## Backend configuration
#Backend is the default lucene one</programlisting>
      </example>

      <tip>
        <para>The refresh period should be higher that the expected time
        copy.</para>
      </tip>

      <para>In addition to the Hibernate Search framework configuration, a
      Message Driven Bean has to be written and set up to process the index
      works queue through JMS.</para>

      <example>
        <title>Message Driven Bean processing the indexing queue</title>

        <programlisting language="JAVA" role="JAVA">@MessageDriven(activationConfig = {
      @ActivationConfigProperty(propertyName="destinationType", 
                                propertyValue="javax.jms.Queue"),
      @ActivationConfigProperty(propertyName="destination", 
                                propertyValue="queue/hibernatesearch"),
      @ActivationConfigProperty(propertyName="DLQMaxResent", propertyValue="1")
   } )
public class MDBSearchController extends AbstractJMSHibernateSearchController 
                                 implements MessageListener {
    @PersistenceContext EntityManager em;
    
    //method retrieving the appropriate session
    protected Session getSession() {
        return (Session) em.getDelegate();
    }

    //potentially close the session opened in #getSession(), not needed here
    protected void cleanSessionIfNeeded(Session session) 
    }
}</programlisting>
      </example>

      <para>This example inherits from the abstract JMS controller class
      available in the Hibernate Search source code and implements a JavaEE 5
      MDB. This implementation is given as an example and can be adjusted to
      make use of non Java EE Message Driven Beans. For more information about
      the <methodname>getSession()</methodname> and
      <methodname>cleanSessionIfNeeded()</methodname>, please check
      <classname>AbstractJMSHibernateSearchController</classname>'s
      javadoc.</para>
    </section>
  </section>

  <section id="jgroups-backend">
    <title>JGroups Master/Slave configuration</title>

    <para>This section describes how to configure the JGroups Master/Slave
    back end. The configuration examples illustrated in <xref
    linkend="jms-backend" /> also apply here, only a different backend
    (<constant>hibernate.search.worker.backend</constant>) needs to be
    set.</para>

    <section>
      <title>Slave nodes</title>

      <para>Every index update operation is sent through a JGroups channel to
      the master node. Index querying operations are executed on a local index
      copy.</para>

      <example>
        <title>JGroups Slave configuration</title>

        <programlisting>### slave configuration
hibernate.search.worker.backend = jgroupsSlave     </programlisting>
      </example>
    </section>

    <section>
      <title>Master node</title>

      <para>Every index update operation is taken from a JGroups channel and
      executed. The master index is copied on a regular basis.</para>

      <example>
        <title>JGroups Master configuration</title>

        <programlisting>### master configuration
hibernate.search.worker.backend = jgroupsMaster   </programlisting>
      </example>
    </section>

    <section>
      <title>JGroups channel configuration</title>

      <para>Optionally the configuration for the JGroups transport protocols
      and channel name can be defined and applied to master and slave nodes.
      There are several ways to configure the JGroups transport details. You
      can either set the
      <constant>hibernate.search.worker.backend.jgroups.configurationFile</constant>
      property and specify a file containing the JGroups configuration or you
      can use the property
      <constant>hibernate.search.worker.backend.jgroups.configurationXml</constant>
      or
      <constant>hibernate.search.worker.backend.jgroups.configurationString</constant>
      to directly embed either the xml or string JGroups configuration into
      your Hibernate configuration file. All three options are shown in <xref
      linkend="example-jgroup-xml-configuration" />.</para>

      <tip>
        <para>If no property is explicitly specified it is assumed that the
        JGroups default configuration file <literal>flush-udp.xml</literal> is
        used. </para>
      </tip>

      <example id="example-jgroup-xml-configuration">
        <title>JGroups transport protocol configuration</title>

        <programlisting language="XML">## JGroups configuration options
# OPTION 1 - udp.xml file needs to be located in the classpath
hibernate.search.worker.backend.jgroups.configurationFile = udp.xml

# OPTION 2 - protocol stack configuration provided in XML format
hibernate.search.worker.backend.jgroups.configurationXml =

&lt;config xmlns="urn:org:jgroups"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="urn:org:jgroups file:schema/JGroups-2.8.xsd"&gt;
&lt;UDP
mcast_addr="${jgroups.udp.mcast_addr:228.10.10.10}"
mcast_port="${jgroups.udp.mcast_port:45588}"
tos="8"
thread_naming_pattern="pl"
thread_pool.enabled="true"
thread_pool.min_threads="2"
thread_pool.max_threads="8"
thread_pool.keep_alive_time="5000"
thread_pool.queue_enabled="false"
thread_pool.queue_max_size="100"
thread_pool.rejection_policy="Run"/&gt;
&lt;PING timeout="1000" num_initial_members="3"/&gt;
&lt;MERGE2 max_interval="30000" min_interval="10000"/&gt;
&lt;FD_SOCK/&gt;
&lt;FD timeout="3000" max_tries="3"/&gt;
&lt;VERIFY_SUSPECT timeout="1500"/&gt;
&lt;pbcast.STREAMING_STATE_TRANSFER/&gt;
&lt;pbcast.FLUSH timeout="0"/&gt;
&lt;/config&gt;

# OPTION 3 - protocol stack configuration provided in "old style" jgroups format
hibernate.search.worker.backend.jgroups.configurationString =

UDP(mcast_addr=228.1.2.3;mcast_port=45566;ip_ttl=32):PING(timeout=3000;
num_initial_members=6):FD(timeout=5000):VERIFY_SUSPECT(timeout=1500):
pbcast.NAKACK(gc_lag=10;retransmit_timeout=3000):UNICAST(timeout=5000):
FRAG:pbcast.GMS(join_timeout=3000;shun=false;print_local_addr=true) </programlisting>
      </example>

      <para>In this JGroups master/slave configuration nodes communicate over
      a JGroups channel. The default channel name is
      <literal>HSearchCluster</literal> which can be configured as seen in
      <xref linkend="example-jgroups-channel-name" />.</para>

      <example id="example-jgroups-channel-name">
        <title>JGroups channel name configuration</title>

        <programlisting>hibernate.search.worker.backend.jgroups.clusterName = Hibernate-Search-Cluster       </programlisting>
      </example>
    </section>
  </section>

  <section id="infinispan-directories" revision="1">
    <title>Infinispan Directory configuration</title>

    <para>Infinispan is a distributed scalable, highly available data grid
    platform which supports autodiscovery of peer nodes; it's possible to
    store the index in Infinispan, making it easy to setup a clustering
    configuration with Hibernate Search and having updates to the index
    available on other nodes very quickly.</para>

    <para>This section describes in greater detail how to configure Hibernate
    Search to use an Infinispan Lucene Directory.</para>

    <para>Using an Infinispan Directory the index is shared across multiple
    nodes, being stored in memory. It is considered a single directory across
    all participating nodes, so when a node updates the index this affects the
    other nodes; what is updated on one node can be immediately searched fore
    in the whole cluster.</para>

    <para>The default configuration replicates all data defining the index
    across all nodes, thus consuming a significant amount of memory. For large
    indexes it's suggested to enable data distribution, so that each piece of
    information is replicated to a subset of all cluster members. Also it's
    possible to offload part or most information to a single centralized
    <literal>CacheStore</literal>, such as plain filesystem, Amazon S3,
    Cassandra, Berkley DB, JDBC standard databases, or have a
    <literal>CacheStore</literal> on each node, chain cachestores. See the
    <ulink url="http://www.jboss.org/infinispan/"> Infinispan
    documentation</ulink> for all options and configuration details.</para>

    <section>
      <title>Requirements</title>

      <para>Infinispan requires Java6 and an updated version of JGroups. To
      use it via maven, add the following dependencies:</para>

      <example>
        <title>Maven dependencies for Hibernate Search</title>

        <programlisting language="XML" role="XML">&lt;dependency&gt;
   &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
   &lt;artifactId&gt;hibernate-search&lt;/artifactId&gt;
   &lt;version&gt;&version;&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
   &lt;artifactId&gt;hibernate-search-infinispan&lt;/artifactId&gt;
   &lt;version&gt;&version;&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
      </example>

      <para>For the non-maven users, add
      <literal>hibernate-search-infinispan.jar</literal>,
      <literal>infinispan-lucene-directory.jar</literal>,
      <literal>infinispan-core.jar</literal> to your application classpath.
      These last two jars are distributed by <ulink
      url="http://sourceforge.net/projects/infinispan/files/">Infinispan</ulink>;
      Also make sure to update JGroups to a version matching the Infinispan
      package, the version normally distributed with Hibernate Search is older
      to maintain Java5 compatibility.</para>
    </section>

    <section>
      <title>Architecture</title>

      <para>Even when using an Infinispan directory it's still recommended to
      use the JMS Master/Slave backend or the JGroups backend: as via
      Infinispan all nodes will share the same index, it's likely that
      <classname>IndexWriter</classname>s being active on different nodes will
      try to acquire the lock on the same index. So instead of sending updates
      directly to the index, it's still better to send it to a JMS queue or
      JGroups channel and have a single node apply all changes on behalf of
      all other nodes.</para>

      <para>To configure a JMS slave only the backend must be replaced, the
      directory provider must be set to <literal>infinispan</literal>; set the
      same directory provider on the master, they will connect without the
      need to setup the copy job across nodes. Using the JGroups backend is
      very similar, just combine the backend configuration with the
      <literal>infinispan</literal> directory provider.</para>
    </section>

    <section>
      <title>Infinispan Configuration</title>

      <para>To use Infinispan a <classname>CacheManager</classname> must be
      started from an Infinispan configuration file. Hibernate Search can take
      and reuse and existing <classname>CacheManager</classname> looking it up
      via JNDI, or start a new one. In the latter case Hibernate Search will
      start it and stop it at <classname>SessionFactory</classname>
      close.</para>

      <para>To use and existing <classname>CacheManager</classname> from JNDI
      (optional parameter):</para>

      <programlisting>hibernate.search.infinispan.cachemanager_jndiname = [jndiname]</programlisting>

      <para>To start a new <classname>CacheManager</classname> from a
      configuration file (optional parameter):</para>

      <programlisting>hibernate.search.infinispan.configuration_resourcename = [infinispan configuration filename]</programlisting>

      <para>If both parameters are defined, JNDI will have priority. If none
      of these is defined, Hibernate Search will use the example Infinispan
      configuration provided in the
      <literal>hibernate-search-infinispan.jar</literal></para>

      <para>As mentioned in the <xref
      linkend="search-configuration-directory" />, each index actually makes
      use of three caches, so three different caches should be configured as
      shown in the <literal> default-hibernatesearch-infinispan.xml</literal>
      provided in the
      <literal>hibernate-search-infinispan.jar</literal>.</para>

      <para>Several indexes can share the same caches, they are differentiated
      by using the index name as it is the case with the other Directory
      implementations.</para>
    </section>
  </section>

  <section id="configuration-reader-strategy">
    <title>Reader strategy configuration</title>

    <para>The different reader strategies are described in <xref
    linkend="search-architecture-readerstrategy" />. Out of the box strategies
    are:</para>

    <itemizedlist>
      <listitem>
        <para><literal>shared</literal>: share index readers across several
        queries. This strategy is the most efficient.</para>
      </listitem>

      <listitem>
        <para><literal>not-shared</literal>: create an index reader for each
        individual query</para>
      </listitem>
    </itemizedlist>

    <para>The default reader strategy is <literal>shared</literal>. This can
    be adjusted:</para>

    <programlisting>hibernate.search.reader.strategy = not-shared</programlisting>

    <para>Adding this property switches to the <literal>not-shared</literal>
    strategy.</para>

    <para>Or if you have a custom reader strategy:</para>

    <programlisting>hibernate.search.reader.strategy = my.corp.myapp.CustomReaderProvider</programlisting>

    <para>where <classname>my.corp.myapp.CustomReaderProvider</classname> is
    the custom strategy implementation.</para>
  </section>

  <section id="search-configuration-event" revision="2">
    <title>Enabling Hibernate Search and automatic indexing</title>

    <para>Let's discover how to enable Hibernate Search in your system.</para>

    <section>
      <title>Enabling Hibernate Search</title>

      <para>Hibernate Search is enabled out of the box when detected on the
      classpath by Hibernate Core. If, for some reason you need to disable it,
      set <literal>hibernate.search.autoregister_listeners</literal> to false.
      Note that there is no performance penalty when the listeners are enabled
      but no entities are annotated as indexed.</para>
    </section>

    <section>
      <title>Automatic indexing</title>

      <para>By default, every time an object is inserted, updated or deleted
      through Hibernate, Hibernate Search updates the according Lucene index.
      It is sometimes desirable to disable that features if either your index
      is read-only or if index updates are done in a batch way (see <xref
      linkend="search-batchindex" />).</para>

      <para>To disable event based indexing, set</para>

      <programlisting>hibernate.search.indexing_strategy = manual</programlisting>

      <note>
        <para>In most case, the JMS backend provides the best of both world, a
        lightweight event based system keeps track of all changes in the
        system, and the heavyweight indexing process is done by a separate
        process or machine.</para>
      </note>
    </section>
  </section>

  <section id="lucene-indexing-performance" revision="3">
    <title>Tuning Lucene indexing performance</title>

    <para>Hibernate Search allows you to tune the Lucene indexing performance
    by specifying a set of parameters which are passed through to underlying
    Lucene <literal>IndexWriter</literal> such as
    <literal>mergeFactor</literal>, <literal>maxMergeDocs</literal> and
    <literal>maxBufferedDocs</literal>. You can specify these parameters
    either as default values applying for all indexes, on a per index basis,
    or even per shard.</para>

    <para>There are two sets of parameters allowing for different performance
    settings depending on the use case. During indexing operations triggered
    by database modifications, the parameters are grouped by the
    <literal>transaction</literal> keyword: <programlisting>hibernate.search.[default|&lt;indexname&gt;].indexwriter.transaction.&lt;parameter_name&gt;</programlisting>
    When indexing occurs via <literal>FullTextSession.index()</literal> or via
    a <classname>MassIndexer</classname> (see <xref
    linkend="search-batchindex" />), the used properties are those grouped
    under the <literal>batch</literal> keyword: <programlisting>hibernate.search.[default|&lt;indexname&gt;].indexwriter.batch.&lt;parameter_name&gt;</programlisting></para>

    <para>If no value is set for a <literal>.batch</literal> value in a
    specific shard configuration, Hibernate Search will look at the index
    section, then at the default section: <programlisting>hibernate.search.Animals.2.indexwriter.transaction.max_merge_docs 10
hibernate.search.Animals.2.indexwriter.transaction.merge_factor 20
hibernate.search.default.indexwriter.batch.max_merge_docs 100</programlisting>
    This configuration will result in these settings applied to the second
    shard of Animals index:</para>

    <itemizedlist>
      <listitem>
        <para><literal>transaction.max_merge_docs</literal> = 10</para>
      </listitem>

      <listitem>
        <para><literal>batch.max_merge_docs</literal> = 100</para>
      </listitem>

      <listitem>
        <para><literal>transaction.merge_factor</literal> = 20</para>
      </listitem>

      <listitem>
        <para><literal>batch.merge_factor</literal> = Lucene default</para>
      </listitem>
    </itemizedlist>

    <para>All other values will use the defaults defined in Lucene.</para>

    <para>The default for all values is to leave them at Lucene's own default,
    so the listed values in the following table actually depend on the version
    of Lucene you are using; values shown are relative to version
    <literal>2.4</literal>. For more information about Lucene indexing
    performances, please refer to the Lucene documentation.</para>

    <warning>
      <para>Previous versions had the <literal>batch</literal> parameters
      inherit from <literal>transaction</literal> properties. This needs now
      to be explicitly set.</para>
    </warning>

    <table>
      <title>List of indexing performance and behavior properties</title>

      <tgroup cols="3">
        <thead>
          <row>
            <entry align="center">Property</entry>

            <entry align="center">Description</entry>

            <entry align="center">Default Value</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].exclusive_index_use</literal></entry>

            <entry><para>Set to <literal>true</literal> when no other process
            will need to write to the same index: this will enable Hibernate
            Search to work in exlusive mode on the index and improve
            performance in writing changes to the index.</para></entry>

            <entry><literal>false</literal> (releases locks as soon as
            possible)</entry>
          </row>

          <row>
            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].indexwriter.[transaction|batch].max_buffered_delete_terms</literal></entry>

            <entry><para>Determines the minimal number of delete terms
            required before the buffered in-memory delete terms are applied
            and flushed. If there are documents buffered in memory at the
            time, they are merged and a new segment is created.</para></entry>

            <entry>Disabled (flushes by RAM usage)</entry>
          </row>

          <row>
            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].indexwriter.[transaction|batch].max_buffered_docs</literal></entry>

            <entry><para>Controls the amount of documents buffered in memory
            during indexing. The bigger the more RAM is
            consumed.</para></entry>

            <entry>Disabled (flushes by RAM usage)</entry>
          </row>

          <row>
            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].indexwriter.[transaction|batch].max_field_length</literal></entry>

            <entry><para>The maximum number of terms that will be indexed for
            a single field. This limits the amount of memory required for
            indexing so that very large data will not crash the indexing
            process by running out of memory. This setting refers to the
            number of running terms, not to the number of different
            terms.</para> <para>This silently truncates large documents,
            excluding from the index all terms that occur further in the
            document. If you know your source documents are large, be sure to
            set this value high enough to accommodate the expected size. If
            you set it to Integer.MAX_VALUE, then the only limit is your
            memory, but you should anticipate an OutOfMemoryError. </para>
            <para>If setting this value in <literal>batch</literal>
            differently than in <literal>transaction</literal> you may get
            different data (and results) in your index depending on the
            indexing mode.</para></entry>

            <entry>10000</entry>
          </row>

          <row>
            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].indexwriter.[transaction|batch].max_merge_docs</literal></entry>

            <entry><para>Defines the largest number of documents allowed in a
            segment. Larger values are best for batched indexing and speedier
            searches. Small values are best for transaction
            indexing.</para></entry>

            <entry>Unlimited (Integer.MAX_VALUE)</entry>
          </row>

          <row>
            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].indexwriter.[transaction|batch].merge_factor</literal></entry>

            <entry><para>Controls segment merge frequency and size. </para>
            <para>Determines how often segment indexes are merged when
            insertion occurs. With smaller values, less RAM is used while
            indexing, and searches on unoptimized indexes are faster, but
            indexing speed is slower. With larger values, more RAM is used
            during indexing, and while searches on unoptimized indexes are
            slower, indexing is faster. Thus larger values (&gt; 10) are best
            for batch index creation, and smaller values (&lt; 10) for indexes
            that are interactively maintained. The value must no be lower than
            2.</para></entry>

            <entry>10</entry>
          </row>

          <row>
            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].indexwriter.[transaction|batch].ram_buffer_size</literal></entry>

            <entry><para>Controls the amount of RAM in MB dedicated to
            document buffers. When used together max_buffered_docs a flush
            occurs for whichever event happens first.</para> <para>Generally
            for faster indexing performance it's best to flush by RAM usage
            instead of document count and use as large a RAM buffer as you
            can.</para></entry>

            <entry>16 MB</entry>
          </row>

          <row>
            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].indexwriter.[transaction|batch].term_index_interval</literal></entry>

            <entry><para>Expert: Set the interval between indexed
            terms.</para> <para>Large values cause less memory to be used by
            IndexReader, but slow random-access to terms. Small values cause
            more memory to be used by an IndexReader, and speed random-access
            to terms. See Lucene documentation for more
            details.</para></entry>

            <entry>128</entry>
          </row>

          <row>
            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].indexwriter.[transaction|batch].use_compound_file</literal></entry>

            <entry>The advantage of using the compound file format is that
            less file descriptors are used. The disadvantage is that indexing
            takes more time and temporary disk space. You can set this
            parameter to <literal>false</literal> in an attempt to improve the
            indexing time, but you could run out of file descriptors if
            <literal>mergeFactor</literal> is also
            large.<para></para><para>Boolean parameter, use
            "<literal>true</literal>" or "<literal>false</literal>". The
            default value for this option is
            <literal>true</literal>.</para></entry>

            <entry>true</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <tip>
      <para>When your architecture permits it, always set
      <literal>hibernate.search.default.exclusive_index_use=true</literal> as
      it greatly improves efficiency in index writing.</para>
    </tip>

    <para>To tune the indexing speed it might be useful to time the object
    loading from database in isolation from the writes to the index. To
    achieve this set the <literal>blackhole</literal> as worker backend and
    start you indexing routines. This backend does not disable Hibernate
    Search: it will still generate the needed changesets to the index, but
    will discard them instead of flushing them to the index. As opposite to
    setting the <literal>hibernate.search.indexing_strategy</literal> to
    <literal>manual</literal> when using <literal>blackhole</literal> it will
    possibly load more data to rebuild the index from associated
    entities.</para>

    <programlisting>hibernate.search.worker.backend blackhole</programlisting>

    <para>The recommended approach is to focus first on optimizing the object
    loading, and then use the timings you achieve as a baseline to tune the
    indexing process.</para>

    <para>The <literal>blackhole</literal> backend is not meant to be used in
    production, only as a tool to identify indexing bottlenecks.</para>
  </section>

  <section id="search-configuration-directory-lockfactories" revision="1">
    <title>LockFactory configuration</title>

    <para>Lucene Directories have default locking strategies which work well
    for most cases, but it's possible to specify for each index managed by
    Hibernate Search which LockingFactory you want to use.</para>

    <para>Some of these locking strategies require a filesystem level lock and
    may be used even on RAM based indexes, but this is not recommended and of
    no practical use.</para>

    <para>To select a locking factory, set the
    <literal>hibernate.search.&lt;index&gt;.locking_strategy</literal> option
    to one of <literal>simple</literal>, <literal>native</literal>,
    <literal>single</literal> or <literal>none</literal>, or set it to the
    fully qualified name of an implementation of
    <literal>org.hibernate.search.store.LockFactoryFactory</literal>;
    Implementing this interface you can provide a custom
    <literal>org.apache.lucene.store.LockFactory</literal>.</para>

    <table id="search-configuration-directory-lockfactories-table">
      <title>List of available LockFactory implementations</title>

      <tgroup cols="3">
        <thead>
          <row>
            <entry align="center">name</entry>

            <entry align="center">Class</entry>

            <entry align="center">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>simple</entry>

            <entry>org.apache.lucene.store.SimpleFSLockFactory</entry>

            <entry><para>Safe implementation based on Java's File API, it
            marks the usage of the index by creating a marker file.</para>
            <para>If for some reason you had to kill your application, you
            will need to remove this file before restarting it.</para>
            <para>This is the default implementation for the
            <literal>filesystem</literal>,
            <literal>filesystem-master</literal> and
            <literal>filesystem-slave</literal> directory
            providers.</para></entry>
          </row>

          <row>
            <entry>native</entry>

            <entry>org.apache.lucene.store.NativeFSLockFactory</entry>

            <entry><para>As does <literal>simple</literal> this also marks the
            usage of the index by creating a marker file, but this one is
            using native OS file locks so that even if your application
            crashes the locks will be cleaned up.</para> <para>This
            implementation has known problems on NFS.</para></entry>
          </row>

          <row>
            <entry>single</entry>

            <entry>org.apache.lucene.store.SingleInstanceLockFactory</entry>

            <entry><para>This LockFactory doesn't use a file marker but is a
            Java object lock held in memory; therefore it's possible to use it
            only when you are sure the index is not going to be shared by any
            other process.</para> <para>This is the default implementation for
            the <literal>ram</literal> directory provider.</para></entry>
          </row>

          <row>
            <entry>none</entry>

            <entry>org.apache.lucene.store.NoLockFactory</entry>

            <entry><para>All changes to this index are not coordinated by any
            lock; test your application carefully and make sure you know what
            it means.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Configuration example:</para>

    <programlisting>hibernate.search.default.locking_strategy simple
hibernate.search.Animals.locking_strategy native
hibernate.search.Books.locking_strategy org.custom.components.MyLockingFactory</programlisting>
  </section>

  <section>
    <title>Exception Handling Configuration</title>

    <para>Hibernate Search allows you to configure how exceptions are handled
    during the indexing process. If no configuration is provided then
    exceptions are logged to the log output by default. It is possible to
    explicitly declare the exception logging mechanism as seen below:</para>

    <para><programlisting>hibernate.search.error_handler log</programlisting>
    The default exception handling occurs for both synchronous and
    asynchronous indexing. Hibernate Search provides an easy mechanism to
    override the default error handling implementation.</para>

    <para>In order to provide your own implementation you must implement the
    <code>ErrorHandler</code> interface, which provides <code>handle (
    ErrorContext context )</code> method. The <code>ErrorContext</code>
    provides a reference to the primary <code>LuceneWork</code> that failed,
    the underlying exception and any subsequent <code>LuceneWork</code> that
    could not be processed due to the primary exception.</para>

    <para><programlisting>public interface ErrorContext  {
   List&lt;LuceneWork&gt; getFailingOperations();
   LuceneWork getOperationAtFault();
   Throwable getThrowable();
   boolean hasErrors();
}</programlisting></para>

    <para>The following provides an example implementation of
    <code>ErrorHandler</code>:</para>

    <para><programlisting>public class CustomErrorHandler implements ErrorHandler {
   public void handle ( ErrorContext context ) {
      ...
      //publish error context to some internal error handling system
      ...
   }
}</programlisting> To register this error handler with Hibernate Search you
    must declare the <code>CustomErrorHandler</code> fully qualified classname
    in the configuration properties:</para>

    <para><programlisting>hibernate.search.error_handler CustomerErrorHandler</programlisting></para>
  </section>
</chapter>
