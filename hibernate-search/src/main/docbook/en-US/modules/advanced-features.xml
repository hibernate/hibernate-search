<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~  Copyright (c) 2010, Red Hat, Inc. and/or its affiliates or third-party contributors as
  ~  indicated by the @author tags or express copyright attribution
  ~  statements applied by the authors.  All third-party contributions are
  ~  distributed under license by Red Hat, Inc.
  ~
  ~  This copyrighted material is made available to anyone wishing to use, modify,
  ~  copy, or redistribute it subject to the terms and conditions of the GNU
  ~  Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~  This program is distributed in the hope that it will be useful,
  ~  but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~  for more details.
  ~
  ~  You should have received a copy of the GNU Lesser General Public License
  ~  along with this distribution; if not, write to:
  ~  Free Software Foundation, Inc.
  ~  51 Franklin Street, Fifth Floor
  ~  Boston, MA  02110-1301  USA
  -->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../hsearch.ent">
%BOOK_ENTITIES;
]>
<chapter id="search-lucene-native">
  <title>Advanced features</title>

  <para>In this final chapter we are offering a smorgasbord of tips and tricks
  which might become useful as you dive deeper and deeper into Hibernate
  Search.</para>

  <section>
    <title>Accessing the SearchFactory</title>

    <para>The <classname>SearchFactory</classname> object keeps track of the
    underlying Lucene resources for Hibernate Search. It is a convenient way
    to access Lucene natively. The <classname>SearchFactory</classname> can be
    accessed from a<classname> FullTextSession</classname>:</para>

    <example>
      <title>Accessing the <classname>SearchFactory</classname></title>

      <programlisting>FullTextSession fullTextSession = Search.getFullTextSession(regularSession);
SearchFactory searchFactory = fullTextSession.getSearchFactory();           </programlisting>
    </example>
  </section>

  <section>
    <title>Accessing a Lucene Directory</title>

    <para>You can always access the Lucene directories through plain Lucene.
    The <classname>Directory</classname> structure is in no way different with
    or without Hibernate Search. However there are some more convenient ways
    to access a given Directory. The <classname>SearchFactory</classname>
    keeps track of the <classname>DirectoryProvider</classname>s per indexed
    class. One directory provider can be shared amongst several indexed
    classes, if the classes share the same underlying index directory. While
    usually not the case, a given entity can have several
    <classname>DirectoryProvider</classname>s if the index is sharded (see
    <xref linkend="search-configuration-directory-sharding" />).</para>

    <example>
      <title>Accessing the Lucene <classname>Directory</classname></title>

      <programlisting>DirectoryProvider[] provider = searchFactory.getDirectoryProviders(Order.class);
org.apache.lucene.store.Directory directory = provider[0].getDirectory();           </programlisting>
    </example>

    <para>In this example, directory points to the lucene index storing
    <classname>Order</classname>s information. Note that the obtained Lucene
    directory must not be closed (this is Hibernate Search's
    responsibility).</para>
  </section>

  <section>
    <title>Using an IndexReader</title>

    <para>Queries in Lucene are executed on an <literal>IndexReader</literal>.
    Hibernate Search caches all index readers to maximize performance. Your
    code can access this cached resources, but you have to follow some "good
    citizen" rules.</para>

    <example>
      <title>Accessing an <classname>IndexReader</classname></title>

      <programlisting>DirectoryProvider orderProvider = searchFactory.getDirectoryProviders(Order.class)[0];
DirectoryProvider clientProvider = searchFactory.getDirectoryProviders(Client.class)[0];

ReaderProvider readerProvider = searchFactory.getReaderProvider();
IndexReader reader = readerProvider.openReader(orderProvider, clientProvider);

try {
   //do read-only operations on the reader
}
finally {
   readerProvider.closeReader(reader);
}          </programlisting>
    </example>

    <para>The ReaderProvider (described in<xref
    linkend="search-architecture-readerstrategy" />), will open an IndexReader
    on top of the index(es) referenced by the directory providers. Because
    this <classname>IndexReader</classname> is shared amongst several clients,
    you must adhere to the following rules:</para>

    <itemizedlist>
      <listitem>
        <para>Never call indexReader.close(), but always call
        readerProvider.closeReader(reader), preferably in a finally
        block.</para>
      </listitem>

      <listitem>
        <para>Don't use this <classname>IndexReader</classname> for
        modification operations (you would get an exception). If you want to
        use a read/write index reader, open one from the Lucene Directory
        object.</para>
      </listitem>
    </itemizedlist>

    <para>Aside from those rules, you can use the
    <classname>IndexReader</classname> freely, especially to do native
    queries. Using the shared <literal>IndexReader</literal>s will make most
    queries more efficient.</para>
  </section>

  <section>
    <title>Use external services in Hibernate Search components
    (experimental)</title>

    <para>By components, this section means any of the pluggable contracts -
    <classname>DirectoryProvider</classname> being the most useful use
    case:</para>

    <itemizedlist>
      <listitem>
        <para><classname>DirectoryProvider</classname></para>
      </listitem>

      <listitem>
        <para><classname>ReaderProvider</classname></para>
      </listitem>

      <listitem>
        <para><classname>OptimizerStrategy</classname></para>
      </listitem>

      <listitem>
        <para><classname>BackendQueueProcessorFactory</classname></para>
      </listitem>

      <listitem>
        <para><classname>Worker</classname></para>
      </listitem>
    </itemizedlist>

    <para>Some of these compnents need to access a service which is either
    available in the environment or whose lifecycle is bound to the
    <classname>SearchFactory</classname>. Sometimes, you even want the same
    service to be shared amongst several instances of these contract. One
    example is the ability the share an Infinispan cache instance between
    several directory providers to store the various indexes using the same
    underlying infrastructure.</para>

    <section>
      <title>Exposing a service</title>

      <para>To expose a service, you need to implement
      <classname>org.hibernate.search.spi.ServiceProvider&lt;T&gt;</classname>.
      <classname>T</classname> is the type of the service you want to use.
      Services are retrieved by components via their
      <classname>ServiceProvider</classname> class implementation.</para>

      <section>
        <title>Managed services</title>

        <para>If your service ought to be started when Hibernate Search starts
        and stopped when Hibernate Search stops, you can use a managed
        service. Make sure to properly implement the
        <methodname>start</methodname> and <methodname>stop</methodname>
        methods of <classname>ServiceProvider</classname>. When the service is
        requested, the <methodname>getService</methodname> method is
        called.</para>

        <example>
          <title>Example of ServiceProvider implementation</title>

          <programlisting>public class CacheServiceProvider implements ServiceProvider&lt;Cache&gt; {
    private CacheManager manager;

    public void start(Properties properties) {
        //read configuration
        manager = new CacheManager(properties);
    }

    public Cache getService() {
        return manager.getCache(DEFAULT);
    }

    void stop() {
        manager.close();
    }
}</programlisting>
        </example>

        <note>
          <para>The <classname>ServiceProvider</classname> implementation must
          have a no-arg constructor.</para>
        </note>

        <para>To be transparently discoverable, such service should have an
        accompanying
        <filename>META-INF/services/org.hibernate.search.spi.ServiceProvider</filename>
        whose content list the (various) service provider
        implementation(s).</para>

        <example>
          <title>Content of
          META-INF/services/org.hibernate.search.spi.ServiceProvider</title>

          <programlisting>com.acme.infra.hibernate.CacheServiceProvider</programlisting>
        </example>
      </section>

      <section>
        <title>Provided services</title>

        <para>Alternatively, the service can be provided by the environment
        bootstrapping Hibernate Search. For example, Infinispan which uses
        Hibernate Search as its internal search engine can pass the
        <classname>CacheContainer</classname> to Hibernate Search. In this
        case, the <classname>CacheContainer</classname> instance is not
        managed by Hibernate Search and the
        <methodname>start</methodname>/<methodname>stop</methodname> methods
        of its corresponding service provider will not be used.</para>

        <note>
          <para>Provided services have priority over managed services. If a
          provider service is registered with the same
          <classname>ServiceProvider</classname> class as a managed service,
          the provided service will be used.</para>
        </note>

        <para>The provided services are passed to Hibernate Search via the
        <classname>SearchConfiguration</classname> interface
        (<methodname>getProvidedServices</methodname>).</para>

        <important>
          <para>Provided services are used by frameworks controlling the
          lifecycle of Hibernate Search and not by traditional users.</para>
        </important>

        <para>If, as a user, you want to retrieve a service instance from the
        environment, use registry services like JNDI and look the service up
        in the provider.</para>
      </section>
    </section>

    <section>
      <title>Using a service</title>

      <para>Many of of the pluggable contracts of Hibernate Search can use
      services. Services are accessible via the
      <classname>BuildContext</classname> interface.</para>

      <example>
        <title>Example of a directory provider using a cache service</title>

        <programlisting>public CustomDirectoryProvider implements DirectoryProvider&lt;RAMDirectory&gt; {
    private BuildContext context;

    public void initialize(
        String directoryProviderName, 
        Properties properties, 
        BuildContext context) {
        //initialize
        this.context = context;
    }

    public void start() {
        Cache cache = context.requestService( CacheServiceProvider.class );
        //use cache
    }

    public RAMDirectory getDirectory() {
        // use cache
    }

    public stop() {
        //stop services
        context.releaseService( CacheServiceProvider.class );
    } 
}</programlisting>
      </example>

      <para>When you request a service, an instance of the service is served
      to you. Make sure to then release the service. This is fundamental. Note
      that the service can be released in the
      <methodname>DirectoryProvider.stop</methodname> method if the
      <classname>DirectoryProvider</classname> uses the service during its
      lifetime or could be released right away of the service is simply used
      at initialization time.</para>
    </section>
  </section>

  <section>
    <title>Customizing Lucene's scoring formula</title>

    <para>Lucene allows the user to customize its scoring formula by extending
    <classname>org.apache.lucene.search.Similarity</classname>. The abstract
    methods defined in this class match the factors of the following formula
    calculating the score of query q for document d:</para>

    <para><emphasis role="bold">score(q,d) = coord(q,d) · queryNorm(q) · ∑
    <subscript>t in q</subscript> ( tf(t in d) · idf(t)
    <superscript>2</superscript> · t.getBoost() · norm(t,d) )
    </emphasis></para>

    <para><informaltable align="left" width="">
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Factor</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry align="left">tf(t ind)</entry>

              <entry>Term frequency factor for the term (t) in the document
              (d).</entry>
            </row>

            <row>
              <entry align="left">idf(t)</entry>

              <entry>Inverse document frequency of the term.</entry>
            </row>

            <row>
              <entry align="left">coord(q,d)</entry>

              <entry>Score factor based on how many of the query terms are
              found in the specified document.</entry>
            </row>

            <row>
              <entry align="left">queryNorm(q)</entry>

              <entry>Normalizing factor used to make scores between queries
              comparable.</entry>
            </row>

            <row>
              <entry align="left">t.getBoost()</entry>

              <entry>Field boost.</entry>
            </row>

            <row>
              <entry align="left">norm(t,d)</entry>

              <entry>Encapsulates a few (indexing time) boost and length
              factors.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>It is beyond the scope of this manual to explain this
    formula in more detail. Please refer to
    <classname>Similarity</classname>'s Javadocs for more information.</para>

    <para>Hibernate Search provides three ways to modify Lucene's similarity
    calculation.</para>

    <para>First you can set the default similarity by specifying the fully
    specified classname of your <classname>Similarity</classname>
    implementation using the property
    <constant>hibernate.search.similarity</constant>. The default value is
    <classname>org.apache.lucene.search.DefaultSimilarity</classname>.</para>

    <para>You can also override the similarity used for a specific index by
    setting the <literal>similarity</literal> property</para>

    <programlisting>hibernate.search.default.similarity my.custom.Similarity</programlisting>

    <para>Finally you can override the default similarity on class level using
    the <literal>@Similarity</literal> annotation. <programlisting>@Entity
@Indexed
<emphasis role="bold">@Similarity(impl = DummySimilarity.class)</emphasis>
public class Book {
...
}           </programlisting> As an example, let's assume it is not important
    how often a term appears in a document. Documents with a single occurrence
    of the term should be scored the same as documents with multiple
    occurrences. In this case your custom implementation of the method
    <methodname>tf(float freq) </methodname> should return 1.0.</para>

    <warning>
      <para>When two entities share the same index they must declare the same
      <classname>Similarity</classname> implementation. Classes in the same
      class hierarchy always share the index, so it's not allowed to override
      the <classname>Similarity</classname> implementation in a
      subtype.</para>

      <para>Likewise, it does not make sense to define the similarity via the
      index setting and the class-level setting as they would conflict. Such a
      configuration will be rejected.</para>
    </warning>
  </section>
</chapter>
