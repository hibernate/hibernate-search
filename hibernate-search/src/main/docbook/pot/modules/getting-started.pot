# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2011-09-17 19:35+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: getting-started.xml:31
#, no-c-format
msgid "Getting started"
msgstr ""

#. Tag: para
#: getting-started.xml:33
#, no-c-format
msgid "Welcome to Hibernate Search. The following chapter will guide you through the initial steps required to integrate Hibernate Search into an existing Hibernate enabled application. In case you are a Hibernate new timer we recommend you start <ulink url=\"http://hibernate.org/quick-start.html\">here</ulink>."
msgstr ""

#. Tag: title
#: getting-started.xml:40
#, no-c-format
msgid "System Requirements"
msgstr ""

#. Tag: title
#: getting-started.xml:43
#, no-c-format
msgid "System requirements"
msgstr ""

#. Tag: entry
#: getting-started.xml:48
#, no-c-format
msgid "Java Runtime"
msgstr ""

#. Tag: entry
#: getting-started.xml:50
#, no-c-format
msgid "A JDK or JRE version <emphasis>6</emphasis> or greater. You can download a Java Runtime for Windows/Linux/Solaris <ulink url=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">here</ulink>. If using Java version <emphasis>7</emphasis> make sure you avoid builds 0 and 1: those versions contained an optimisation bug which would be triggered by Lucene. Hibernate Search 3.x was compatible with Java version <emphasis>5</emphasis> too."
msgstr ""

#. Tag: entry
#: getting-started.xml:60
#, no-c-format
msgid "Hibernate Search"
msgstr ""

#. Tag: entry
#: getting-started.xml:62
#, no-c-format
msgid "<literal>hibernate-search-&version;.jar</literal> and all runtime dependencies. You can get the jar artifacts either from the <literal>dist/lib</literal> directory of the <ulink url=\"http://sourceforge.net/projects/hibernate/files/hibernate-search/\">Hibernate Search distribution</ulink> or you can download them from the <ulink url=\"http://repository.jboss.org/nexus/content/groups/public-jboss/ \">JBoss maven repository</ulink>."
msgstr ""

#. Tag: entry
#: getting-started.xml:73
#, no-c-format
msgid "Hibernate Core"
msgstr ""

#. Tag: entry
#: getting-started.xml:75
#, no-c-format
msgid "This instructions have been tested against Hibernate 4.0. You will need <literal>hibernate-core-&hibernateVersion;.jar</literal> and its transitive dependencies (either from the <ulink url=\"http://sourceforge.net/projects/hibernate/files/hibernate3/\">distribution bundle</ulink> or the maven repository)."
msgstr ""

#. Tag: entry
#: getting-started.xml:84
#, no-c-format
msgid "JPA 2"
msgstr ""

#. Tag: entry
#: getting-started.xml:86
#, no-c-format
msgid "Even though Hibernate Search can be used without JPA annotations the following instructions will use them for basic entity configuration (<emphasis>@Entity, @Id, @OneToMany,...</emphasis>). This part of the configuration could also be expressed in xml or code."
msgstr ""

#. Tag: para
#: getting-started.xml:90
#, no-c-format
msgid "Hibernate Search, however, has itself its own set of annotations (<emphasis>@Indexed, @DocumentId, @Field,...</emphasis>) for which there exists so far no XML based alternative; a better option is to use <xref linkend=\"hsearch-mapping-programmaticapi\"/>."
msgstr ""

#. Tag: title
#: getting-started.xml:102
#, no-c-format
msgid "Using Maven"
msgstr ""

#. Tag: para
#: getting-started.xml:104
#, no-c-format
msgid "The Hibernate Search artifacts can be found in Maven's central repository but are released first in the <ulink url=\"http://repository.jboss.org/nexus/content/groups/public-jboss/ \">JBoss maven repository</ulink>. So it's not a requirement but we recommend to add this repository to your <filename>settings.xml file</filename> (see also <ulink url=\"http://community.jboss.org/wiki/MavenGettingStarted-Users\">Maven Getting Started</ulink> for more details)."
msgstr ""

#. Tag: para
#: getting-started.xml:113
#, no-c-format
msgid "This is all you need to add to your pom.xml to get started:"
msgstr ""

#. Tag: title
#: getting-started.xml:116
#, no-c-format
msgid "Maven artifact identifier for Hibernate Search"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:118
#, no-c-format
msgid ""
      "&lt;dependency&gt;\n"
      "   &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n"
      "   &lt;artifactId&gt;hibernate-search&lt;/artifactId&gt;\n"
      "   &lt;version&gt;&version;&lt;/version&gt;\n"
      "&lt;/dependency&gt;"
msgstr ""

#. Tag: title
#: getting-started.xml:122
#, no-c-format
msgid "Optional Maven dependencies for Hibernate Search"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:124
#, no-c-format
msgid ""
      "&lt;dependency&gt;\n"
      "&lt;!-- If using JPA (2), add: --&gt;\n"
      "&lt;dependency&gt;\n"
      "   &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n"
      "   &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt;\n"
      "   &lt;version&gt;&hibernateVersion;&lt;/version&gt;\n"
      "&lt;/dependency&gt;\n"
      "&lt;!-- Additional Analyzers: --&gt;\n"
      "&lt;dependency&gt;\n"
      "   &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n"
      "   &lt;artifactId&gt;hibernate-search-analyzers&lt;/artifactId&gt;\n"
      "   &lt;version&gt;&version;&lt;/version&gt;\n"
      "&lt;/dependency&gt;\n"
      "&lt;!-- Infinispan integration: --&gt;\n"
      "&lt;dependency&gt;\n"
      "   &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n"
      "   &lt;artifactId&gt;hibernate-search-infinispan&lt;/artifactId&gt;\n"
      "   &lt;version&gt;&version;&lt;/version&gt;\n"
      "&lt;/dependency&gt;"
msgstr ""

#. Tag: para
#: getting-started.xml:127
#, no-c-format
msgid "Only the <emphasis>hibernate-search</emphasis> dependency is mandatory.<emphasis> hibernate-entitymanager</emphasis> is only required if you want to use Hibernate Search in conjunction with JPA."
msgstr ""

#. Tag: para
#: getting-started.xml:131
#, no-c-format
msgid "To use <emphasis>hibernate-search-infinispan</emphasis>, adding the JBoss Maven repository is no longer optional, it's mandatory as it contains the needed Infinispan dependencies and these are currently not mirrored by <literal>central</literal>."
msgstr ""

#. Tag: title
#: getting-started.xml:137
#, no-c-format
msgid "Using a Maven Archetype"
msgstr ""

#. Tag: para
#: getting-started.xml:139
#, no-c-format
msgid "Using a Maven Archetype it is possible to generate a Maven project from scratch, already containing the basic configuration files and some sample code and tests. Most development environments integrating maven support a graphical option to do this; the <literal>groupId</literal> is <literal>org.hibernate</literal> and the <literal>artifactId</literal> is <literal>hibernate-search-quickstart</literal>"
msgstr ""

#. Tag: title
#: getting-started.xml:147
#, no-c-format
msgid "generating a new project from commandline using the Maven Archetype"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:150
#, no-c-format
msgid ""
      "mvn archetype:generate                                 \\\n"
      "   -DarchetypeGroupId=org.hibernate                    \\\n"
      "   -DarchetypeArtifactId=hibernate-search-quickstart   \\\n"
      "   -DarchetypeVersion=&version;                      \\\n"
      "   -DarchetypeRepository=http://repository.jboss.org/nexus/content/groups/public-jboss/"
msgstr ""

#. Tag: title
#: getting-started.xml:156
#, no-c-format
msgid "Configuration"
msgstr ""

#. Tag: para
#: getting-started.xml:158
#, no-c-format
msgid "Once you have downloaded and added all required dependencies to your application you have to add a couple of properties to your hibernate configuration file. If you are using Hibernate directly this can be done in <literal>hibernate.properties</literal> or <literal>hibernate.cfg.xml</literal>. If you are using Hibernate via JPA you can also add the properties to <literal>persistence.xml</literal>. The good news is that for standard use most properties offer a sensible default. An example <filename>persistence.xml</filename> configuration could look like this:"
msgstr ""

#. Tag: title
#: getting-started.xml:169
#, no-c-format
msgid "Basic configuration options to be added to <literal><filename>hibernate.properties</filename></literal>, <literal><filename>hibernate.cfg.xml</filename></literal> or <filename>persistence.xml</filename>"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:174
#, no-c-format
msgid ""
      "...\n"
      "&lt;property name=\"hibernate.search.default.directory_provider\" \n"
      "          value=\"filesystem\"/&gt; \n"
      "\n"
      "&lt;property name=\"hibernate.search.default.indexBase\" \n"
      "          value=\"/var/lucene/indexes\"/&gt; \n"
      "..."
msgstr ""

#. Tag: para
#: getting-started.xml:177
#, no-c-format
msgid "First you have to tell Hibernate Search which <classname>DirectoryProvider</classname> to use. This can be achieved by setting the <literal>hibernate.search.default.directory_provider</literal> property. Apache Lucene has the notion of a <literal>Directory</literal> to store the index files. Hibernate Search handles the initialization and configuration of a Lucene <literal>Directory</literal> instance via a <literal>DirectoryProvider</literal>. In this tutorial we will use a a directory provider storing the index in the file system. This will give us the ability to physically inspect the Lucene indexes created by Hibernate Search (eg via <ulink url=\"http://code.google.com/p/luke/\">Luke</ulink>). Once you have a working configuration you can start experimenting with other directory providers (see <xref linkend=\"search-configuration-directory\"/>). Next to the directory provider you also have to specify the default base directory for all indexes via <literal>hibernate.search.default.indexBase</literal>."
msgstr ""

#. Tag: para
#: getting-started.xml:193
#, no-c-format
msgid "Lets assume that your application contains the Hibernate managed classes <classname>example.Book</classname> and <classname>example.Author</classname> and you want to add free text search capabilities to your application in order to search the books contained in your database."
msgstr ""

#. Tag: title
#: getting-started.xml:200
#, no-c-format
msgid "Example entities Book and Author before adding Hibernate Search specific annotations"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:203
#, no-c-format
msgid ""
      "package example;\n"
      "...\n"
      "@Entity\n"
      "public class Book {\n"
      "\n"
      "  @Id\n"
      "  @GeneratedValue\n"
      "  private Integer id; \n"
      "\n"
      "  private String title;  \n"
      "\n"
      "  private String subtitle; \n"
      "\n"
      "  @ManyToMany \n"
      "  private Set&lt;Author&gt; authors = new HashSet&lt;Author&gt;();\n"
      "\n"
      "  private Date publicationDate;\n"
      "  \n"
      "  public Book() {} \n"
      "  \n"
      "  // standard getters/setters follow here\n"
      "  ...\n"
      "}"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:205
#, no-c-format
msgid ""
      "package example;\n"
      "...\n"
      "@Entity\n"
      "public class Author {\n"
      "\n"
      "  @Id\n"
      "  @GeneratedValue\n"
      "  private Integer id;\n"
      "\n"
      "  private String name;\n"
      "\n"
      "  public Author() {} \n"
      " \n"
      "  // standard getters/setters follow here\n"
      "  ...\n"
      "}"
msgstr ""

#. Tag: para
#: getting-started.xml:208
#, no-c-format
msgid "To achieve this you have to add a few annotations to the <classname>Book</classname> and <classname>Author</classname> class. The first annotation <literal>@Indexed</literal> marks <classname>Book</classname> as indexable. By design Hibernate Search needs to store an untokenized id in the index to ensure index unicity for a given entity. <literal>@DocumentId</literal> marks the property to use for this purpose and is in most cases the same as the database primary key. The <literal>@DocumentId</literal> annotation is optional in the case where an <classname>@Id</classname> annotation exists."
msgstr ""

#. Tag: para
#: getting-started.xml:218
#, no-c-format
msgid "Next you have to mark the fields you want to make searchable. Let's start with <literal>title</literal> and <literal>subtitle</literal> and annotate both with <literal>@Field</literal>. The parameter <literal>index=Index.YES</literal> will ensure that the text will be indexed, while <literal> analyze=analyze.YES</literal> ensures that the text will be analyzed using the default Lucene analyzer. Usually, analyzing means chunking a sentence into individual words and potentially excluding common words like <literal>'a'</literal> or '<literal>the</literal>'. We will talk more about analyzers a little later on. The third parameter we specify within <literal>@Field</literal>,<literal> store=Store.NO</literal>, ensures that the actual data will not be stored in the index. Whether this data is stored in the index or not has nothing to do with the ability to search for it. From Lucene's perspective it is not necessary to keep the data once the index is created. The benefit of storing it is the ability to retrieve it via projections ( see <xref linkend=\"projections\"/>)."
msgstr ""

#. Tag: para
#: getting-started.xml:235
#, no-c-format
msgid "Without projections, Hibernate Search will per default execute a Lucene query in order to find the database identifiers of the entities matching the query critera and use these identifiers to retrieve managed objects from the database. The decision for or against projection has to be made on a case to case basis. The default behaviour is recommended since it returns managed objects whereas projections only return object arrays."
msgstr ""

#. Tag: para
#: getting-started.xml:243
#, no-c-format
msgid "Note that <literal>index=Index.YES</literal>, <literal>analyze=analyze.YES</literal> and <literal>store=Store.NO</literal> are the default values for these paramters and could be ommited."
msgstr ""

#. Tag: para
#: getting-started.xml:248
#, no-c-format
msgid "After this short look under the hood let's go back to annotating the <classname>Book</classname> class. Another annotation we have not yet discussed is <literal>@DateBridge</literal>. This annotation is one of the built-in field bridges in Hibernate Search. The Lucene index is purely string based. For this reason Hibernate Search must convert the data types of the indexed fields to strings and vice versa. A range of predefined bridges are provided, including the <classname>DateBridge</classname> which will convert a <classname>java.util.Date</classname> into a <classname>String</classname> with the specified resolution. For more details see <xref linkend=\"search-mapping-bridge\"/>."
msgstr ""

#. Tag: para
#: getting-started.xml:259
#, no-c-format
msgid "This leaves us with <literal>@IndexedEmbedded. </literal>This annotation is used to index associated entities (<literal>@ManyToMany</literal>, <literal>@*ToOne</literal>, <literal>@Embedded</literal> and <literal>@ElementCollection</literal>) as part of the owning entity. This is needed since a Lucene index document is a flat data structure which does not know anything about object relations. To ensure that the authors' name will be searchable you have to make sure that the names are indexed as part of the book itself. On top of <literal>@IndexedEmbedded</literal> you will also have to mark all fields of the associated entity you want to have included in the index with <literal>@Indexed</literal>. For more details see <xref linkend=\"search-mapping-associated\"/>."
msgstr ""

#. Tag: para
#: getting-started.xml:272
#, no-c-format
msgid "These settings should be sufficient for now. For more details on entity mapping refer to <xref linkend=\"search-mapping-entity\"/>."
msgstr ""

#. Tag: title
#: getting-started.xml:276
#, no-c-format
msgid "Example entities after adding Hibernate Search annotations"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:279
#, no-c-format
msgid ""
      "package example;\n"
      "...\n"
      "@Entity\n"
      "<emphasis role=\"bold\">@Indexed</emphasis>\n"
      "public class Book {\n"
      "\n"
      "  @Id\n"
      "  @GeneratedValue\n"
      "  private Integer id;\n"
      "  \n"
      "  <emphasis role=\"bold\">@Field(index=Index.YES, analyze=Analyze.YES, store=Store.NO)</emphasis>\n"
      "  private String title;\n"
      "  \n"
      "  <emphasis role=\"bold\">@Field(index=Index.YES, analyze=Analyze.YES, store=Store.NO)</emphasis>\n"
      "  private String subtitle; \n"
      "\n"
      "<emphasis role=\"bold\">  @Field(index = Index.YES, analyze=Analyze.NO, store = Store.YES)\n"
      "  @DateBridge(resolution = Resolution.DAY)</emphasis>\n"
      "  private Date publicationDate;\n"
      "\n"
      "  <emphasis role=\"bold\">@IndexedEmbedded</emphasis>\n"
      "  @ManyToMany \n"
      "  private Set&lt;Author&gt; authors = new HashSet&lt;Author&gt;();\n"
      "<emphasis role=\"bold\"></emphasis>\n"
      "  public Book() {\n"
      "  } \n"
      "  \n"
      "  // standard getters/setters follow here\n"
      "  ... \n"
      "}"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:281
#, no-c-format
msgid ""
      "package example;\n"
      "...\n"
      "@Entity\n"
      "public class Author {\n"
      "\n"
      "  @Id\n"
      "  @GeneratedValue\n"
      "  private Integer id;\n"
      "\n"
      "  <emphasis role=\"bold\">@Field</emphasis>\n"
      "  private String name;\n"
      "\n"
      "  public Author() {\n"
      "  } \n"
      " \n"
      "  // standard getters/setters follow here\n"
      "  ...\n"
      "}"
msgstr ""

#. Tag: title
#: getting-started.xml:286
#, no-c-format
msgid "Indexing"
msgstr ""

#. Tag: para
#: getting-started.xml:288
#, no-c-format
msgid "Hibernate Search will transparently index every entity persisted, updated or removed through Hibernate Core. However, you have to create an initial Lucene index for the data already present in your database. Once you have added the above properties and annotations it is time to trigger an initial batch index of your books. You can achieve this by using one of the following code snippets (see also <xref linkend=\"search-batchindex\"/>):"
msgstr ""

#. Tag: title
#: getting-started.xml:297
#, no-c-format
msgid "Using Hibernate Session to index data"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:299
#, no-c-format
msgid ""
      "FullTextSession fullTextSession = Search.getFullTextSession(session);\n"
      "fullTextSession.createIndexer().startAndWait();"
msgstr ""

#. Tag: title
#: getting-started.xml:303
#, no-c-format
msgid "Using JPA to index data"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:305
#, no-c-format
msgid ""
      "EntityManager em = entityManagerFactory.createEntityManager();\n"
      "FullTextEntityManager fullTextEntityManager = Search.getFullTextEntityManager(em);\n"
      "fullTextEntityManager.createIndexer().startAndWait();"
msgstr ""

#. Tag: para
#: getting-started.xml:308
#, no-c-format
msgid "After executing the above code, you should be able to see a Lucene index under <literal>/var/lucene/indexes/example.Book</literal>. Go ahead an inspect this index with <ulink url=\"http://code.google.com/p/luke/\">Luke</ulink>. It will help you to understand how Hibernate Search works."
msgstr ""

#. Tag: title
#: getting-started.xml:316
#, no-c-format
msgid "Searching"
msgstr ""

#. Tag: para
#: getting-started.xml:318
#, no-c-format
msgid "Now it is time to execute a first search. The general approach is to create a Lucene query (either via the Lucene API (<xref linkend=\"search-query-lucene-api\"/>) or via the Hibernate Search query DSL (<xref linkend=\"search-query-querydsl\"/>)) and then wrap this query into a <classname>org.hibernate.Query</classname> in order to get all the functionality one is used to from the Hibernate API. The following code will prepare a query against the indexed fields, execute it and return a list of <classname>Book</classname>s."
msgstr ""

#. Tag: title
#: getting-started.xml:328
#, no-c-format
msgid "Using Hibernate Session to create and execute a search"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:330
#, no-c-format
msgid ""
      "FullTextSession fullTextSession = Search.getFullTextSession(session);\n"
      "Transaction tx = fullTextSession.beginTransaction();\n"
      "\n"
      "// create native Lucene query unsing the query DSL\n"
      "// alternatively you can write the Lucene query using the Lucene query parser\n"
      "// or the Lucene programmatic API. The Hibernate Search DSL is recommended though\n"
      "QueryBuilder qb = fullTextSession.getSearchFactory()\n"
      "    .buildQueryBuilder().forEntity( Book.class ).get();\n"
      "org.apache.lucene.search.Query query = qb\n"
      "  .keyword()\n"
      "  .onFields(\"title\", \"subtitle\", \"authors.name\", \"publicationDate\")\n"
      "  .matching(\"Java rocks!\");\n"
      "  .createQuery();\n"
      "\n"
      "// wrap Lucene query in a org.hibernate.Query\n"
      "org.hibernate.Query hibQuery = \n"
      "    fullTextSession.createFullTextQuery(query, Book.class);\n"
      "\n"
      "// execute search\n"
      "List result = hibQuery.list();\n"
      "  \n"
      "tx.commit();\n"
      "session.close();"
msgstr ""

#. Tag: title
#: getting-started.xml:334
#, no-c-format
msgid "Using JPA to create and execute a search"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:336
#, no-c-format
msgid ""
      "EntityManager em = entityManagerFactory.createEntityManager();\n"
      "FullTextEntityManager fullTextEntityManager = \n"
      "    org.hibernate.search.jpa.Search.getFullTextEntityManager(em);\n"
      "em.getTransaction().begin();\n"
      "\n"
      "// create native Lucene query unsing the query DSL\n"
      "// alternatively you can write the Lucene query using the Lucene query parser\n"
      "// or the Lucene programmatic API. The Hibernate Search DSL is recommended though\n"
      "QueryBuilder qb = fullTextEntityManager.getSearchFactory()\n"
      "    .buildQueryBuilder().forEntity( Book.class ).get();\n"
      "org.apache.lucene.search.Query query = qb\n"
      "  .keyword()\n"
      "  .onFields(\"title\", \"subtitle\", \"authors.name\", \"publicationDate\")\n"
      "  .matching(\"Java rocks!\")\n"
      "  .createQuery();\n"
      "\n"
      "// wrap Lucene query in a javax.persistence.Query\n"
      "javax.persistence.Query persistenceQuery = \n"
      "    fullTextEntityManager.createFullTextQuery(query, Book.class);\n"
      "\n"
      "// execute search\n"
      "List result = persistenceQuery.getResultList();\n"
      "\n"
      "em.getTransaction().commit();\n"
      "em.close();"
msgstr ""

#. Tag: title
#: getting-started.xml:341
#, no-c-format
msgid "Analyzer"
msgstr ""

#. Tag: para
#: getting-started.xml:343
#, no-c-format
msgid "Let's make things a little more interesting now. Assume that one of your indexed book entities has the title \"Refactoring: Improving the Design of Existing Code\" and you want to get hits for all of the following queries: \"refactor\", \"refactors\", \"refactored\" and \"refactoring\". In Lucene this can be achieved by choosing an analyzer class which applies word stemming during the indexing <emphasis role=\"bold\">as well as</emphasis> the search process. Hibernate Search offers several ways to configure the analyzer to be used (see <xref linkend=\"analyzer\"/>):"
msgstr ""

#. Tag: para
#: getting-started.xml:355
#, no-c-format
msgid "Setting the <literal>hibernate.search.analyzer</literal> property in the configuration file. The specified class will then be the default analyzer."
msgstr ""

#. Tag: para
#: getting-started.xml:361
#, no-c-format
msgid "Setting the <literal><literal>@Analyzer</literal></literal> annotation at the entity level."
msgstr ""

#. Tag: para
#: getting-started.xml:366
#, no-c-format
msgid "Setting the <literal>@<literal>Analyzer</literal></literal> annotation at the field level."
msgstr ""

#. Tag: para
#: getting-started.xml:371
#, no-c-format
msgid "When using the <literal>@Analyzer</literal> annotation one can either specify the fully qualified classname of the analyzer to use or one can refer to an analyzer definition defined by the <literal>@AnalyzerDef</literal> annotation. In the latter case the Solr analyzer framework with its factories approach is utilized. To find out more about the factory classes available you can either browse the Solr JavaDoc or read the corresponding section on the <ulink url=\"http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters\">Solr Wiki.</ulink>"
msgstr ""

#. Tag: para
#: getting-started.xml:381
#, no-c-format
msgid "In the example below a <classname>StandardTokenizerFactory</classname> is used followed by two filter factories, <classname>LowerCaseFilterFactory</classname> and <classname>SnowballPorterFilterFactory</classname>. The standard tokenizer splits words at punctuation characters and hyphens while keeping email addresses and internet hostnames intact. It is a good general purpose tokenizer. The lowercase filter lowercases the letters in each token whereas the snowball filter finally applies language specific stemming."
msgstr ""

#. Tag: para
#: getting-started.xml:391
#, no-c-format
msgid "Generally, when using the Solr framework you have to start with a tokenizer followed by an arbitrary number of filters."
msgstr ""

#. Tag: title
#: getting-started.xml:395
#, no-c-format
msgid "Using <classname>@AnalyzerDef</classname> and the Solr framework to define and use an analyzer"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:398
#, no-c-format
msgid ""
      "@Entity\n"
      "@Indexed\n"
      "<emphasis role=\"bold\">@AnalyzerDef(name = \"customanalyzer\",\n"
      "  tokenizer = @TokenizerDef(factory = StandardTokenizerFactory.class),\n"
      "  filters = {\n"
      "    @TokenFilterDef(factory = LowerCaseFilterFactory.class),\n"
      "    @TokenFilterDef(factory = SnowballPorterFilterFactory.class, params = {\n"
      "      @Parameter(name = \"language\", value = \"English\")\n"
      "    })\n"
      "  })</emphasis>\n"
      "public class Book {\n"
      "\n"
      "  @Id\n"
      "  @GeneratedValue\n"
      "  @DocumentId\n"
      "  private Integer id;\n"
      "  \n"
      "  @Field\n"
      "  <emphasis role=\"bold\">@Analyzer(definition = \"customanalyzer\")</emphasis>\n"
      "  private String title;\n"
      "  \n"
      "  @Field\n"
      "  <emphasis role=\"bold\">@Analyzer(definition = \"customanalyzer\")</emphasis>\n"
      "  private String subtitle; \n"
      "\n"
      "  @IndexedEmbedded\n"
      "  @ManyToMany \n"
      "  private Set&lt;Author&gt; authors = new HashSet&lt;Author&gt;();\n"
      "\n"
      "<emphasis role=\"bold\"> </emphasis> @Field(index = Index.YES, analyze = Analyze.NO, store = Store.YES)\n"
      "  @DateBridge(resolution = Resolution.DAY)\n"
      "  private Date publicationDate;\n"
      "  \n"
      "  public Book() {\n"
      "  } \n"
      "  \n"
      "  // standard getters/setters follow here\n"
      "  ... \n"
      "}"
msgstr ""

#. Tag: para
#: getting-started.xml:401
#, no-c-format
msgid "Using <classname>@AnalyzerDef</classname> only defines an Analyzer, you still have to apply it to entities and or properties using <classname>@Analyzer</classname>. Like in the above example the <literal>customanalyzer</literal> is defined but not applied on the entity: it's applied on the <literal>title</literal> and <literal>subtitle</literal> properties only. An analyzer definition is global, so you can define it on any entity and reuse the definition on other entities."
msgstr ""

#. Tag: title
#: getting-started.xml:412
#, no-c-format
msgid "What's next"
msgstr ""

#. Tag: para
#: getting-started.xml:414
#, no-c-format
msgid "The above paragraphs helped you getting an overview of Hibernate Search. The next step after this tutorial is to get more familiar with the overall architecture of Hibernate Search (<xref linkend=\"search-architecture\"/>) and explore the basic features in more detail. Two topics which were only briefly touched in this tutorial were analyzer configuration (<xref linkend=\"analyzer\"/>) and field bridges (<xref linkend=\"search-mapping-bridge\"/>). Both are important features required for more fine-grained indexing. More advanced topics cover clustering (<xref linkend=\"jms-backend\"/>, <xref linkend=\"infinispan-directories\"/>) and large index handling (<xref linkend=\"search-configuration-directory-sharding\"/>)."
msgstr ""

