# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2011-09-17 19:35+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: architecture.xml:31
#, no-c-format
msgid "Architecture"
msgstr ""

#. Tag: title
#: architecture.xml:34
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: architecture.xml:36
#, no-c-format
msgid "Hibernate Search consists of an indexing and an index search component. Both are backed by Apache Lucene."
msgstr ""

#. Tag: para
#: architecture.xml:39
#, no-c-format
msgid "Each time an entity is inserted, updated or removed in/from the database, Hibernate Search keeps track of this event (through the Hibernate event system) and schedules an index update. All the index updates are handled without you having to use the Apache Lucene APIs (see <xref linkend=\"search-configuration-event\"/>)."
msgstr ""

#. Tag: para
#: architecture.xml:45
#, no-c-format
msgid "To interact with Apache Lucene indexes, Hibernate Search has the notion of <classname>IndexManager</classname>s. Each index manager has a name and represents a Lucene index which can be queried and will be updated by entity change events (fired by Hibernate Core)."
msgstr ""

#. Tag: para
#: architecture.xml:50
#, no-c-format
msgid "The default index manager implementation uses a <classname>DirectoryProvider</classname> to manage a given Lucene <classname>Directory</classname>. You can configure directory providers to adjust the directory target (see <xref linkend=\"search-configuration-directory\"/>), or you can ovverride the whole <classname>IndexManager</classname> implementation."
msgstr ""

#. Tag: para
#: architecture.xml:56
#, no-c-format
msgid "Hibernate Search uses the Lucene index to search an entity and return a list of managed entities saving you the tedious object to Lucene document mapping. The same persistence context is shared between Hibernate and Hibernate Search. As a matter of fact, the <classname>FullTextSession</classname> is built on top of the Hibernate Session so that the application code can use the unified <classname>org.hibernate.Query</classname> or <classname>javax.persistence.Query</classname> APIs exactly the same way a HQL, JPA-QL or native query would do."
msgstr ""

#. Tag: para
#: architecture.xml:66
#, no-c-format
msgid "To be more efficient Hibernate Search batches the write interactions with the Lucene index. There are currently two types of batching. Outside a transaction, the index update operation is executed right after the actual database operation. This is really a no batching setup. In the case of an ongoing transaction, the index update operation is scheduled for the transaction commit phase and discarded in case of transaction rollback. The batching scope is the transaction. There are two immediate benefits:"
msgstr ""

#. Tag: para
#: architecture.xml:77
#, no-c-format
msgid "Performance: Lucene indexing works better when operation are executed in batch."
msgstr ""

#. Tag: para
#: architecture.xml:82
#, no-c-format
msgid "ACIDity: The work executed has the same scoping as the one executed by the database transaction and is executed if and only if the transaction is committed. This is not ACID in the strict sense of it, but ACID behavior is rarely useful for full text search indexes since they can be rebuilt from the source at any time."
msgstr ""

#. Tag: para
#: architecture.xml:90
#, no-c-format
msgid "You can think of those two batch modes (no scope vs transactional) as the equivalent of the (infamous) autocommit vs transactional behavior. From a performance perspective, the <emphasis>in transaction</emphasis> mode is recommended. The scoping choice is made transparently. Hibernate Search detects the presence of a transaction and adjust the scoping."
msgstr ""

#. Tag: para
#: architecture.xml:95
#, no-c-format
msgid "It is recommended - for both your database and Hibernate Search - to execute your operations in a transaction, be it JDBC or JTA."
msgstr ""

#. Tag: note
#: architecture.xml:100
#, no-c-format
msgid "Hibernate Search works perfectly fine in the Hibernate / EntityManager long conversation pattern aka. atomic conversation."
msgstr ""

#. Tag: note
#: architecture.xml:104
#, no-c-format
msgid "Depending on user demand, additional scoping will be considered, the pluggability mechanism being already in place."
msgstr ""

#. Tag: title
#: architecture.xml:110
#, no-c-format
msgid "Back end"
msgstr ""

#. Tag: para
#: architecture.xml:112
#, no-c-format
msgid "Hibernate Search offers the ability to let the batched work being processed by different back ends. Several back ends are provided out of the box and you have the option to plugin your own implementation."
msgstr ""

#. Tag: title
#: architecture.xml:117
#, no-c-format
msgid "Back end types"
msgstr ""

#. Tag: title
#: architecture.xml:120
#, no-c-format
msgid "Lucene"
msgstr ""

#. Tag: para
#: architecture.xml:122
#, no-c-format
msgid "In this mode, all index update operations applied on a given node (JVM) will be executed to the Lucene directories (through the directory providers) by the same node. This mode is typically used in non clustered environment or in clustered environments where the directory store is shared."
msgstr ""

#. Tag: para
#: architecture.xml:140
#, no-c-format
msgid "Lucene back end configuration."
msgstr ""

#. Tag: para
#: architecture.xml:144
#, no-c-format
msgid "This mode targets non clustered applications, or clustered applications where the Directory is taking care of the locking strategy."
msgstr ""

#. Tag: para
#: architecture.xml:148
#, no-c-format
msgid "The main advantage is simplicity and immediate visibility of the changes in Lucene queries (a requirement in some applications)."
msgstr ""

#. Tag: para
#: architecture.xml:151
#, no-c-format
msgid "An alternative back end viable for non-clustered and non-shared index configurations is the near-real-time backend."
msgstr ""

#. Tag: title
#: architecture.xml:156
#, no-c-format
msgid "<title>JMS</title>"
msgstr ""

#. Tag: para
#: architecture.xml:158
#, no-c-format
msgid "All index update operations applied on a given node are sent to a JMS queue. A unique reader will then process the queue and update the master index. The master index is then replicated on a regular basis to the slave copies. This is known as the master/slaves pattern. The master is the sole responsible for updating the Lucene index. The slaves can accept read as well as write operations. However, they only process the read operation on their local index copy and delegate the update operations to the master."
msgstr ""

#. Tag: para
#: architecture.xml:178
#, no-c-format
msgid "JMS back end configuration."
msgstr ""

#. Tag: para
#: architecture.xml:182
#, no-c-format
msgid "This mode targets clustered environments where throughput is critical, and index update delays are affordable. Reliability is ensured by the JMS provider and by having the slaves working on a local copy of the index."
msgstr ""

#. Tag: title
#: architecture.xml:189
#, no-c-format
msgid "JGroups"
msgstr ""

#. Tag: para
#: architecture.xml:191
#, no-c-format
msgid "The JGroups based back end works similar to the JMS one and is designed after the same master/slave pattern. However, instead of JMS the JGroups toolkit is used as a replication mechanism. This back end can be used as an alternative to JMS when response time is critical, but i.e. JNDI service is not available."
msgstr ""

#. Tag: note
#: architecture.xml:198
#, no-c-format
msgid "Hibernate Search is an extensible architecture. Feel free to drop ideas for additional back ends to <literal>hibernate-dev@lists.jboss.org</literal>."
msgstr ""

#. Tag: title
#: architecture.xml:203
#, no-c-format
msgid "Work execution"
msgstr ""

#. Tag: para
#: architecture.xml:205
#, no-c-format
msgid "The indexing work (done by the back end) can be executed synchronously with the transaction commit (or update operation if out of transaction), or asynchronously."
msgstr ""

#. Tag: title
#: architecture.xml:210
#, no-c-format
msgid "Synchronous"
msgstr ""

#. Tag: para
#: architecture.xml:212
#, no-c-format
msgid "This is the safe mode where the back end work is executed in concert with the transaction commit. Under highly concurrent environment, this can lead to throughput limitations and it can increase the system response time if the backend is significantly slower than the transactional process and if a lot of IO operations are involved."
msgstr ""

#. Tag: title
#: architecture.xml:220
#, no-c-format
msgid "Asynchronous"
msgstr ""

#. Tag: para
#: architecture.xml:222
#, no-c-format
msgid "This mode delegates the work done by the back end to a different thread. That way, throughput and response time are (to a certain extend) decorrelated from the back end performance. The drawback is that a small delay appears between the transaction commit and the index update."
msgstr ""

#. Tag: para
#: architecture.xml:228
#, no-c-format
msgid "It is recommended to use synchronous execution first and evaluate asynchronous execution if performance problems occur and after having set up a proper benchmark."
msgstr ""

#. Tag: title
#: architecture.xml:236
#, no-c-format
msgid "Reader strategy"
msgstr ""

#. Tag: para
#: architecture.xml:238
#, no-c-format
msgid "When executing a query, Hibernate Search interacts with the Apache Lucene indexes through a reader strategy. Choosing a reader strategy will depend on the profile of the application (frequent updates, read mostly, asynchronous index update etc). See also"
msgstr ""

#. Tag: title
#: architecture.xml:245
#, no-c-format
msgid "Shared"
msgstr ""

#. Tag: para
#: architecture.xml:247
#, no-c-format
msgid "With this strategy, Hibernate Search will share the same <classname>IndexReader</classname>, for a given Lucene index, across multiple queries and threads provided that the <classname>IndexReader</classname> is still up-to-date. If the <classname>IndexReader</classname> is not up-to-date, a new one is opened and provided. Each <classname>IndexReader</classname> is made of several <classname>SegmentReader</classname>s. This strategy only reopens segments that have been modified or created after last opening and shares the already loaded segments from the previous instance. This strategy is the default."
msgstr ""

#. Tag: para
#: architecture.xml:258
#, no-c-format
msgid "The name of this strategy is <literal>shared</literal>."
msgstr ""

#. Tag: title
#: architecture.xml:262
#, no-c-format
msgid "Not-shared"
msgstr ""

#. Tag: para
#: architecture.xml:264
#, no-c-format
msgid "Every time a query is executed, a Lucene <classname>IndexReader</classname> is opened. This strategy is not the most efficient since opening and warming up an <classname>IndexReader</classname> can be a relatively expensive operation."
msgstr ""

#. Tag: para
#: architecture.xml:270
#, no-c-format
msgid "The name of this strategy is <literal>not-shared</literal>."
msgstr ""

#. Tag: title
#: architecture.xml:274
#, no-c-format
msgid "Custom"
msgstr ""

#. Tag: para
#: architecture.xml:276
#, no-c-format
msgid "You can write your own reader strategy that suits your application needs by implementing <classname>org.hibernate.search.reader.ReaderProvider</classname>. The implementation must be thread safe."
msgstr ""

#. Tag: title
#: architecture.xml:284
#, no-c-format
msgid "Index Manager customization"
msgstr ""

#. Tag: para
#: architecture.xml:286
#, no-c-format
msgid "The Index Manager is the component which holds a reference to the configured Reader strategy, the selected backend, the chosen Directory Provider for each index, and uses the three to implement the methods listed on the <classname>IndexManager</classname> interface."
msgstr ""

#. Tag: para
#: architecture.xml:291
#, no-c-format
msgid "It is possible to configure a custom <classname>IndexManager</classname> implementation, and this doesn't need to use the same components. For example you can delegate to a remote indexing service which doesn't necessarily expose a <classname>Directory</classname> interface. For details see <xref linkend=\"configuration-indexmanager\"/>."
msgstr ""

#. Tag: title
#: architecture.xml:298
#, no-c-format
msgid "Default: <literal>transactional</literal>"
msgstr ""

#. Tag: para
#: architecture.xml:299
#, no-c-format
msgid "The default <classname>IndexManager</classname> implementation is named transactional. This is the one mostly referred to in this documentation, unless stated otherwise, and is highly configurable as you can select different implementations for the reader strategy, back ends and Directory Providers."
msgstr ""

#. Tag: title
#: architecture.xml:306
#, no-c-format
msgid "Near-Real-Time"
msgstr ""

#. Tag: para
#: architecture.xml:307
#, no-c-format
msgid "The <classname>NRTIndexManager</classname> is an extension of the default <classname>IndexManager</classname>, leveraging the Lucene NRT (Near Real Time) features for extreme low latency index writes, but as a tradeoff it requires a non-clustered and non-shared index. In other words, it will ignore configuration settings for alternative back ends other than <literal>Lucene</literal> and will acquire exclusive write locks on the Directory."
msgstr ""

#. Tag: para
#: architecture.xml:314
#, no-c-format
msgid "To achieve this low latency writes, the IndexWriter will not flush to disk each change and the queries will be allowed to read updated state from the unflushed indexwriter buffers; the downside of this strategy is that if the application crashes or the IndexWriter is otherwise killed you'll have to rebuild the indexes as some updates might be lost."
msgstr ""

#. Tag: para
#: architecture.xml:319
#, no-c-format
msgid "Because of this downsides, and since a master node in cluster can be configured for good performance too, this is the recommended configuration only for non clustered websites with a limited amount of data to reindex."
msgstr ""

