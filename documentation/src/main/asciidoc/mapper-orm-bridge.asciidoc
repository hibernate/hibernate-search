[[mapper-orm-bridge]]
= Bridges
// Search 5 anchors backward compatibility
[[search-mapping-bridge]]

== Basics
// Search 5 anchors backward compatibility
[[section-custom-bridges]]

In Hibernate Search, bridges are the components responsible for converting pieces of data
from the entity model to the document model.

For example, when `@GenericField` is applied to a property of a custom enum type,
a built-in bridge will be used to convert this enum to a string when indexing,
and to convert the string back to an enum when projecting.

Similarly, when a entity identifier of type `Long` is mapped to a document identifier,
a built-in bridge will be used to convert the `Long` to a `String`
(since all document identifiers are strings)
when indexing,
and back from a `String` to a `Long` when loading search results.

Bridges are not limited to one-to-one mapping:
for example, the <<mapper-orm-geopoint-geopointbinding,`@GeoPointBinding`>> annotation,
which maps two properties annotated with `@Latitude` and `@Longitude`
to a single field, is backed by another built-in bridge.

While built-in bridges are provided for a wide range of standard types,
they may not be enough for complex models.
This is why bridges are really interesting:
it is possible to implement custom bridges and to refer to them in the Hibernate Search mapping.
Using custom bridges, custom types can be mapped,
even complex types that require user code to execute at indexing time.

There are multiple types of bridges,
detailed in the next sections.
If you need to implement a custom bridge, but don't quite know which type of bridge you need,
the following table may help:

[cols="h,1,1,1,1,1",options="header"]
.Comparison of available bridge types
|===
|Bridge type
|<<mapper-orm-bridge-valuebridge,`ValueBridge`>>
|<<mapper-orm-bridge-propertybridge,`PropertyBridge`>>
|<<mapper-orm-bridge-typebridge,`TypeBridge`>>
|<<mapper-orm-bridge-identifierbridge,`IdentifierBridge`>>
|<<mapper-orm-bridge-routingkeybridge,`RoutingKeyBridge`>>

|Annotation
|Built-in: <<mapper-orm-directfieldmapping,`@GenericField`, `@FullTextField`, ...>>
|Custom
|Custom
|Built-in: <<mapper-orm-identifiermapping,`@DocumentId`>>
|Custom

|Maps from...
|One property
|One property
|One property or more
|One property (usually the entity identifier)
|One property or more

|Maps to...
|One index field
|One index field or more
|One index field or more
|Document identifier
|<<concepts-sharding-routing,Routing key>>

|Supports <<mapper-orm-containerextractor,container extractors>>
|Yes
|No
|No
|No
|No

|Supports mutable types
|[red]*No*
|Yes
|Yes
|[red]*No*
|Yes
|===

[[mapper-orm-bridge-valuebridge]]
== Value bridges
// Search 5 anchors backward compatibility
[[_stringbridge]]

=== Basics

A value bridge is a pluggable component that implements
the mapping of a property to an index field.
It is applied to a property using a `@*Field` annotation:
`@GenericField`, `@FullTextField`, ...

A value bridge is relatively straightforward to implement:
in its simplest form,
it boils down to converting a value from the property type
to the index field type.
Thanks to the integration to the `@*Field` annotations,
several features come for free:

* The type of the index field can be customized directly in the `@*Field` annotation:
it can be defined as <<mapper-orm-directfieldmapping-sortable,sortable>>,
<<mapper-orm-directfieldmapping-projectable,projectable>>,
it can be assigned an <<mapper-orm-directfieldmapping-analyzer,analyzer>>,
...
* The bridge can be transparently applied to elements of a container.
For example, you can implement a `ValueBridge<ISBN, String>`
and transparently use it on a property of type `List<ISBN>`:
the bridge will simply be applied once per list element
and populate the index field with as many values.

However, due to these features,
several limitations are imposed on a value bridge
which are not present in a <<mapper-orm-bridge-propertybridge,property bridge>> for example:

* A value bridge only allows one-to-one mapping: one property to one index field.
A single value bridge cannot populate more than one index field.
* A value bridge cannot accept custom parameters.
The only parameters available are those exposed by the `@*Field` annotation.
* A value bridge *will not work correctly when applied to a mutable type*.
A value bridge is expected to be applied to "atomic" data, such as a `LocalDate`;
if it is applied to an entity, for example, extracting data from its properties,
Hibernate Search will not be aware of which properties are used
and will not be able to automatically trigger reindexing when these properties change.

Below is an example of a custom value bridge that converts
a custom `ISBN` type to its string representation to index it:

// Search 5 anchors backward compatibility
[[example-custom-string-bridge]]
.Implementing and using a `ValueBridge`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/simple/ISBNValueBridge.java[tags=include]
----
<1> The bridge must implement the `ValueBridge` interface.
Two generic type arguments must be provided:
the first one is the type of property values (values in the entity model),
and the second one is the type of index fields (values in the document model).
<2> The `toIndexedValue` method is the only one that must be implemented: all other methods are optional.
It takes the property value and a context object as parameters,
and is expected to return the corresponding index field value.
It is called when indexing,
but also when parameters to the search DSL <<search-dsl-argument-type,must be transformed>>.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/simple/Book.java[tags=include;!getters-setters]
----
<1> Map the property to an index field.
<2> Instruct Hibernate Search to use our custom value bridge.
It is also possible to reference the bridge by its name, in the case of a CDI/Spring bean.
<3> Customize the field as usual.
====

The example above is just a minimal implementations.
A custom value bridge can do more:

* it can <<mapper-orm-bridge-valuebridge-projection,convert the result of projections back to the property type>>;
* it can <<mapper-orm-bridge-valuebridge-indexnullas,parse the value passed to `indexNullAs`>>;
* ...

See the next sections for more information.

=== Type resolution

By default, the value bridge's property type and index field type are determined automatically,
using reflection to extract the generic type arguments of the `ValueBridge` interface:
the first argument is the property type while the second argument is the index field type.

For example, in `public class MyBridge implements ValueBridge<ISBN, String>`,
the property type is resolved to `ISBN` and the index field type is resolved to `String`:
the bridge will be applied to properties of type `ISBN`
and will populate an index field of type `String`.

The fact that types are resolved automatically using reflection brings a few limitations.
In particular, it means the generic type arguments cannot be just anything;
as a general rule, you should stick to literal types (`MyBridge implements ValueBridge<ISBN, String>`)
and avoid generic type parameters and wildcards (`MyBridge<T> implements ValueBridge<List<T>, T>`).

If you need more complex types,
you can bypass the automatic resolution and specify types explicitly
using a <<mapper-orm-bridge-valuebridge-valuebinder,`ValueBinder`>>.

[[mapper-orm-bridge-valuebridge-annotation-compatibility]]
=== Using value bridges in other `@*Field` annotations

In order to use a custom value bridge with specialized annotations such as `@FullTextField`,
the bridge must declare a compatible index field type.

For example:

* `@FullTextField` and `@KeywordField` require an index field type of type `String` (`ValueBridge<Whatever, String>`);
* `@ScaledNumberField` requires an index field type of type `BigDecimal` (`ValueBridge<Whatever, BigDecimal>`)
or `BigInteger` (`ValueBridge<Whatever, BigInteger>`).

Refer to <<mapper-orm-directfieldmapping-annotations>>
for the specific constraints of each annotation.

Attempts to use a bridge that declares an incompatible type will trigger exceptions at bootstrap.

[[mapper-orm-bridge-valuebridge-projection]]
=== Supporting projections with `fromIndexedValue()`
// Search 5 anchors backward compatibility
[[section-two-way-bridge]]

By default, any attempt to project on a field using a custom bridge will result in an exception,
because Hibernate Search doesn't know how to convert
the projected values obtained from the index back to the property type.

It is possible to <<search-dsl-projected-value-type,disable conversion explicitly>> to get the raw value from the index,
but another way of solving the problem is to simply implement `fromIndexedValue` in the custom bridge.
This method will be called whenever a projected value needs to be converted.

.Implementing `fromIndexedValue` to convert projected values
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/projection/ISBNValueBridge.java[tags=include]
----
<1> Implement `fromIndexedValue` as necessary.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/projection/Book.java[tags=include;!getters-setters]
----
<1> Map the property to an index field.
<2> Instruct Hibernate Search to use our custom value bridge.
<3> Do not forget to configure the field as projectable.
====

[[mapper-orm-bridge-valuebridge-indexnullas]]
=== Supporting `indexNullAs` with `parse()`

By default, the `indexNullAs` attribute of `@*Field` annotations cannot be used together with a custom bridge.

In order to make it work, the bridge needs to implement the `parse` method
so that Hibernate Search can convert the string assigned to `indexNullAs`
to a value of the correct type for the index field.

.Implementing `parse` to support `indexNullAs`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/indexnullas/ISBNValueBridge.java[tags=include]
----
<1> Implement `parse` as necessary.
The bridge may throw exceptions for invalid strings.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/indexnullas/Book.java[tags=include;!getters-setters]
----
<1> Map the property to an index field.
<2> Instruct Hibernate Search to use our custom value bridge.
<3> Set `indexNullAs` to a valid value.
====

=== Compatibility across indexes with `isCompatibleWith()`

A value bridges is involved in indexing,
but also in the various search DSLs,
to convert values passed to the DSL to an index field value that the backend will understand.

When creating a predicate targeting a single field across multiple indexes,
Hibernate Search will have multiple bridges to choose from: one per index.
Since only one predicate with a single value can be created,
Hibernate Search needs to pick a single bridge.
By default, when a custom bridge is assigned to the field,
Hibernate Search will throw an exception because it cannot decide which bridge to pick.

If the bridges assigned to the field in all indexes produce the same result,
it is possible to indicate to Hibernate Search that any bridge will do
by implementing `isCompatibleWith`.

This method accepts another bridge in parameter,
and returns `true` if that bridge can be expected to always behave the same as `this`.

.Implementing `isCompatibleWith` to support multi-index search
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/compatible/ISBNValueBridge.java[tags=include]
----
<1> Implement `isCompatibleWith` as necessary.
Here we just deem any instance of the same class to be compatible.
====

[[mapper-orm-bridge-valuebridge-valuebinder]]
=== Configuring the bridge more finely with `ValueBinder`

To configure a bridge more finely,
it is possible to implement a value binder that will be executed at bootstrap.
This binder will be able in particular to define a custom index field type.

.Implementing a `ValueBinder`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/binder/ISBNValueBinder.java[tags=include]
----
<1> The binder must implement the `ValueBinder` interface.
<2> Implement the `bind` method.
<3> Call `context.setBridge` to define the value bridge to use.
<4> Pass the expected type of property values.
<5> Pass the value bridge instance.
<6> Use the context's type factory to create an index field type.
<7> Pick a base type for the index field using an `as*()` method.
<8> Configure the type as necessary.
This configuration will set defaults that are applied for any type using this bridge,
but they can be overridden.
Type configuration is similar to the attributes found in the various `@*Field` annotations.
See <<mapper-orm-bridge-index-field-type-dsl>> for more information.
<9> The value bridge must still be implemented.
Here the bridge class is nested in the binder class,
because it is more convenient,
but you are obviously free to implement it in a separate java file.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/binder/Book.java[tags=include]
----
<1> Map the property to an index field.
<2> Instruct Hibernate Search to use our custom value binder.
Note the use of `valueBinder` instead of `valueBridge`.
It is also possible to reference the binder by its name, in the case of a CDI/Spring bean.
<3> Customize the field as usual.
Configuration set using annotation attributes take precedence
over the index field type configuration set by the value binder.
For example, in this case, the field with be sortable
even if the binder didn't define the field as sortable.
====

[NOTE]
====
When using a value binder with a specialized `@*Field` annotation,
the index field type must be compatible with the annotation.

For example, `@FullTextField` will only work if the index field type was created using `asString()`.

These restrictions are similar to those when
assigning a value bridge directly;
see <<mapper-orm-bridge-valuebridge-annotation-compatibility>>.
====

=== Accessing the ORM session or session factory from the bridge

Contexts passed to the bridge methods can be used to retrieve the Hibernate ORM session or session factory.

.Retrieving the ORM session or session factory from a `ValueBridge`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/ormcontext/MyDataValueBridge.java[tags=include]
----
<1> Apply an extension to the context to access content specific to Hibernate ORM.
<2> Retrieve the `SessionFactory` from the extended context.
The `Session` is not available here.
<3> Apply an extension to the context to access content specific to Hibernate ORM.
<4> Retrieve the `Session` from the extended context.
====

=== Injecting beans into the value bridge or value binder

With <<configuration-bean-frameworks,compatible frameworks>>,
Hibernate Search supports injection of beans into both the `ValueBridge` and the `ValueBinder`.

NOTE: This only applies to beans instantiated by Hibernate Search itself.
As a rule of thumb, if you need to call `new MyBridge()` at some point,
the bridge won't get auto-magically injected.

The context passed to the value binder's `bind` method
also exposes a `getBeanResolver` method to access the bean resolver and instantiate beans explicitly.

See <<configuration-bean-injection>> for more details.

=== Experimental features

[WARNING]
====
These features are *experimental*.
Usual compatibility policies do not apply: incompatible changes may be introduced in any future release.
====

[[_type_aware_bridge]]
The context passed to the value binder's `bind` method
exposes a `getBridgedElement` method that gives access to metadata about the value being bound,
in particular its type.

See the javadoc for more information.

[[mapper-orm-bridge-propertybridge]]
== Property bridge
// Search 5 anchors backward compatibility
[[section-field-bridge]]

=== Basics

A property bridge, like a <<mapper-orm-bridge-valuebridge,value bridge>>,
is a pluggable component that implements
the mapping of a property to one or more index fields.
It is applied to a property using a custom annotation, specific to each bridge.

Compared to the value bridge, the property bridge is more complex to implement,
but covers a broader range of use cases:

* A property bridge can map a single property to more than one index field.
* A property bridge can support custom parameters, thanks to its custom annotation.
* A property bridge can work correctly when applied to a mutable type,
provided it is implemented correctly.

However, due to its rather flexible nature,
the property bridge does not transparently provide all the features
that come for free with a value bridge.
They can be supported, but have to be implemented manually.
This includes in particular container extractors,
which cannot be combined with a property bridge:
the property bridge must extract container values explicitly.

Implementing a property bridge requires three components:

. A custom annotation, to declare in the entity model that a bridge must be bound to a property.
. A custom implementation of `PropertyBinder`, to actually bind the bridge to a property at bootstrap.
This involves declaring the parts of the property that will be used,
declaring the index fields that will be populated along with their type,
and instantiating the property bridge.
. A custom implementation of `PropertyBridge`, to perform the conversion at runtime.
This involves extracting data from the property, transforming it if necessary,
and pushing it to index fields.

Below is an example of a custom property bridge that maps
a list of invoice line items
to several fields summarizing the invoice.

// Search 5 anchors backward compatibility
[[example-field-bridge]]
.Implementing and using a `PropertyBridge`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/simple/InvoiceLineItemsSummaryBinding.java[tags=include]
----
<1> Define an annotation with retention `RUNTIME`.
*Any other retention policy will cause the annotation to be ignored by Hibernate Search*.
<2> Since we're defining a property bridge, allow the annotation
to target either methods (getters) or fields.
<3> Mark this annotation as a property binding,
and instruct Hibernate Search to apply the given binder whenever it finds this annotation.
It is also possible to reference the binder by its name, in the case of a CDI/Spring bean.
<4> Optionally, mark the annotation as documented,
so that it is included in the javadoc of your entities.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/simple/InvoiceLineItemsSummaryBinder.java[tags=binder]
----
<1> The binder must implement the `PropertyBinder` interface,
setting its generic type argument to the type of the corresponding annotation.
<2> Implement the `bind` method in the binder.
<3> Declare the dependencies of the bridge,
i.e. the parts of the property value that the bridge will actually use.
This is *absolutely necessary* in order for Hibernate Search to correctly trigger reindexing
when these parts are modified.
See <<mapper-orm-bridge-bridgedelement-dependencies>>
for more information about declaring dependencies.
<4> Declare the fields that are populated by this bridge.
In this case we're creating a `summary` object field,
which will have multiple sub-fields (see below).
See <<mapper-orm-bridge-index-field-dsl>>
for more information about declaring index fields.
<5> Declare the type of the sub-fields.
We're going to index monetary amounts,
so we will use a `BigDecimal` type with two digits after the decimal point.
See <<mapper-orm-bridge-index-field-type-dsl>>
for more information about declaring index field types.
<6> Call `context.setBridge` to define the property bridge to use,
and pass an instance of the bridge.
<7> Pass a reference to the `summary` object field to the bridge.
<8> Create a sub-field for the `total` amount of the invoice,
a sub-field for the sub-total for `books`,
and a sub-field for the sub-total for `shipping`.
Pass references to these fields to the bridge.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/simple/InvoiceLineItemsSummaryBinder.java[tags=bridge]
----
<1> The bridge must implement the `PropertyBridge` interface.
Here the bridge class is nested in the binder class,
because it is more convenient,
but you are obviously free to implement it in a separate java file.
<2> The bridge stores references to the fields:
it will need them when indexing.
<3> Implement the `write` method in the bridge.
This method is called on indexing.
<4> The bridged element is passed as an `Object`,
so cast it to the correct type.
<5> Extract data from the bridged element,
and optionally transform it.
<6> Add an object to the `summary` object field.
Note the `summary` field was declared at the root,
so we call `addObject` directly on the `target` argument.
<7> Add a value to each of the `summary.total`, `summary.books`
and `summary.shipping` fields.
Note the fields were declared as sub-fields of `summary`,
so we call `addValue` on `summaryValue` instead of `target`.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/simple/Invoice.java[tags=include,!getters-setters]
----
<1> Apply the bridge using its custom annotation.
====

=== Passing parameters
// Search 5 anchors backward compatibility
[[_parameterized_bridge]]

By defining attributes in the property binding annotation,
it is possible to pass parameters to the binder:

// Search 5 anchors backward compatibility
[[example-passing-bridge-parameters]]
.Passing parameters to a `PropertyBinder`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/parameter/InvoiceLineItemsSummaryBinding.java[tags=include]
----
<1> Define an attribute of type String to specify the field name.
Any type supported by annotations can be used.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/parameter/InvoiceLineItemsSummaryBinder.java[tags=include]
----
<1> Implement the `initialize` method in the binder.
<2> Extract the parameter value from the annotation and store it in the binder.
<3> In the `bind` method, use the value of parameters.
Here use the `fieldName` parameter to set the field name,
but we could pass parameters for any purpose:
defining the field as sortable,
defining a normalizer,
...

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/parameter/Invoice.java[tags=include,!getters-setters]
----
<1> Apply the bridge using its custom annotation,
setting the `fieldName` parameter.
====

=== Accessing the ORM session from the bridge

Contexts passed to the bridge methods can be used to retrieve the Hibernate ORM session.

.Retrieving the ORM session from a `PropertyBridge`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/ormcontext/MyDataPropertyBinder.java[tags=include]
----
<1> Apply an extension to the context to access content specific to Hibernate ORM.
<2> Retrieve the `Session` from the extended context.
====

=== Injecting beans into the binder

With <<configuration-bean-frameworks,compatible frameworks>>,
Hibernate Search supports injection of beans into the `PropertyBinder`.

The context passed to the property binder's `bind` method
also exposes a `getBeanResolver` method to access the bean resolver and instantiate beans explicitly.

See <<configuration-bean-injection>> for more details.

=== Experimental features

[WARNING]
====
These features are *experimental*.
Usual compatibility policies do not apply: incompatible changes may be introduced in any future release.
====

The context passed to the property binder's `bind` method
exposes a `getBridgedElement` method that gives access to metadata about the property being bound,
in particular its name and type.

The metadata can also be used to inspect the type of the property in details:

* Getting accessors to properties.
* Detecting properties with markers.
Markers are applied by specific annotations carrying a `@MarkerBinding` meta-annotation.

See the javadoc for more information.

[[mapper-orm-bridge-typebridge]]
== Type bridge
// Search 5 anchors backward compatibility
[[_classbridge]]

=== Basics

include::todo-placeholder.asciidoc[]
// TODO intro

// Search 5 anchors backward compatibility
[[example-class-bridge]]
// TODO basic example with annotation, binder, bridge, mapping

=== Passing parameters

include::todo-placeholder.asciidoc[]
//TODO parameterized example

=== Accessing the ORM session from the bridge

include::todo-placeholder.asciidoc[]
// TODO HibernateOrmExtension.get()? Make sure to warn that not all operations are valid.

=== Injecting beans into the binder

include::todo-placeholder.asciidoc[]
// TODO say it's supported, give some basic information and link to <<configuration-bean-injection>>

=== Experimental features

include::todo-placeholder.asciidoc[]
// TODO experimental support for reflection with getBridgedElement (advanced use, no example)

[[mapper-orm-bridge-identifierbridge]]
== Identifier bridges

=== Basics

include::todo-placeholder.asciidoc[]
// TODO intro

// TODO basic example with bridge + mapping with @DocumentId

// TODO NOTE: constraints regarding the type parameters (unless using ValueBinder)

=== Compatibility across indexes with `isCompatibleWith()`

include::todo-placeholder.asciidoc[]
// TODO isCompatibleWith
=== Configuring the bridge more finely with `IdentifierBinder`

include::todo-placeholder.asciidoc[]
// TODO IdentifierBinder: intro

// TODO example with bridge + binder with setBridge + mapping with @DocumentId

=== Accessing the ORM session or session factory from the bridge

include::todo-placeholder.asciidoc[]
// TODO HibernateOrmExtension.get()? Make sure to warn that not all operations are valid.

=== Injecting beans into the bridge or binder

include::todo-placeholder.asciidoc[]
// TODO say it's supported, give some basic information and link to <<configuration-bean-injection>>

=== Experimental features

include::todo-placeholder.asciidoc[]
// TODO experimental support for reflection with getBridgedElement (advanced use, no example)

[[mapper-orm-bridge-routingkeybridge]]
== Routing key bridges

=== Basics

include::todo-placeholder.asciidoc[]
//TODO HSEARCH-3709 basic example with annotation, binder, bridge, mapping

=== Passing parameters

include::todo-placeholder.asciidoc[]
//TODO HSEARCH-3709 parameterized example

=== Accessing the ORM session from the bridge

include::todo-placeholder.asciidoc[]
// TODO HSEARCH-3709 HibernateOrmExtension.get()? Make sure to warn that not all operations are valid.

=== Injecting beans into the binder

include::todo-placeholder.asciidoc[]
// TODO HSEARCH-3709 say it's supported, give some basic information and link to <<configuration-bean-injection>>

=== Experimental features

include::todo-placeholder.asciidoc[]
// TODO HSEARCH-3709 experimental support for reflection with getBridgedElement (advanced use, no example)

[[mapper-orm-bridge-bridgedelement-dependencies]]
== Declaring dependencies to bridged elements

include::todo-placeholder.asciidoc[]
// TODO HSEARCH-3710

[[mapper-orm-bridge-index-field-dsl]]
== Declaring index fields

include::todo-placeholder.asciidoc[]
// TODO

[[mapper-orm-bridge-index-field-type-dsl]]
== Declaring index field types

include::todo-placeholder.asciidoc[]
// TODO

[[mapper-orm-bridge-resolver]]
== Assigning default bridges with the bridge resolver
// Search 5 anchors backward compatibility
[[_bridgeprovider_associate_a_bridge_to_a_given_return_type]]

include::todo-placeholder.asciidoc[]

// TODO HSEARCH-3678
