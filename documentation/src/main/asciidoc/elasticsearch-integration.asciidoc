== Integration with Elasticsearch

=== Status

[CAUTION]
====
This feature is in the process of being implemented.
Read this section carefully!
====

The integration with Elasticsearch is in early development and should be considered highly experimental.
We would certainly not recommend using it in any production level software,
yet we're happy to share the early state in case you are interested to participate in early testing or help
us with development in any way.

Patches can be sent as pull requests to the https://github.com/hibernate/hibernate-search[Github repository],
but also general feedback, suggestions and questions are very welcome.

To get in touch or find other interesting links for contributors, see the http://hibernate.org/community/[Hibernate Community].

Development is fast so by the time you will read this documentation, many more features will have been implemented in the current development branch.

=== Goal of the Elasticsearch integration

The goal of integrating with Elasticsearch is to allow Hibernate Search users to benefit
from the full-text capabilities integrated with Hibernate but replacing the local Lucene based index with a remote Elasticsearch service.

There could be various reasons to prefer this over an "embedded Lucene" approach:
 
 - wish to separate the service running your application from the Search service
 - integrate with an existing Elasticsearch instance
 - benefit from Elasticsearch's out of the box horizontal scalability features
 - explore the data updated by an Hibernate powered application using the Elasticsearch dashboard integrations such as Kibana
 
Unless the aim is to integrate with the other system, the benefits compared to a simple Lucene embedded approach
have a couple of drawbacks to consider:

 - incur a performance penalty of remote RPCs both for index updates and to run queries
 - need to buy & manage additional servers 
 
Which solution is best will depend on the specific needs of your system.
 
=== Try the experimental Elasticsearch integration

To experiment with the new Elasticsearch integration you will have to download Elasticsearch and run it:
Hibernate Search connects to an Elasticsearch node but does not provide one.

==== Dependencies

In addition to the usual dependencies like Hibernate ORM and Hibernate Search,
you will need the new `hibernate-search-backend-elasticsearch` jar.

.Maven dependencies for Hibernate Search with Elasticsearch
====
[source, XML]
[subs="verbatim,attributes"]
----
<dependency>
   <groupId>org.hibernate</groupId>
   <artifactId>hibernate-search-backend-elasticsearch</artifactId>
   <version>{hibernateSearchVersion}</version>
</dependency>
----
====

==== Configuration

Just a few new configuration properties have been introduced so far:

Hostname and port for Elasticsearch:: `hibernate.search.elasticsearch.host \http://127.0.0.1:9200`
Define which indexes should use it:: `hibernate.search.default.indexmanager elasticsearch`
Decide who manages the index creation:: `hibernate.search.elasticsearch.index_management_strategy CREATE_DELETE`
Timeout in ms when waiting for indexes to become available after creation:: `hibernate.search.elasticsearch.index_management_wait_timeout 10000`

Other options for the `hibernate.search.elasticsearch.index_management_strategy` property are:

[options="header"]
|===============
|Value|Definition
|NONE|Indexes will not be created nor deleted.
|MERGE|Missing indexes and mappings will be created, mappings will be updated if there are no conflicts.
|CREATE|Indexed will be deleted if existing and then created. This will delete all content from the index!
|CREATE_DELETE|Similarly to 'CREATE' but will also delete the index at shutdown. Commonly used for tests.
|===============

==== Updating the indexes

As with Lucene in embedded mode, the indexes are updated automatically when you create or update
entities which are mapped to Hibernate Search using the same annotations already familiar from <<search-mapping>>.

==== Running a query on an Elasticsearch mapped entity

In many cases the existing way (see <<search-query>>) of running queries should work:
we do automatically translate the most common types of Apache Lucene queries and many of the queries generated by the Hibernate Search DSL.

On top of translating Lucene queries, you can directly create Elasticsearch queries by using either its String format or a JSON format:

.Creating an Elasticsearch native query from a string
====
[source, JAVA]
----
FullTextSession fullTextSession = Search.getFullTextSession(session);
QueryDescriptor query = ElasticsearchQueries.fromQueryString("title:tales");
List<?> result = fullTextSession.createFullTextQuery(query, ComicBook.class).list();
----
====

.Creating an Elasticsearch native query from JSON
====
[source, JAVA]
----
FullTextSession fullTextSession = Search.getFullTextSession(session);
QueryDescriptor query = ElasticsearchQueries.fromJson(
      "{ 'query': { 'match' : { 'lastName' : 'Brand' } } }");
List<?> result = session.createFullTextQuery(query, GolfPlayer.class).list();
----
====

==== Spatial queries

The Elasticsearch integration supports spatial queries by using either the DSL or native Elasticsearch queries.

For regular usage, there are no particular requirements for spatial support.

However, if you want to calculate the distance from your entities to a point without sorting by the distance to this point,
you need to enable the Groovy plugin by adding the following snippet to your Elasticsearch configuration:

.Enabling Groovy support in your elasticsearch.yml
----
script.engine.groovy.inline.search: on
----

==== Limitations

Many features are not implemented yet: this preview is not very useful yet!
On the other hand, implementing some of these is not very hard: this might be the perfect time to join the project.

Please check with JIRA and the mailing lists for updates, but at the time of writing this at least the following features are known to not work yet:

 - Analyzer support
 - Filters
 - Faceting
 - Optimisation
 - Timeouts
 - Delete by queries
 - Resolution for Date type mapping is ignored
 - Scrolling on large results
 - MoreLikeThis queries
 - Mixing Lucene based indexes and Elasticsearch based indexes
 
Any aspect related to performance and efficiency will also be looked at only at the end of basic feature development.

