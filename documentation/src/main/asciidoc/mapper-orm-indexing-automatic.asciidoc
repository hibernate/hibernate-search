[[mapper-orm-indexing-automatic]]
= Automatic indexing

By default, every time an entity is changed through a Hibernate ORM Session,
if that entity is <<mapper-orm-entityindexmapping,mapped to an index>>,
Hibernate Search updates the relevant index.

Below are a few facts to explain how automatic indexing works.

Changes have to occur in the ORM session in order to be detected::
Hibernate Search uses internal events of Hibernate ORM in order to detect changes:
these events will only be triggered if you actually manipulate managed entity objects in your code,
updating them by setting their properties or deleting them by calling the appropriate method
on the Hibernate ORM session.
+
Conversely, changes resulting from `insert`/`delete`/`update` queries, be it SQL or JPQL/HQL queries,
are not detected by Hibernate Search.
This is because queries are executed on the database side,
 without Hibernate having any knowledge of which entities are actually created, deleted or updated.
One workaround is to <<mapper-orm-indexing-explicit,explicitly reindex>> after you run such queries.
Indexing happens after transactions are committed::
Indexes are not updated immediately, but only after transactions are successfully committed.
That way, if a transaction is rolled back, the indexes will be left in a state consistent with the database.
+
This means in particular that Hibernate Search will retrieve the state of entities after the transaction is committed.
As a result, clearing the session during the transaction may cause trouble:
some entities may end up being referenced by Hibernate Search for indexing,
without being attached to the session.
When Hibernate Search will try to index them, they will not be being able to load some of their lazy properties,
leading to a `LazyInitializationException`.
See <<mapper-orm-indexing-explicit-writeplan-process-execute>> for a few solutions.
Index changes may not be visible immediately::
By default, the transaction commit will return after index changes are committed to the indexes.
This means index changes are safely stored to disk,
but this does not mean a search query ran immediately after the transaction commit will take the changes into account:
when using the Elasticsearch backend in particular, changes may take some time to be visible from search queries.
+
See <<mapper-orm-indexing-automatic-synchronization>> for details.
Only relevant changes trigger indexing::
Hibernate Search is aware of the properties that are accessed when building indexed documents.
Thanks to that knowledge, it is able to skip reindexing
when a property is modified, but does not affect the indexed document.
+
You can control this "dirty checking" by setting
the <<configuration-property-types,boolean property>> `hibernate.search.automatic_indexing.enable_dirty_check`:
+
* by default, or when set to `true`,
Hibernate Search will consider whether modified properties are relevant
before triggering reindexing.
* when set to `false`, Hibernate Search will trigger reindexing upon any change,
regardless of the entity properties that changed.
Indexing may fetch extra data from the database::
Even when you change only a single property of an indexed entity,
if that property is indexed,
Hibernate Search needs to rebuild the corresponding document *in full*.
+
Even if Hibernate Search tries to only load what is necessary for indexing,
depending on your mapping, this may lead to lazy associations being loaded just to reindex entities,
even if you didn't need them in your business code.
+
This extra cost can be mitigated to some extent by leveraging Hibernate ORM's batch fetching;
see link:{hibernateDocUrl}#configurations-database-fetch[the `batch_fetch_size` property]
and link:{hibernateDocUrl}#fetching-batch[the `@BatchSize` annotation].

Automatic indexing may be unnecessary if your index is read-only
or if you update it regularly through <<mapper-orm-indexing-explicit,explicit indexing>>.
You can enable or disable automatic indexing by setting the configuration property
`hibernate.search.automatic_indexing.strategy`:

* when set to `session`, each change to an indexed entity
(persist, update, delete) through a Hibernate ORM Session/EntityManager
will automatically lead to a similar modification to the index.
* when set to `none`, changes to entities are ignored,
and indexing requires an explicit action (see <<mapper-orm-indexing-explicit>>).

[[mapper-orm-indexing-automatic-synchronization]]
== Synchronization with the indexes

include::todo-placeholder.asciidoc[]
// TODO HSEARCH-3317 explain in transaction/post transaction synchronizations, when they can be used and what they mean
// TODO HSEARCH-3305 explain explicit flush/refresh

Hibernate Search offers multiple strategies to control synchronization with the indexes
during automatic indexing,
i.e. to control the minimum progress of indexing before the transaction commit returns.

You can define a default strategy for all sessions by setting the configuration property
`hibernate.search.automatic_indexing.synchronization_strategy`:

* when set to `queued`, the transaction commit will return as soon as
the index changes are queued in the backend.
+
This strategy offers no guarantee as to whether indexing will be performed successfully,
or even whether indexing will be performed at all:
the local JVM may crash before the works are executed, in which case the indexing requests will be forgotten,
or indexing may simply fail.
* by default or when set to `committed`, the transaction commit will return as soon as
the index changes are committed to disk.
+
This generally means that at the very least
that the backend validated the index changes,
took appropriate measures to be able to recover the changes in the event of a crash,
and confirmed to Hibernate Search it did so
(e.g. for Elasticsearch, Hibernate Search received a successful response to the HTTP request).
+
This strategy offers no guarantee as to whether indexed documents are searchable:
the backend may delay indexing in order to improve performance,
meaning a search query executed immediately after Hibernate ORM returns from the transaction
may return outdated information.
+
This is true in particular with the Elasticsearch backend,
which is link:{elasticsearchDocUrl}/getting-started-concepts.html#_near_realtime_nrt[near-real-time]
by default.
* when set to `searchable`, the transaction commit will return as soon as
the index changes are committed to disk
*and* the relevant documents are searchable.
The backend will be told to make the documents searchable as soon as possible.
+
Depending on the backend and its configuration,
this strategy may lead to poor indexing throughput,
because the backend may not be optimized for frequent, on-demand index refreshes.
+
That is why this strategy is only recommended if you know your backend is optimized for it
(for example this is true for the default configuration of the Lucene backend, but not for the Elasticsearch backend),
or for integration tests.

While the above configuration property defines a default,
it is possible to override this default on a particular session
by calling `SearchSession#setAutomaticIndexingSynchronizationStrategy` and passing a different strategy.
The built-in strategies can be retrieved by calling
`AutomaticIndexingSynchronizationStrategy.queued()`,
`AutomaticIndexingSynchronizationStrategy.committed()`
or `AutomaticIndexingSynchronizationStrategy.searchable()`,
but you can also define a custom strategy.

.Overriding the automatic indexing synchronization strategy
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/indexing/HibernateOrmAutomaticIndexingIT.java[tags=automatic-indexing-synchronization-strategy-override]
----
<1> Obtain the search session, which by default uses the synchronization strategy configured in properties.
<2> Override the syncrhonization strategy.
<3> Change an entity.
<4> Commit the changes, triggering reindexing.
<5> The overridden strategy guarantees that the modified book will be present in these results,
even though the query was executed _just after_ the transaction commit.
====