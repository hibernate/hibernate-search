[[mapper-orm-indexing-automatic]]
= Automatic indexing
// Search 5 anchors backward compatibility
[[_automatic_indexing]]

By default, every time an entity is changed through a Hibernate ORM Session,
if that entity is <<mapper-orm-entityindexmapping,mapped to an index>>,
Hibernate Search updates the relevant index.

To be precise, index updates happen on transaction commit or,
if working outside of a transaction, on session flush.

[[mapper-orm-indexing-automatic-configuration]]
== Configuration

Automatic indexing may be unnecessary if your index is read-only
or if you update it regularly by reindexing,
either using the  <<mapper-orm-indexing-massindexer,`MassIndexer`>>
or <<mapper-orm-indexing-manual,manually>>.
You can enable or disable automatic indexing by setting the configuration property
`hibernate.search.automatic_indexing.strategy`:

* when set to `session` (the default), each change to an indexed entity
(persist, update, delete) through a Hibernate ORM Session/EntityManager
will automatically lead to a similar modification to the index.
* when set to `none`, changes to entities are ignored,
and indexing requires an explicit action.

[[mapper-orm-indexing-automatic-concepts]]
== How automatic indexing works

Changes have to occur in the ORM session in order to be detected::
Hibernate Search uses internal events of Hibernate ORM in order to detect changes:
these events will only be triggered if you actually manipulate managed entity objects in your code,
updating them by setting their properties or deleting them by calling the appropriate method
on the Hibernate ORM session.
+
Conversely, changes resulting from `insert`/`delete`/`update` queries, be it SQL or JPQL/HQL queries,
are not detected by Hibernate Search.
This is because queries are executed on the database side,
 without Hibernate having any knowledge of which entities are actually created, deleted or updated.
One workaround is to explicitly reindex after you run such queries,
either using the  <<mapper-orm-indexing-massindexer,`MassIndexer`>>
or <<mapper-orm-indexing-manual,manually>>.
Entity data is retrieved from entities upon session flushes::
When a Hibernate ORM session is flushed,
Hibernate Search will extract data from the entities
to build documents to index,
and will put these documents in an internal buffer for later indexing (see the next paragraphs).
+
This means in particular that you can safely `clear()` the session after a `flush()`:
entity changes performed up to the flush will be indexed correctly.
[NOTE]
====
If you come from Hibernate Search 5 or earlier,
you may see this as a significant improvement:
there is no need to call `flushToIndexes()` and update indexes in the middle of a transaction anymore,
except for larger volumes of data (see <<mapper-orm-indexing-manual-indexingplan-process-execute>>).
====
Inside transactions, indexing happens after transactions are committed::
When entity changes happen inside a transaction,
indexes are not updated immediately, but only after the transaction is successfully committed.
That way, if a transaction is rolled back, the indexes will be left in a state consistent with the database,
discarding all the index changes that were planned during the transaction.
+
However, if you perform a batch process inside a transaction,
and perform flush/clear, regularly to save memory,
be aware that Hibernate Search's internal buffer holding documents to index
will grow on each flush, and will not be cleared until the transaction is committed or rolled back.
If you encounter memory issues because of that,
see <<mapper-orm-indexing-manual-indexingplan-process-execute>> for a few solutions.
Outside of transactions, indexing happens on session flush::
When entity changes happen outside of any transaction (not recommended),
indexes are updated immediately upon session `flush()`.
Without that flush, indexes will not be updated automatically.
Index changes may not be visible immediately::
By default, indexing will resume the application thread after index changes are committed to the indexes.
This means index changes are safely stored to disk,
but this does not mean a search query ran immediately after indexing will take the changes into account:
when using the Elasticsearch backend in particular, changes may take some time to be visible from search queries.
+
See <<mapper-orm-indexing-automatic-synchronization>> for details.
Only relevant changes trigger indexing::
Hibernate Search is aware of the properties that are accessed when building indexed documents.
Thanks to that knowledge, it is able to skip reindexing
when a property is modified, but does not affect the indexed document.
+
You can control this "dirty checking" by setting
the <<configuration-property-types,boolean property>> `hibernate.search.automatic_indexing.enable_dirty_check`:
+
* by default, or when set to `true`,
Hibernate Search will consider whether modified properties are relevant
before triggering reindexing.
* when set to `false`, Hibernate Search will trigger reindexing upon any change,
regardless of the entity properties that changed.
Indexing may fetch extra data from the database::
Even when you change only a single property of an indexed entity,
if that property is indexed,
Hibernate Search needs to rebuild the corresponding document *in full*.
+
Even if Hibernate Search tries to only load what is necessary for indexing,
depending on your mapping, this may lead to lazy associations being loaded just to reindex entities,
even if you didn't need them in your business code.
+
This extra cost can be mitigated to some extent by leveraging Hibernate ORM's batch fetching;
see link:{hibernateDocUrl}#configurations-database-fetch[the `batch_fetch_size` property]
and link:{hibernateDocUrl}#fetching-batch[the `@BatchSize` annotation].

[[mapper-orm-indexing-automatic-synchronization]]
== Synchronization with the indexes

include::components/writing-reading-intro-note.asciidoc[]

When a transaction is committed,
automatic indexing can (and, by default, will) block the application thread
until indexing reaches a certain level of completion.

There are two main reasons for blocking the thread:

1. *Indexed data safety*:
if, once the database transaction completes,
index data must be safely stored to disk,
an <<concepts-commit-refresh,index commit>> is necessary.
Without it, index changes may only be safe after a few seconds,
when a periodic index commit happens in the background.
2. *Real-time search queries*:
if, once the database transaction completes,
any search query must immediately take the index changes into account,
an <<concepts-commit-refresh,index refresh>> is necessary.
Without it, index changes may only be visible after a few seconds,
when a periodic index refresh happens in the background.

These two requirements are controlled by the _synchronization strategy_.
The default strategy is defined by the configuration property
`hibernate.search.automatic_indexing.synchronization.strategy`.
Below is a reference of all available strategies and their guarantees.

|====
.2+h|Strategy 3+h| Guarantees when the application thread resumes .2+h|Throughput
h|Changes applied (with or without <<concepts-commit-refresh,commit>>)
h|Changes safe from crash/power loss (<<concepts-commit-refresh,commit>>)
h|Changes visible on search (<<concepts-commit-refresh,refresh>>)
|`async`|No guarantee|No guarantee|No guarantee|Best
|`write-sync` (**default**)|Guaranteed|Guaranteed|No guarantee|Medium
|`sync`|Guaranteed|Guaranteed|Guaranteed|<<mapper-orm-indexing-automatic-synchronization-refresh-throughput,Worst>>
|====

[[mapper-orm-indexing-automatic-synchronization-refresh-throughput]]
[WARNING]
====
Depending on the backend and its configuration,
the `sync` strategy may lead to poor indexing throughput,
because the backend may not be designed for frequent, on-demand index refreshes.

This is why this strategy is only recommended if you know your backend is designed for it, or for integration tests.
In particular, the `sync` strategy will work fine with the default configuration of the Lucene backend,
but will perform poorly with the Elasticsearch backend.
====

[[mapper-orm-indexing-automatic-synchronization-failures]]
[NOTE]
====
Indexing failures may be reported differently depending on the chosen strategy:

* Failure to extract data from entities:
** Regardless of the strategy, throws an exception in the application thread.
* Failure to apply index changes (i.e. I/O operations on the index):
** For strategies that apply changes immediately: throws an exception in the application thread.
** For strategies that do *not* apply changes immediately:
forwards the failure to the <<configuration-background-failure-handling,failure handler>>,
which by default will simply log the failure.
* Failure to commit index changes:
** For strategies that guarantee an index commit: throws an exception in the application thread.
** For strategies that do *not* guarantee an index commit:
forwards the failure to the <<configuration-background-failure-handling,failure handler>>,
which by default will simply log the failure.
====

While the configuration property mentioned above defines a default,
it is possible to override this default on a particular session
by calling `SearchSession#setAutomaticIndexingSynchronizationStrategy` and passing a different strategy.

The built-in strategies can be retrieved by calling:

* `AutomaticIndexingSynchronizationStrategy.async()`
* `AutomaticIndexingSynchronizationStrategy.writeSync()`
* or `AutomaticIndexingSynchronizationStrategy.sync()`

Alternatively, you can also implement a custom strategy.

.Overriding the automatic indexing synchronization strategy
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/indexing/HibernateOrmAutomaticIndexingIT.java[tags=automatic-indexing-synchronization-strategy-override]
----
<1> Obtain the search session, which by default uses the synchronization strategy configured in properties.
<2> Override the synchronization strategy.
<3> Change an entity.
<4> Commit the changes, triggering reindexing.
<5> The overridden strategy guarantees that the modified book will be present in these results,
even though the query was executed _just after_ the transaction commit.
====