[[mapper-orm-bridge-index-field-type-dsl]]
= Defining index field types

== Basics

A specificity of Lucene-based search engines (including Elasticsearch) is that field types
are much more complex than just a data type ("string", "integer", ...).

When declaring a field, you must not only declare the data type,
but also various characteristics that will define how the data is stored exactly:
is the field sortable,
is it projectable,
is it analyzed and if so with which analyzer,
...

Because of this complexity,
when field types must be defined in the various binders
(`ValueBinder`, `PropertyBinder`, `TypeBinder`),
they are defined using a dedicated DSL.

The entry point to this DSL is the `IndexFieldTypeFactory`.
The type factory is generally accessible though the context object passed to the binders
(`context.typeFactory()`).
In the case of `PropertyBinder` and `TypeBinder`,
the type factory can also be passed to the lambda expression passed to the `field` method
to define the field type inline.

The type factory exposes various `as*()` methods,
for example `asString` or `asLocalDate`.
These are the first steps of the type definition DSL,
where the data type is defined.
They return other steps, from which options
can be set, such as the analyzer.
See below for an example.

.Defining a field type
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/types/dsl/simple/ISBNBinder.java[tags=include]
----
<1> Get the `IndexFieldTypeFactory` from the binding context.
<2> Define the data type.
<3> Define options.
Available options differ based on the field type:
for example, `normalizer` is available for `String` fields,
but not for `Double` fields.
<4> Get the index field type.
====

[NOTE]
====
In `ValueBinder`, the call to `toIndexFieldType()` is omitted:
`context.bridge(...)` expects to be passed the last DSL step,
not a fully built type.

`toIndexFieldType()` is also omitted in the lambda expressions
passed to the `field` method of
the <<mapper-orm-bridge-index-field-dsl,field declaration DSL>>.
====

== Available data types

All available data types have a dedicated `as*()` method in `IndexFieldTypeFactory`.
For details, see the javadoc of `IndexFieldTypeFactory`,
or the backend-specific documentation:

* <<backend-lucene-field-types-available,available data types in the Lucene backend>>
* <<backend-elasticsearch-field-types-available,available data types in the Elasticsearch backend>>

== Available type options

Most of the options available in the index field type DSL are identical
to the options exposed by `@*Field` annotations.
See <<mapper-orm-directfieldmapping-annotation-attributes>> for details about them.

Other options are explained in the following sections.

== DSL converter

[NOTE]
====
This section is not relevant for `ValueBinder`:
Hibernate Search sets the DSL converter automatically for value bridges,
creating a DSL converter that simply delegates to the value bridge.
====

The various search DSLs expose some methods that expect a field value:
`matching()`, `between()`, `atMost()`, `missingValue().use()`, ...
By default, the expected type will be the same as the data type,
i.e. `String` if you called `asString()`,
`LocalDate` if you called `asLocalDate()`,
etc.

This can be annoying when the bridge converts values from a different type when indexing.
For example, if the bridge converts an enum to a string when indexing,
you probably don't want to pass a string to search predicates,
but rather the enum.

By setting a DSL converter on a field type,
it is possible to change the expected type of values passed to the various DSL,
See below for an example.

.Assigning a DSL converter to a field type
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/types/dsl/dslconverter/ISBNBinder.java[tags=include]
----
<1> Define the data type as `String`.
<2> Define a DSL converter that converts from `ISBN` to `String`.
This converter will be used transparently by the search DSLs.
<3> Define the input type as `ISBN` by passing `ISBN.class` as the first parameter.
<4> Define how to convert an `ISBN` to a `String` by passing a converter as the second parameter.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/types/dsl/dslconverter/IndexFieldTypeDslDslConverterIT.java[tags=include]
----
<1> Thanks to the DSL converter,
predicates targeting fields using our type
accept `ISBN` values by default.
====

NOTE: DSL converters can be disabled in the various DSLs where necessary.
See <<search-dsl-argument-type>>.

== Projection converter

[NOTE]
====
This section is not relevant for `ValueBinder`:
Hibernate Search sets the projection converter automatically for value bridges,
creating a projection converter that simply delegates to the value bridge.
====

By default, the type of values returned by <<search-dsl-projection-field,field projections>>
or <<search-dsl-aggregation,aggregations>>
will be the same as the data type of the corresponding field,
i.e. `String` if you called `asString()`,
`LocalDate` if you called `asLocalDate()`,
etc.

This can be annoying when the bridge converts values from a different type when indexing.
For example, if the bridge converts an enum to a string when indexing,
you probably don't want projections to return a string,
but rather the enum.

By setting a projection converter on a field type,
it is possible to change the type of values returned by field projections or aggregations.
See below for an example.

.Assigning a projection converter to a field type
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/types/dsl/projectionconverter/ISBNBinder.java[tags=include]
----
<1> Define the data type as `String`.
<2> Define a projection converter that converts from `String` to `ISBN`.
This converter will be used transparently by the search DSLs.
<3> Define the converted type as `ISBN` by passing `ISBN.class` as the first parameter.
<4> Define how to convert a `String` to an `ISBN` by passing a converter as the second parameter.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/types/dsl/projectionconverter/IndexFieldTypeDslProjectionConverterIT.java[tags=include]
----
<1> Thanks to the projection converter,
fields using our type are projected to an `ISBN` by default.
====

NOTE: Projection converters can be disabled in the projection DSL where necessary.
See <<search-dsl-projected-value-type>>.

== Backend-specific types

Backends define extensions to this DSL
to define backend-specific types.

See:

* <<backend-lucene-field-types-extension,Lucene index field type DSL extension>>
* <<backend-elasticsearch-field-types-extension,Elasticsearch index field type DSL extension>>
