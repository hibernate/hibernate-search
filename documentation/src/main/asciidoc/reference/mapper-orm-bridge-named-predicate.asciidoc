[[mapper-orm-bridge-named-predicate]]
= Defining named predicates

When implementing a <<mapper-orm-bridge-propertybridge,`PropertyBinder`>>
or <<mapper-orm-bridge-typebridge,`TypeBinder`>>,
it is possible to assign "named predicates"
to index schema elements (either the index root or an <<mapper-orm-bridge-index-field-dsl-object,object field>>).

These named predicates will then be usable <<search-dsl-predicate-named,through the Search DSL>>,
referencing them by name and optionally passing parameters.
The main point is that the implementation is hidden from callers:
they do not need to understand how data is indexed in order to use a named predicate.

Below is a simple example using the DSL to declare an object field and assign a named predicate to that field,
in a property binder.

.Declaring a named predicate
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/namedpredicate/SkuIdentifierBinder.java[tags=binder]
----
<1> The binder defines a named predicate.
Note this predicate is assigned to an object field.
<2> The predicate name will be used to refer to this predicate when <<search-dsl-predicate-named,calling the named predicate>>.
Since the predicate is assigned to an object field,
callers will have to prefix the predicate name with the path to that object field.
<3> The named predicate provider will define how to create the predicate when searching.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/namedpredicate/SkuIdentifierBinder.java[tags=bridge]
----
<1> Here the bridge class is nested in the binder class,
because it is more convenient,
but you are obviously free to implement it in a separate java file.
<2> The bridge creates an object to hold the various components of the SKU identifier.
<3> The bridge populates the various components of the SKU identifier.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/namedpredicate/SkuIdentifierBinder.java[tags=named-predicate-provider]
----
<1> The named predicate provider must implement the `NamedPredicateProvider` interface.
+
Here the named predicate provider class is nested in the binder class,
because it is more convenient,
but you are obviously free to implement it in a separate java file.
<2> The context passed to the provider exposes the predicate factory,
which is the entry point to the <<search-dsl-predicate,predicate DSL>>,
used to create predicates.
<3> The provider can access parameters that are passed when calling the named predicates.
Getting the param using the `param` method assumes that the param has been defined.
Alternatively it is possible to use `paramOptional` to get the `java.util.Optional` of the param.
<4> The provider uses the predicate factory to create predicates.
In this example, this implementation transforms a pattern with a custom format into three patterns,
one for each field populated by the bridge.
<5> Be careful: the search predicate factory expects paths
relative to the object field where the named predicate was registered.
Here the path `departmentCode` will be understood as `<path to the object field>.departmentCode`.
See also <<search-dsl-paths>>.
<6> Do not forget to call `toPredicate()` to return a `SearchPredicate` instance.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/namedpredicate/ItemStock.java[tags=include;!getters-setters]
----
<1> Apply the bridge using the `@PropertyBinding` annotation.
The predicate will be available in the Search DSL,
as shown in <<search-dsl-predicate-named>>.
====
