[[indexing-plan]]
= [[mapper-orm-indexing-manual-indexingplan-writes]] [[_deleting_instances_from_the_index]] [[_adding_instances_to_the_index]] Explicitly indexing on entity change events

When <<indexing-automatic,automatic indexing>> is <<mapping-annotations,disabled>>
or simply not supported (e.g. <<mapper-pojo-standalone-indexing-automatic,with the Standalone POJO Mapper>>),
the indexes will start empty and stay that way
until explicit indexing commands are sent to Hibernate Search.

Explicitly indexing is done in the context of a <<entrypoints-search-session,`SearchSession`>>
using the `SearchIndexingPlan` interface.
This interface represents the (mutable) set of changes
that are planned in the context of a session,
and will be applied to indexes upon transaction commit (for the <<mapper-orm,Hibernate ORM integration>>)
or upon closing the `SearchSession` (for the <<mapper-pojo-standalone,Standalone POJO Mapper>>).

When indexing explicitly,
the indexing plan should be used whenever a change event (add, update, delete) occurs on an entity.
The indexing plan will automatically determine whether the changed entity needs to be reindexed.
It will even infer which other entities need to be <<mapping-reindexing,reindexed>>
because their indexed document embeds the changed entity
(e.g. through <<mapping-indexedembedded,`@IndexedEmbedded`>>).

The `SearchIndexingPlan` interface offers the following methods:

`add(Object entity)`::
(Available with the <<mapper-pojo-standalone,Standalone POJO Mapper>> only.)
+
Add a document to the index if the entity type is mapped to an index (`@Indexed`).
+
WARNING: This may create duplicates in the index if the document already exists.
Prefer `addOrUpdate` unless you are really sure of yourself and need a (slight) performance boost.
`addOrUpdate(Object entity)`::
Add or update a document in the index if the entity type is mapped to an index (`@Indexed`),
and re-index documents that embed this entity (through `@IndexedEmbedded` for example).
`delete(Object entity)`::
Delete a document from the index if the entity type is mapped to an index (`@Indexed`),
and re-index documents that embed this entity (through `@IndexedEmbedded` for example).
`purge(Class<?> entityType, Object id)`::
Delete the entity from the index,
but do not try to re-index documents that embed this entity.
+
Compared to `delete`, this is mainly useful if the entity has already been deleted from the database
and is not available, even in a detached state, in the session.
In that case, reindexing associated entities will be the user's responsibility,
since Hibernate Search cannot know which entities are associated to an entity that no longer exists.
`purge(String entityName, Object id)`::
Same as `purge(Class<?> entityType, Object id)`,
but the entity type is referenced by its name (see `@javax.persistence.Entity#name`).
`process()` and `execute()`::
(Available with the <<mapper-orm,Hibernate ORM integration>> only.)
+
Respectively, process the changes and apply them to indexes.
+
These methods will be executed automatically on commit,
so they are only useful when processing large number of items,
as explained in <<mapper-orm-indexing-manual-indexingplan-process-execute>>.

Below are examples of using `addOrUpdate` and `delete`.

.Explicitly adding or updating an entity in the index using `SearchIndexingPlan`
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/indexing/HibernateOrmManualIndexingIT.java[tags=indexing-plan-addOrUpdate]
----
<1> <<entrypoints-search-session,Retrieve the `SearchSession`>>.
<2> Get the search session's indexing plan.
<3> Fetch from the database the `Book` we want to index;
this could be replaced with any other way of loading an entity when using the <<mapper-pojo-standalone,Standalone POJO Mapper>>.
<4> Submit the `Book` to the indexing plan for an add-or-update operation.
The operation won't be executed immediately,
but will be delayed until the transaction is committed (<<mapper-orm,Hibernate ORM integration>>)
or until the `SearchSession` is closed (<<mapper-pojo-standalone,Standalone POJO Mapper>>).
====

.Explicitly deleting an entity from the index using `SearchIndexingPlan`
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/indexing/HibernateOrmManualIndexingIT.java[tags=indexing-plan-delete]
----
<1> <<entrypoints-search-session,Retrieve the `SearchSession`>>.
<2> Get the search session's indexing plan.
<3> Fetch from the database the `Book` we want to un-index;
this could be replaced with any other way of loading an entity when using the <<mapper-pojo-standalone,Standalone POJO Mapper>>.
<4> Submit the `Book` to the indexing plan for a delete operation.
The operation won't be executed immediately,
but will be delayed until the transaction is committed (<<mapper-orm,Hibernate ORM integration>>)
or until the `SearchSession` is closed (<<mapper-pojo-standalone,Standalone POJO Mapper>>).
====

[TIP]
====
Multiple operations can be performed in a single indexing plan.
The same entity can even be changed multiple times,
for example added and then removed:
Hibernate Search will simplify the operation as expected.

This will work fine for any reasonable number of entities,
but changing or simply loading large numbers of entities in a single session
requires special care with Hibernate ORM,
and then some extra care with Hibernate Search.
See <<mapper-orm-indexing-manual-indexingplan-process-execute>> for more information.
====

[[indexing-plan-synchronization]]
== [[mapper-orm-indexing-automatic-synchronization]] Synchronization with the indexes

[[indexing-plan-synchronization-basics]]
=== [[mapper-orm-indexing-automatic-synchronization-basics]] Basics

include::components/writing-reading-intro-note.asciidoc[]

[WARNING]
====
Indexing synchronization is only relevant when <<coordination-none,coordination is disabled>>.

With coordination strategies such as <<coordination-outbox-polling,`outbox-polling`>>,
indexing happens in background threads and is always asynchronous.
====

When a transaction is committed (<<mapper-orm,Hibernate ORM integration>>)
or the `SearchSession` is closed (<<mapper-pojo-standalone,Standalone POJO Mapper>>),
<<coordination-none,with default coordination settings>>,
the execution of the indexing plan (<<indexing-automatic,automatic>> or otherwise)
can block the application thread
until indexing reaches a certain level of completion.

There are two main reasons for blocking the thread:

1. *Indexed data safety*:
if, once the database transaction completes,
index data must be safely stored to disk,
an <<concepts-commit-refresh,index commit>> is necessary.
Without it, index changes may only be safe after a few seconds,
when a periodic index commit happens in the background.
2. *Real-time search queries*:
if, once the database transaction completes (for the <<mapper-orm,Hibernate ORM integration>>)
or the ``SearchSession``'s `close()` method returns (for the <<mapper-pojo-standalone,Standalone POJO Mapper>>),
any search query must immediately take the index changes into account,
an <<concepts-commit-refresh,index refresh>> is necessary.
Without it, index changes may only be visible after a few seconds,
when a periodic index refresh happens in the background.

These two requirements are controlled by the _synchronization strategy_.
The default strategy is defined by the configuration property
`hibernate.search.indexing.plan.synchronization.strategy`.
Below is a reference of all available strategies and their guarantees.

|====
.2+h|Strategy .2+h|Throughput 3+h| Guarantees when the application thread resumes
h|Changes applied (with or without <<concepts-commit-refresh,commit>>)
h|Changes safe from crash/power loss (<<concepts-commit-refresh,commit>>)
h|Changes visible on search (<<concepts-commit-refresh,refresh>>)
|`async`|Best|No guarantee|No guarantee|No guarantee
|`write-sync` (**default**)|Medium|Guaranteed|Guaranteed|No guarantee
|`read-sync`|Medium to <<indexing-plan-synchronization-refresh-throughput,worst>>|Guaranteed|No guarantee|Guaranteed
|`sync`|<<indexing-plan-synchronization-refresh-throughput,Worst>>|Guaranteed|Guaranteed|Guaranteed
|====

[[indexing-plan-synchronization-refresh-throughput]]
[WARNING]
====
[[mapper-orm-indexing-automatic-synchronization-refresh-throughput]] Depending on the backend and its configuration,
the `sync` and `read-sync` strategies may lead to poor indexing throughput,
because the backend may not be designed for frequent, on-demand index refreshes.

This is why this strategy is only recommended if you know your backend is designed for it, or for integration tests.
In particular, the `sync` strategy will work fine with the default configuration of the Lucene backend,
but will perform poorly with the Elasticsearch backend.
====

[[indexing-plan-synchronization-failures]]
[NOTE]
====
[[mapper-orm-indexing-automatic-synchronization-failures]]
Indexing failures may be reported differently depending on the chosen strategy:

* Failure to extract data from entities:
** Regardless of the strategy, throws an exception in the application thread.
* Failure to apply index changes (i.e. I/O operations on the index):
** For strategies that apply changes immediately: throws an exception in the application thread.
** For strategies that do *not* apply changes immediately:
forwards the failure to the <<configuration-background-failure-handling,failure handler>>,
which by default will simply log the failure.
* Failure to commit index changes:
** For strategies that guarantee an index commit: throws an exception in the application thread.
** For strategies that do *not* guarantee an index commit:
forwards the failure to the <<configuration-background-failure-handling,failure handler>>,
which by default will simply log the failure.
====

[[indexing-plan-synchronization-override-per-session]]
=== [[mapper-orm-indexing-automatic-synchronization-override-per-session]] [[_per_session_override]] Per-session override

While the configuration property mentioned above defines a default,
it is possible to override this default on a particular session
by calling `SearchSession#indexingPlanSynchronizationStrategy(...)` and passing a different strategy.

The built-in strategies can be retrieved by calling:

* `IndexingPlanSynchronizationStrategy.async()`
* `IndexingPlanSynchronizationStrategy.writeSync()`
* `IndexingPlanSynchronizationStrategy.readSync()`
* or `IndexingPlanSynchronizationStrategy.sync()`

.Overriding the automatic indexing synchronization strategy
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/indexing/HibernateOrmIndexingPlanSynchronizationStrategyIT.java[tags=indexing-plan-synchronization-strategy-override]
----
<1> <<entrypoints-search-session,Retrieve the `SearchSession`>>, which by default uses the synchronization strategy configured in properties.
<2> Override the synchronization strategy.
<3> Change an entity.
<4> Commit the changes, triggering reindexing.
<5> The overridden strategy guarantees that the modified book will be present in these results,
even though the query was executed _just after_ the transaction commit
(here we're using the <<mapper-orm,Hibernate ORM integration>>).
====

[[indexing-plan-synchronization-custom]]
=== [[mapper-orm-indexing-automatic-synchronization-custom]] [[_custom_strategy]] Custom strategy

You can also implement custom strategy.
The custom strategy can then be set just like the built-in strategies:

* as the default by setting
the configuration property `hibernate.search.indexing.plan.synchronization.strategy`
to a <<configuration-bean-reference-parsing,bean reference>> pointing to the custom implementation,
for example `class:com.mycompany.MySynchronizationStrategy`.
* at the session level by passing an instance of the custom implementation
to `SearchSession#indexingPlanSynchronizationStrategy(...)`.
