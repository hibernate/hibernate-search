[[mapper-orm-alternatives]]
= Mapping multiple alternatives
// Search 5 anchors backward compatibility
[[_dynamic_analyzer_selection]]

== Basics

In some situations, it is necessary for a particular property to be indexed differently
depending on the value of another property.

For example there may be an entity that has text properties whose content
is in a different language depending on the value of another property, say `language`.
In that case, you probably want to analyze the text differently depending on the language.

While this could definitely be solved with a custom <<mapper-orm-bridge-typebridge,type bridge>>,
a convenient solution to that problem is to use the `AlternativeBinder`.
This binder solves the problem this way:

* at bootstrap, declare one index field per language, assigning a different analyzer to each field;
* at runtime, put the content of the text property in a different field based on the language.

In order to use this binder, you will need to:

* annotate a property with `@AlternativeDiscriminator` (e.g. the `language` property);
* implement an `AlternativeBinderDelegate` that will declare the index fields
(e.g. one field per language) and create an `AlternativeValueBridge`.
This bridge is responsible for passing the property value to the relevant field at runtime.
* apply the `AlternativeBinder` to the type hosting the properties
(e.g. the type declaring the `language` property and the multi-language text properties).
Generally you will want to create your own annotation for that.

Below is an example of how to use the binder.

[[example-analyzer-discriminator]]
.Mapping a property to a different index field based on a `language` property using `AlternativeBinder`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/alternative/alternativebinder/Language.java[tags=include]
----
<1> A `Language` enum defines supported languages.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/alternative/alternativebinder/BlogEntry.java[tags=include;!getters-setters]
----
<1> Mark the `language` property as the discriminator which will be used to determine the language.
<2> Map the `text` property to multiple fields using a custom annotation.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/alternative/alternativebinder/MultiLanguageField.java[tags=include]
----
<1> Define an annotation with retention `RUNTIME`.
*Any other retention policy will cause the annotation to be ignored by Hibernate Search*.
<2> Allow the annotation to target either methods (getters) or fields.
<3> Mark this annotation as a property mapping,
and instruct Hibernate Search to apply the given processor whenever it finds this annotation.
It is also possible to reference the processor by its name, in the case of a CDI/Spring bean.
<4> Optionally, mark the annotation as documented,
so that it is included in the javadoc of your entities.
<5> Optionally, define parameters. Here we allow to customize the field name
(which will default to the property name, see further down).
<6> The processor must implement the `PropertyMappingAnnotationProcessor` interface,
setting its generic type argument to the type of the corresponding annotation.
Here the processor class is nested in the annotation class,
because it is more convenient,
but you are obviously free to implement it in a separate Java file.
<7> In the annotation processor, instantiate a custom binder delegate
(see below for the implementation).
<8> Access the mapping of the type hosting the property (in this example, `BlogEntry`).
<9> Apply the `AlternativeBinder` to the type hosting the property (in this example, `BlogEntry`).
<10> Pass to `AlternativeBinder` the expected type of discriminator values.
<11> Pass to `AlternativeBinder` the name of the property from which field values should be extracted
(in this example, `text`).
<12> Pass to `AlternativeBinder` the expected type of the property from which index field values are extracted.
<13> Pass to `AlternativeBinder` the binder delegate.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/alternative/alternativebinder/LanguageAlternativeBinderDelegate.java[tags=include]
----
<1> The binder delegate must implement `AlternativeBinderDelegate`.
The first type parameter is the expected type of discriminator values (in this example, `Language`);
the second type parameter is the expected type of the property from which field values are extracted
(in this example, `String`).
<2> Any (custom) parameter can be passed through the constructor.
<3> Implement `bind`, to bind a property to index fields.
<4> Define one field per language.
<5> Make sure to give a different name to each field.
Here we're using the language code as a suffix, i.e. `text_en`, `text_fr`, `text_de`, ...
<6> Assign a different analyzer to each field.
The analyzers `text_en`, `text_fr`, `text_de` must have been defined in the backend;
see <<concepts-analysis>>.
<7> Return a bridge.
<8> The bridge must implement the `AlternativeValueBridge` interface.
Here the bridge class is nested in the binder class,
because it is more convenient,
but you are obviously free to implement it in a separate java file.
<9> The bridge is called when indexing; it selects the field to write to based on the discriminator value,
then writes the value to index to that field.
====

[[mapper-orm-alternatives-programmatic]]
== Programmatic mapping

You can apply `AlternativeBinder` through the <<mapper-orm-programmatic-mapping,programmatic mapping>> too.
Behavior and options are identical to annotation-based mapping.

.Mapping a property to a different index field based on a `language` property using `AlternativeBinder`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/alternative/alternativebinder/AlternativeBinderIT.java[tags=programmatic]
----
====
