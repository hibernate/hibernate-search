[[mapper-orm-indexing-automatic]]
= [[_automatic_indexing]] Automatic indexing

By default, every time an entity is changed through a Hibernate ORM Session,
if that entity is <<mapper-orm-entityindexmapping,mapped to an index>>,
Hibernate Search updates the relevant index.

Exactly how and when the index update happens depends on the <<coordination,coordination strategy>>;
see <<mapper-orm-indexing-automatic-concepts>> for more information.

[[mapper-orm-indexing-automatic-concepts]]
== Overview

Below is a summary of how automatic indexing works depending
on the configured <<coordination,coordination strategy>>.

Follow the links for more details.

[cols="h,2*^",options="header"]
.Comparison of automatic indexing depending on the coordination strategy
|===
|Coordination strategy
|<<coordination-none,No coordination>> (default)
|<<coordination-database-polling,Database-polling>>

|Detects changes occurring in ORM sessions (`session.persist(...)`, `session.delete(...)`, setters, ...)
2+|<<mapper-orm-indexing-automatic-concepts-changes-in-session,Yes>>

|Detects changes caused by JPQL or SQL queries (`insert`/`update`/`delete`)
2+|<<limitations-changes-in-session,No>>

|Associations must be updated on both sides
2+|<<mapper-orm-indexing-automatic-concepts-session-consistency,Yes>>

|Changes triggering reindexing
2+|<<mapper-orm-indexing-automatic-concepts-dirty-checking,Only relevant changes>>

|Guarantee of indexes updates
|<<coordination-none-indexing-guarantee,When the commit returns (non-transactional)>>
|<<coordination-database-polling-indexing-guarantee,On commit (transactional)>>

|Visibility of index updates
|<<coordination-none-indexing-visibility,Configurable: immediate (poor performance) or eventual>>
|<<coordination-database-polling-indexing-visibility,Eventual>>

|Overhead for application threads
|<<coordination-none-indexing-on-flush,Low to medium>>
|<<coordination-database-polling-indexing-background,Very low>>

|Overhead for the database
|<<coordination-none-indexing-lazy-loading,Low>>
|<<coordination-database-polling-indexing-full-loading,Low to medium>>
|===

[[mapper-orm-indexing-automatic-configuration]]
== Configuration

Automatic indexing may be unnecessary if your index is read-only
or if you update it regularly by reindexing,
either using the  <<mapper-orm-indexing-massindexer,`MassIndexer`>>
or <<mapper-orm-indexing-manual,manually>>.
You can disable automatic indexing by setting the configuration property
`hibernate.search.automatic_indexing.enabled` to `false`.

[[mapper-orm-indexing-automatic-concepts-changes-in-session]]
== In-session entity change detection and limitations

Hibernate Search uses internal events of Hibernate ORM in order to detect changes.
These events will be triggered if you actually manipulate managed entity objects in your code:
calls o `session.persist(...)`, `session.delete(...)`, to entity setters, etc.

This works great for most applications, but you need to consider some limitations:

* <<limitations-changes-in-session>>
* <<limitations-changes-asymmetric-association-updates>>

[[mapper-orm-indexing-automatic-concepts-dirty-checking]]
== Dirty checking
Hibernate Search is aware of the entity properties that are accessed when building indexed documents.
Thanks to that knowledge, it is able to detect which entity changes are actually relevant to indexing,
and to skip reindexing when a property is modified, but does not affect the indexed document.

You can control this "dirty checking" by setting
the <<configuration-property-types,boolean property>> `hibernate.search.automatic_indexing.enable_dirty_check`:

* by default, or when set to `true`,
Hibernate Search will consider whether modified properties are relevant
before triggering reindexing.
* when set to `false`, Hibernate Search will trigger reindexing upon any change,
regardless of the entity properties that changed.

[[mapper-orm-indexing-automatic-synchronization]]
== Synchronization with the indexes

=== Basics

include::components/writing-reading-intro-note.asciidoc[]

[WARNING]
====
Indexing synchronization is only relevant when <<coordination-none,coordination is disabled>>.

With coordination strategies such as <<coordination-database-polling,`database-polling`>>,
indexing happens in background threads and is always asynchronous.
====

When a transaction is committed, <<coordination-none,with default coordination settings>>,
automatic indexing can (and, by default, will) block the application thread
until indexing reaches a certain level of completion.

There are two main reasons for blocking the thread:

1. *Indexed data safety*:
if, once the database transaction completes,
index data must be safely stored to disk,
an <<concepts-commit-refresh,index commit>> is necessary.
Without it, index changes may only be safe after a few seconds,
when a periodic index commit happens in the background.
2. *Real-time search queries*:
if, once the database transaction completes,
any search query must immediately take the index changes into account,
an <<concepts-commit-refresh,index refresh>> is necessary.
Without it, index changes may only be visible after a few seconds,
when a periodic index refresh happens in the background.

These two requirements are controlled by the _synchronization strategy_.
The default strategy is defined by the configuration property
`hibernate.search.automatic_indexing.synchronization.strategy`.
Below is a reference of all available strategies and their guarantees.

|====
.2+h|Strategy .2+h|Throughput 3+h| Guarantees when the application thread resumes
h|Changes applied (with or without <<concepts-commit-refresh,commit>>)
h|Changes safe from crash/power loss (<<concepts-commit-refresh,commit>>)
h|Changes visible on search (<<concepts-commit-refresh,refresh>>)
|`async`|Best|No guarantee|No guarantee|No guarantee
|`write-sync` (**default**)|Medium|Guaranteed|Guaranteed|No guarantee
|`read-sync`|Medium to <<mapper-orm-indexing-automatic-synchronization-refresh-throughput,worst>>|Guaranteed|No guarantee|Guaranteed
|`sync`|<<mapper-orm-indexing-automatic-synchronization-refresh-throughput,Worst>>|Guaranteed|Guaranteed|Guaranteed
|====

[[mapper-orm-indexing-automatic-synchronization-refresh-throughput]]
[WARNING]
====
Depending on the backend and its configuration,
the `sync` and `read-sync` strategies may lead to poor indexing throughput,
because the backend may not be designed for frequent, on-demand index refreshes.

This is why this strategy is only recommended if you know your backend is designed for it, or for integration tests.
In particular, the `sync` strategy will work fine with the default configuration of the Lucene backend,
but will perform poorly with the Elasticsearch backend.
====

[[mapper-orm-indexing-automatic-synchronization-failures]]
[NOTE]
====
Indexing failures may be reported differently depending on the chosen strategy:

* Failure to extract data from entities:
** Regardless of the strategy, throws an exception in the application thread.
* Failure to apply index changes (i.e. I/O operations on the index):
** For strategies that apply changes immediately: throws an exception in the application thread.
** For strategies that do *not* apply changes immediately:
forwards the failure to the <<configuration-background-failure-handling,failure handler>>,
which by default will simply log the failure.
* Failure to commit index changes:
** For strategies that guarantee an index commit: throws an exception in the application thread.
** For strategies that do *not* guarantee an index commit:
forwards the failure to the <<configuration-background-failure-handling,failure handler>>,
which by default will simply log the failure.
====

=== [[_per_session_override]] Per-session override

While the configuration property mentioned above defines a default,
it is possible to override this default on a particular session
by calling `SearchSession#automaticIndexingSynchronizationStrategy(...)` and passing a different strategy.

The built-in strategies can be retrieved by calling:

* `AutomaticIndexingSynchronizationStrategy.async()`
* `AutomaticIndexingSynchronizationStrategy.writeSync()`
* `AutomaticIndexingSynchronizationStrategy.readSync()`
* or `AutomaticIndexingSynchronizationStrategy.sync()`

.Overriding the automatic indexing synchronization strategy
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/indexing/HibernateOrmAutomaticIndexingIT.java[tags=automatic-indexing-synchronization-strategy-override]
----
<1> Obtain the search session, which by default uses the synchronization strategy configured in properties.
<2> Override the synchronization strategy.
<3> Change an entity.
<4> Commit the changes, triggering reindexing.
<5> The overridden strategy guarantees that the modified book will be present in these results,
even though the query was executed _just after_ the transaction commit.
====

=== [[_custom_strategy]] Custom strategy

You can also implement custom strategy.
The custom strategy can then be set just like the built-in strategies:

* as the default by setting
the configuration property `hibernate.search.automatic_indexing.synchronization.strategy`
to a <<configuration-bean-reference-parsing,bean reference>> pointing to the custom implementation,
for example `class:com.mycompany.MySynchronizationStrategy`.
* at the session level by passing an instance of the custom implementation
to `SearchSession#automaticIndexingSynchronizationStrategy(...)`.
