[[configuration]]
= [[search-configuration]] Configuration

[[configuration-sources]]
== [[_configuration_sources]] Configuration sources

[[configuration-sources-mapper-orm]]
=== Configuration sources when integrating into Hibernate ORM

When using Hibernate Search within Hibernate ORM,
configuration properties are retrieved from Hibernate ORM.

This means that wherever you set Hibernate ORM properties,
you can set Hibernate Search properties:

* In a `hibernate.properties` file at the root of your classpath.
* In `persistence.xml`, if you bootstrap Hibernate ORM with the JPA APIs
* In JVM system properties (`-DmyProperty=myValue` passed to the `java` command)
* In the configuration file of your framework,
for example `application.yaml`/`application.properties`.

[NOTE]
====
When setting properties through the configuration file of your framework,
the keys of configuration properties will likely be different from
the keys mentioned in this documentation.

For example `hibernate.search.backend.hosts` will become
`quarkus.hibernate-search-orm.elasticsearch.hosts` in Quarkus
or `spring.jpa.properties.hibernate.search.backend.hosts` in Spring Boot.

See <<compatibility-framework>> for more information.
====

[[configuration-sources-mapper-pojo-standalone]]
=== Configuration sources with the Standalone POJO mapper

When using Hibernate Search in the <<mapper-pojo-standalone,Standalone POJO Mapper>> (without Hibernate ORM),
configuration properties must be set programmatically as you build the mapping.

See <<mapper-pojo-standalone-basics,this section>> for more information.

[[configuration-property]]
== Configuration properties

[[configuration-structure]]
=== Structure of configuration properties

Configuration properties are all grouped under a common root.
In the ORM integration, this root is `hibernate.search`,
but other integrations (Infinispan, ...) may use a different one.
This documentation will use `hibernate.search` in all examples.

Under that root, we can distinguish between three categories of properties.

Global properties::
These properties potentially affect all Hibernate Search.
They are generally located just under the `hibernate.search` root.
+
Global properties are explained in the relevant parts of this documentation:

* <<mapper-orm,Hibernate ORM integration>>
* <<mapper-pojo-standalone,Standalone POJO Mapper>>
* <<mapping-configuration,Mapping configuration>>
* And many more.

Backend properties::
These properties affect a single backend.
They are grouped under a common root:

* `hibernate.search.backend` for the default backend (most common usage).
* `hibernate.search.backends.<backend name>` for a named backend (advanced usage).

+
Backend properties are explained in the relevant parts of this documentation:

* <<backend-lucene-configuration,Lucene backend>>
* <<backend-elasticsearch-configuration,Elasticsearch backend>>

Index properties::
These properties affect either one or multiple indexes, depending on the root.
+
With the root `hibernate.search.backend`,
they set defaults for all indexes of the backend.
+
With the root `hibernate.search.backend.indexes.<index name>`,
they set the value for a specific index, overriding the defaults (if any).
The backend and index names must match the names defined in the mapping.
For Hibernate ORM entities, the default index name is the name of the indexed class, without the package:
`org.mycompany.Book` will have `Book` as its default index name.
Index names can be customized in the mapping.
+
Alternatively, the backend can also be referenced by name,
i.e. the roots above can also be `hibernate.search.backends.<backend name>`
or `hibernate.search.backends.<backend name>.indexes.<index name>`.
+
Examples:

* `hibernate.search.backend.io.commit_interval = 500`
sets the `io.commit_interval` property for all indexes of the default backend.
* `hibernate.search.backend.indexes.Product.io.commit_interval = 2000`
sets the `io.commit_interval` property for the `Product` index of the default backend.
* `hibernate.search.backends.myBackend.io.commit_interval = 500`
sets the `io.commit_interval` property for all indexes of backend `myBackend`.
* `hibernate.search.backends.myBackend.indexes.Product.io.commit_interval = 2000`
sets the `io.commit_interval` property for the `Product` index of backend `myBackend`.

+
Other index properties are explained in the relevant parts of this documentation:

* <<backend-lucene-configuration,Lucene backend>>
* <<backend-elasticsearch-configuration,Elasticsearch backend>>

[[configuration-builder]]
=== Building property keys programmatically

Both `BackendSettings` and `IndexSettings` provide tools to help build the configuration property keys.

BackendSettings::
+
`BackendSettings.backendKey(ElasticsearchBackendSettings.HOSTS)`
is equivalent to `hibernate.search.backend.hosts`.
+
`BackendSettings.backendKey("myBackend", ElasticsearchBackendSettings.HOSTS)`
is equivalent to `hibernate.search.backends.myBackend.hosts`.
+
For a list of available property keys,
see link:{hibernateSearchJavadocUrl}/org/hibernate/search/backend/elasticsearch/cfg/ElasticsearchBackendSettings.html[ElasticsearchBackendSettings]
or link:{hibernateSearchJavadocUrl}/org/hibernate/search/backend/lucene/cfg/LuceneBackendSettings.html[LuceneBackendSettings]

IndexSettings::
+
`IndexSettings.indexKey("myIndex", ElasticsearchIndexSettings.INDEXING_QUEUE_SIZE)`
is equivalent to `hibernate.search.backend.indexes.myIndex.indexing.queue_size`.
+
`IndexSettings.indexKey("myBackend", "myIndex", ElasticsearchIndexSettings.INDEXING_QUEUE_SIZE)`
is equivalent to `hibernate.search.backends.myBackend.indexes.myIndex.indexing.queue_size`.
+
For a list of available property keys,
see link:{hibernateSearchJavadocUrl}/org/hibernate/search/backend/elasticsearch/cfg/ElasticsearchIndexSettings.html[ElasticsearchIndexSettings]
or link:{hibernateSearchJavadocUrl}/org/hibernate/search/backend/lucene/cfg/LuceneIndexSettings.html[LuceneIndexSettings]

.Using the helper to build hibernate configuration
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/configuration/ElasticsearchConfigurationIT.java[tags=build-hibernate-configuration]
----
====

[[configuration-property-types]]
=== Type of configuration properties

Property values can be set programmatically as Java objects,
or through a configuration file as a string that will have to be parsed.

Each configuration property in Hibernate Search has an assigned type,
and this type defines the accepted values in both cases.

Here are the definitions of all property types.

[cols="h,1,2a", options="header"]
|===============
|Designation|Accepted Java objects|Accepted String format
|String|`java.lang.String`|Any string
|Boolean|`java.lang.Boolean`|`true` or `false` (case-insensitive)
|Integer|`java.lang.Number` (will call .intValue())|Any string that can be parsed by `Integer.parseInt`
|Long|`java.lang.Number` (will call .longValue())|Any string that can be parsed by `Long.parseLong`

|Bean reference of type T
|An instance of `T` or `BeanReference`
or a reference by type as a `java.lang.Class`
(see <<configuration-bean-reference>>)
|See <<configuration-bean-reference-parsing>>
|===============

When a configuration property of any type above is documented as multivalued,
that property accepts either:

* A `java.util.Collection` containing any Java object that would be accepted for a single-valued property of the same type (see above);
* or a comma-separated string containing strings that would be accepted for a single-valued property of the same type (see above);
* or a single Java object that would be accepted for a single-valued property of the same type (see above).

[[configuration-property-checking]]
== [[configuration-property-tracking]] Configuration property checking

Hibernate Search will track the parts of the provided configuration that are actually used
and will log a warning if any configuration property starting with "hibernate.search." is never used,
because that might indicate a configuration issue.

To disable this warning, set the `hibernate.search.configuration_property_checking.strategy`
property to `ignore`.


[[configuration-bean]]
== Beans

Hibernate Search allows plugging in references to custom beans in various places:
configuration properties, mapping annotations, arguments to APIs, ...

This section describes <<configuration-bean-frameworks,the supported frameworks>>,
<<configuration-bean-reference,how to reference beans>>,
<<configuration-bean-resolution,how the beans are resolved>>
and <<configuration-bean-injection,how the beans can get injected with other beans>>.

[[configuration-bean-frameworks]]
=== Supported frameworks

[[configuration-bean-frameworks-mapper-orm]]
==== Supported frameworks when integrating into Hibernate ORM

When using the Hibernate Search integration into Hibernate ORM,
all dependency injection frameworks integrated into Hibernate ORM are automatically integrated into Hibernate Search.

This includes, but may not be limited to:

* all CDI-compliant frameworks, including link:{wildflyUrl}[WildFly] and link:{quarkusUrl}[Quarkus];
* the link:{springUrl}[Spring] framework.

When not using a dependency injection framework, or when it is not integrated into Hibernate ORM,
beans can only be retrieved using reflection by calling the public, no-arg constructor of the referenced type;
see <<configuration-bean-resolution>>.

[[configuration-bean-frameworks-mapper-pojo-standalone]]
==== Supported frameworks when using the Standalone POJO Mapper

When using the <<mapper-pojo-standalone,Standalone POJO Mapper>>
dependency injection support must be <<mapper-pojo-standalone-beanprovider,plugged in manually>>.

Failing that,
beans can only be retrieved using reflection by calling the public, no-arg constructor of the referenced type;
see <<configuration-bean-resolution>>.

[[configuration-bean-reference]]
=== Bean references

Bean references are composed of two parts:

* The type, i.e. a `java.lang.Class`.
* Optionally, the name, as a `String`.

When referencing beans using a string value in configuration properties,
the type is implicitly set to whatever interface Hibernate Search expects for that configuration property.

[TIP]
====
For experienced users, Hibernate Search also provides the `org.hibernate.search.engine.environment.bean.BeanReference` type,
which is accepted in configuration properties and APIs.
This interface allows plugging in custom instantiation and cleanup code.
See the javadoc of this interface for details.
====

[[configuration-bean-reference-parsing]]
=== Parsing of bean references

When referencing beans using a string value in configuration properties, that string is parsed.

Here are the most common formats:

* `bean:` followed by the name of a Spring or CDI bean.
For example `bean:myBean`.
* `class:` followed by the fully-qualified name of a class, to be instantiated through Spring/CDI if available,
or through its public, no-argument constructor otherwise.
For example `class:com.mycompany.MyClass`.
* An arbitrary string that doesn't contain a colon:
it will be interpreted as explained in <<configuration-bean-resolution>>. In short:
** first, look for a built-in bean with the given name;
** then try to retrieve a bean with the given name from Spring/CDI (if available);
** then try to interpret the string as a fully-qualified class name
and to retrieve the corresponding bean from Spring/CDI (if available);
** then try to interpret the string as a fully-qualified class name
and to instantiate it through its public, no-argument constructor.

The following formats are also accepted, but are only useful for advanced use cases:

* `any:` followed by an arbitrary string.
Equivalent to leaving out the prefix in most cases. Only useful if the arbitrary string contains a colon.
* `builtin:` followed by the name of a built-in bean,
e.g. `simple` for the <<backend-elasticsearch-indexlayout,Elasticsearch index layout strategies>>.
This will not fall back to Spring/CDI or a direct constructor call.
* `constructor:` followed by the fully-qualified name of a class,
to be instantiated through its public, no-argument constructor.
This will ignore built-in beans and will not try to instantiate the class through Spring/CDI.

[[configuration-bean-resolution]]
=== [[section-services]] Bean resolution

Bean resolution (i.e. the process of turning this reference into an object instance)
happens as follows by default:

* If the given reference matches a built-in bean, that bean is used.
+
Example: the name `simple`,
when used as the value of the property `hibernate.search.backend.layout.strategy`
to configure the <<backend-elasticsearch-indexlayout,Elasticsearch index layout strategy>>,
resolves to the built-in `simple` strategy.
* Otherwise, if a <<configuration-bean-frameworks,supported Dependency Injection (DI) framework>> is available,
the reference is resolved using the DI framework.
** If a managed bean with the given type (and if provided, name) exists, that bean is used.
+
Example: the name `myLayoutStrategy`,
when used as the value of the property `hibernate.search.backend.layout.strategy`
to configure the <<backend-elasticsearch-indexlayout,Elasticsearch index layout strategy>>,
resolves to any bean known from CDI/Spring of type `IndexLayoutStrategy` and annotated with `@Named("myLayoutStrategy")`.
** Otherwise, if a name is given, and that name is a fully-qualified class name,
and a managed bean of that type exists, that bean is used.
+
Example: the name `com.mycompany.MyLayoutStrategy`,
when used as the value of the property `hibernate.search.backend.layout.strategy`
to configure the <<backend-elasticsearch-indexlayout,Elasticsearch index layout strategy>>,
resolves to any bean known from CDI/Spring and extending `com.mycompany.MyLayoutStrategy`.
* Otherwise, reflection is used to resolve the bean.
** If a name is given, and that name is a fully-qualified class name,
and that class extends the type reference,
an instance is created by invoking the public, no-argument constructor of that class.
+
Example: the name `com.mycompany.MyLayoutStrategy`,
when used as the value of the property `hibernate.search.backend.layout.strategy`
to configure the <<backend-elasticsearch-indexlayout,Elasticsearch index layout strategy>>,
resolves to an instance of `com.mycompany.MyLayoutStrategy`.
** If no name is given,
an instance is created by invoking the public, no-argument constructor of the referenced type.
+
Example: the class `com.mycompany.MyLayoutStrategy.class` (a `java.lang.Class`, not a `String`),
when used as the value of the property `hibernate.search.backend.layout.strategy`
to configure the <<backend-elasticsearch-indexlayout,Elasticsearch index layout strategy>>,
resolves to an instance of `com.mycompany.MyLayoutStrategy`.

[TIP]
====
It is possible to control bean retrieval more finely by selecting a `BeanRetrieval`;
see the javadoc of `org.hibernate.search.engine.environment.bean.BeanRetrieval` for more information.
See also <<configuration-bean-reference-parsing>> for the prefixes that allow to specify the bean retrieval
when referencing a bean from configuration properties.
====

[[configuration-bean-injection]]
=== [[section-bridge-dependency-injection]] Bean injection

All beans <<configuration-bean-resolution,resolved by Hibernate Search>>
using a <<configuration-bean-frameworks,supported framework>>
can take advantage of injection features of this framework.

For example a bean can be injected with another bean
by annotating one of its fields in the bridge with `@Inject`.

Lifecycle annotations such as `@PostConstruct` should also work as expected.

Even when not using any framework,
it is still possible to take advantage of the `BeanResolver`.
This component, passed to several methods during bootstrap,
exposes several methods to <<configuration-bean-resolution,resolve>>
a reference into a bean,
exposing programmatically what would usually be achieved with an `@Inject` annotation.
See the javadoc of `BeanResolver` for more information.

[[configuration-bean-lifecycle]]
=== Bean lifecycle

As soon as beans are no longer needed,
Hibernate Search will release them and let the dependency injection framework
call the appropriate methods (`@PreDestroy`, ...).

Some beans are only necessary during bootstrap,
such as ``ElasticsearchAnalysisConfigurer``s,
so they will be released just after bootstrap.

Other beans are necessary at runtime, such as ``ValueBridge``s,
so they will be released on shutdown.

[WARNING]
====
Be careful to define the scope of your beans as appropriate.

Immutable beans or beans used only once such as `ElasticsearchAnalysisConfigurer`
may be safely assigned any scope.

However, some beans are expected to be mutable and instantiated multiple times,
such as for example `PropertyBinder`.
For these beans, it is recommended to use the "dependent" scope (CDI terminology)
or the "prototype" scope (Spring terminology).
When in doubt, this is also generally the safest choice
for beans injected into Hibernate Search.
====

Beans <<configuration-bean-resolution,resolved by Hibernate Search>>
using a <<configuration-bean-frameworks,supported framework>>
can take advantage of injection features of this framework.

[[configuration-global]]
== Global configuration

This section presents global configuration, common to all <<architecture-hsearch-components-mapper,mappers>>
and <<architecture-hsearch-components-backend,backends>>.

[[configuration-background-failure-handling]]
=== [[exception-handling]] Background failure handling

Hibernate Search generally propagates exceptions occurring in background threads to the user thread,
but in some cases, such as Lucene segment merging failures,
or <<indexing-plan-synchronization-failures,some failures during automatic indexing>>,
the exception in background threads cannot be propagated.
By default, when that happens, the failure is logged at the `ERROR` level.

To customize background failure handling, you will need to:

. Define a class that implements the `org.hibernate.search.engine.reporting.FailureHandler` interface.
. Configure the backend to use that implementation by setting the configuration property
`hibernate.search.background_failure_handler`
to a <<configuration-bean-reference-parsing,bean reference>> pointing to the implementation,
for example `class:com.mycompany.MyFailureHandler`.

Hibernate Search will call the `handle` methods whenever a failure occurs.

.Implementing and using a `FailureHandler`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/reporting/failurehandler/MyFailureHandler.java[tags=include]
----
<1> `handle(FailureContext)` is called for generic failures that do not fit any other specialized `handle` method.
<2> Get a description of the failing operation from the context.
<3> Get the throwable thrown when the operation failed from the context.
<4> Use the context-provided information to report the failure in any relevant way.
<5> `handle(EntityIndexingFailureContext)` is called for failures occurring when indexing entities.
<6> On top of the failing operation and throwable,
the context also lists references to entities that could not be indexed correctly because of the failure.
<7> Use the context-provided information to report the failure in any relevant way.

[source, XML, indent=0, subs="+callouts"]
----
include::{resourcesdir}/reporting/failurehandler.properties[]
----
<1> Assign the background failure handler using a Hibernate Search configuration property.
====

[NOTE]
====
When a failure handler's `handle` method throws an error or exception,
Hibernate Search will catch it and log it at the ERROR level.
It will not be propagated.
====

[[configuration-multi-tenancy]]
=== Multi-tenancy

If your application uses Hibernate ORM's link:{hibernateDocUrl}#multitenacy[multi-tenancy support],
or if you <<mapper-pojo-standalone-multi-tenancy,configured multi-tenancy explicitly in the Standalone POJO Mapper>>,
Hibernate Search should detect that and configure your backends transparently.
For details, see:

* <<backend-lucene-multi-tenancy,here for Lucene>>
* <<backend-elasticsearch-multi-tenancy,here for Elasticsearch>>

In some cases, in particular when <<coordination-outbox-polling-multi-tenancy,using the `outbox-polling` coordination strategy>>
or when expecting the <<indexing-massindexer-multitenancy,mass indexer to implicitly target all tenants>>,
you will need to list explicitly all tenant identifiers that your application might use.
This information is used by Hibernate Search when spawning background processes
that should apply an operation to every tenant.

The list of identifiers is defined through the following configuration property:

[source]
----
hibernate.search.multi_tenancy.tenant_ids = mytenant1,mytenant2,mytenant3
----

This property may be set to a String containing multiple tenant identifiers separated by commas,
or a `Collection<String>` containing tenant identifiers.
