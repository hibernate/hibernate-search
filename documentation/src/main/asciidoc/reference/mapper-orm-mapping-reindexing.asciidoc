[[mapper-orm-reindexing]]
= Tuning automatic reindexing

[[mapper-orm-reindexing-basics]]
== Basics

When an entity property is mapped to the index,
be it through `@GenericField`, `@IndexedEmbedded`,
or a <<mapper-orm-bridge,custom bridge>>,
this mapping introduces a dependency:
the document will need to be updated when the property changes.

For simpler, single-entity mappings,
this only means that Hibernate Search will need to detect when an entity changes
and reindex the entity.
This will be handled transparently.

If the mapping includes a "derived" property,
i.e. a property that is not persisted directly,
but instead is dynamically computed in a getter that uses other properties as input,
Hibernate Search will be unable to guess which part of the persistent state
these properties are based on.
In this case, some explicit configuration will be required;
see <<mapper-orm-reindexing-derivedfrom>> for more information.

When the mapping crosses the entity boundaries,
things get more complicated.
Let's consider a mapping where a `Book` entity is mapped to a document,
and that document must include the `name` property of the `Author` entity
(for example using <<mapper-orm-indexedembedded,`@IndexedEmbedded`>>).
Hibernate Search will need to track changes to the author's name,
and whenever that happens,
it will need to _retrieve all the books of that author_,
so as to reindex these books automatically.

In practice, this means that whenever an entity mapping relies on an association to another entity,
this association must be bi-directional:
if `Book.authors` is `@IndexedEmbedded`,
Hibernate Search must be aware of an inverse association `Author.books`.
An exception will be thrown on startup if the inverse association cannot be resolved.

Most of the time, Hibernate Search is able to take advantage of Hibernate ORM metadata
(the `mappedBy` attribute of `@OneToOne` and `@OneToMany`)
to resolve the inverse side of an association,
so this is all handled transparently.

In some rare cases, with the more complex mappings,
it is possible that even Hibernate ORM is not aware that an association is bi-directional,
because `mappedBy` cannot be used.
A few solutions exist:

* The association can simply be ignored.
This means the index will be out of date whenever associated entities change,
but this can be an acceptable solution if the index
is rebuilt periodically.
See <<mapper-orm-reindexing-reindexonupdate>> for more information.
* If the association is actually bi-directional,
its inverse side can be specified to Hibernate Search
explicitly using `@AssociationInverseSide`.
See <<mapper-orm-reindexing-associationinverseside>> for more information.

[[mapper-orm-reindexing-associationinverseside]]
== Enriching the entity model with `@AssociationInverseSide`

Given an association from an entity type `A` to entity type `B`,
`@AssociationInverseSide` defines the inverse side of an association,
i.e. the path from `B` to `A`.

This is mostly useful when a bi-directional association
is not mapped as such in Hibernate ORM (no `mappedBy`).

.Mapping the inverse side of an association with `@AssociationInverseSide`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/reindexing/associationinverseside/Book.java[tags=include;!getters-setters]
----
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/reindexing/associationinverseside/BookEdition.java[tags=include;!getters-setters]
----
<1> This annotation and the following ones are the Hibernate ORM mapping for a `Map<BookEdition, BigDecimal>`
where the keys are `BookEdition` entities and the values are the price of that edition.
<2> Index-embed the editions that are actually for sale.
<3> In Hibernate ORM, it is not possible to use `mappedBy` for an association modeled by a `Map` key.
Thus we use `@AssociationInverseSide` to tell Hibernate Search what the inverse side
of this association is.
<4> We could have applied the `@AssociationInverseSide` annotation here instead:
either side will do.
====

[[mapper-orm-reindexing-derivedfrom]]
== Reindexing when a derived value changes with `@IndexingDependency`

When a property is not persisted directly,
but instead is dynamically computed in a getter that uses other properties as input,
Hibernate Search will be unable to guess which part of the persistent state
these properties are based on,
and thus will be unable to trigger automatic reindexing when the relevant persistent state changes.
By default, Hibernate Search will detect such cases on bootstrap and throw an exception.

Annotating the property with `@IndexingDependency(derivedFrom = ...)`
will give Hibernate Search the information it needs and allow automatic reindexing.

.Mapping a derived value with `@IndexingDependency.derivedFrom`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/reindexing/derivedfrom/Book.java[tags=include;!getters-setters]
----
<1> Authors are modeled as a list of string containing the author names.
<2> The transient `mainAuthor` property dynamically returns the main author (the first one).
<3> We use `@FullTextField` on the `getMainAuthor()` getter to index the name of the main author.
<4> We use `@IndexingDependency.derivedFrom` to tell Hibernate Search
that whenever the list of authors changes, the result of `getMainAuthor()` may have changed.
====

[[mapper-orm-reindexing-reindexonupdate]]
== Disabling reindexing with `@IndexingDependency`

In some cases, automatic reindexing is not realistically achievable:

* When a property mapped to the index is updated very frequently,
leading to a very frequent reindexing and unacceptable usage of disks or database.
* When an association is massive,
for example a single entity instance is <<mapper-orm-indexedembedded,indexed-embedded>>
in thousands of other entities.
* Etc.

When that happens, it is possible to tell Hibernate Search to ignore updates
to a particular property (and, in the case of `@IndexedEmbedded`, anything beyond that property).
The index will become slightly out-of-sync whenever the property is modified,
but this can be solved by <<mapper-orm-indexing-massindexer,reindexing>>,
for example every night.

.Disabling automatic reindexing with `@IndexingDependency.reindexOnUpdate`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/reindexing/reindexonupdate/Book.java[tags=include;!getters-setters]
----
<1> Each book has an association to a `BookCategory` entity.
There are many, potentially thousands of books for each category.
<2> We want to index-embed the `BookCategory` into the `Book` ...
<3> ... but we really don't want to model the (huge) inverse association from `BookCategory` to `Book`.
Thus we use `@IndexingDependency.reindexOnUpdate` to tell Hibernate Search that `Book`
should not be reindexed when the content of a `BookCategory` changes.
If we rename a `BookCategory`, we will need to reindex the corresponding books manually.
====

[[mapper-orm-reindexing-programmatic]]
== Programmatic mapping

You can control reindexing through through the <<mapper-orm-programmatic-mapping,programmatic mapping>> too.
Behavior and options are identical to annotation-based mapping.

.Mapping the inverse side of an association with `.associationInverseSide(...)`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/reindexing/associationinverseside/AssociationInverseSideIT.java[tags=programmatic]
----
====

.Mapping a derived value with `.indexingDependency().derivedFrom(...)`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/reindexing/derivedfrom/DerivedFromIT.java[tags=programmatic]
----
====

.Disabling automatic reindexing with `.indexingDependency().reindexOnUpdate(...)`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/reindexing/reindexonupdate/ReindexOnUpdateIT.java[tags=programmatic]
----
====
