[[mapper-orm-reindexing]]
= Tuning automatic reindexing

[[mapper-orm-reindexing-basics]]
== Basics

When an entity property is mapped to the index,
be it through `@GenericField`, `@IndexedEmbedded`,
or a <<mapper-orm-bridge,custom bridge>>,
this mapping introduces a dependency:
the document will need to be updated when the property changes.

For simpler, single-entity mappings,
this only means that Hibernate Search will need to detect when an entity changes
and reindex the entity.
This will be handled transparently.

If the mapping includes a "derived" property,
i.e. a property that is not persisted directly,
but instead is dynamically computed in a getter that uses other properties as input,
Hibernate Search will be unable to guess which part of the persistent state
these properties are based on.
In this case, some explicit configuration will be required;
see <<mapper-orm-reindexing-derivedfrom>> for more information.

When the mapping crosses the entity boundaries,
things get more complicated.
Let's consider a mapping where a `Book` entity is mapped to a document,
and that document must include the `name` property of the `Author` entity
(for example using <<mapper-orm-indexedembedded,`@IndexedEmbedded`>>).
Hibernate Search will need to track changes to the author's name,
and whenever that happens,
it will need to _retrieve all the books of that author_,
so as to reindex these books automatically.

In practice, this means that whenever an entity mapping relies on an association to another entity,
this association must be bi-directional:
if `Book.authors` is `@IndexedEmbedded`,
Hibernate Search must be aware of an inverse association `Author.books`.
An exception will be thrown on startup if the inverse association cannot be resolved.

Most of the time, Hibernate Search is able to take advantage of Hibernate ORM metadata
(the `mappedBy` attribute of `@OneToOne` and `@OneToMany`)
to resolve the inverse side of an association,
so this is all handled transparently.

In some rare cases, with the more complex mappings,
it is possible that even Hibernate ORM is not aware that an association is bi-directional,
because `mappedBy` cannot be used.
A few solutions exist:

* The association can simply be ignored.
This means the index will be out of date whenever associated entities change,
but this can be an acceptable solution if the index
is rebuilt periodically.
See <<mapper-orm-reindexing-reindexonupdate>> for more information.
* If the association is actually bi-directional,
its inverse side can be specified to Hibernate Search
explicitly using `@AssociationInverseSide`.
See <<mapper-orm-reindexing-associationinverseside>> for more information.

[[mapper-orm-reindexing-associationinverseside]]
== Enriching the entity model with `@AssociationInverseSide`

Given an association from an entity type `A` to entity type `B`,
`@AssociationInverseSide` defines the inverse side of an association,
i.e. the path from `B` to `A`.

This is mostly useful when a bi-directional association
is not mapped as such in Hibernate ORM (no `mappedBy`).

.Mapping the inverse side of an association with `@AssociationInverseSide`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/reindexing/associationinverseside/Book.java[tags=include;!getters-setters]
----
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/reindexing/associationinverseside/BookEdition.java[tags=include;!getters-setters]
----
<1> This annotation and the following ones are the Hibernate ORM mapping for a `Map<BookEdition, BigDecimal>`
where the keys are `BookEdition` entities and the values are the price of that edition.
<2> Index-embed the editions that are actually for sale.
<3> In Hibernate ORM, it is not possible to use `mappedBy` for an association modeled by a `Map` key.
Thus we use `@AssociationInverseSide` to tell Hibernate Search what the inverse side
of this association is.
<4> We could have applied the `@AssociationInverseSide` annotation here instead:
either side will do.
====

[[mapper-orm-reindexing-derivedfrom]]
== Reindexing when a derived value changes with `@IndexingDependency`

When a property is not persisted directly,
but instead is dynamically computed in a getter that uses other properties as input,
Hibernate Search will be unable to guess which part of the persistent state
these properties are based on,
and thus will be unable to trigger automatic reindexing when the relevant persistent state changes.
By default, Hibernate Search will detect such cases on bootstrap and throw an exception.

Annotating the property with `@IndexingDependency(derivedFrom = ...)`
will give Hibernate Search the information it needs and allow automatic reindexing.

.Mapping a derived value with `@IndexingDependency.derivedFrom`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/reindexing/derivedfrom/Book.java[tags=include;!getters-setters]
----
<1> Authors are modeled as a list of string containing the author names.
<2> The transient `mainAuthor` property dynamically returns the main author (the first one).
<3> We use `@FullTextField` on the `getMainAuthor()` getter to index the name of the main author.
<4> We use `@IndexingDependency.derivedFrom` to tell Hibernate Search
that whenever the list of authors changes, the result of `getMainAuthor()` may have changed.
====

[[mapper-orm-reindexing-reindexonupdate]]
== Limiting automatic reindexing with `@IndexingDependency`

In some cases, fully automatic reindexing is not realistically achievable:

* When an association is massive,
for example a single entity instance is <<mapper-orm-indexedembedded,indexed-embedded>>
in thousands of other entities.
* When a property mapped to the index is updated very frequently,
leading to a very frequent reindexing and unacceptable usage of disks or database.
* Etc.

When that happens, it is possible to tell Hibernate Search to ignore updates
to a particular property (and, in the case of `@IndexedEmbedded`, anything beyond that property).

Several options are available to control exactly how updates to a given property affect reindexing.
See the sections below for an explanation of each option.

=== `ReindexingOnUpdate.SHALLOW`: limiting automatic reindexing to same-entity updates only

`ReindexingOnUpdate.SHALLOW` is most useful when an association is highly asymmetric and therefore unidirectional.
Think associations to "reference" data such as categories, types, cities, countries, ...

It essentially tells Hibernate Search that changing an association
-- adding or removing associated elements, i.e. "shallow" updates -- should trigger automatic reindexing,
but changing properties of associated entities -- "deep" updates -- should not.

For example, let's consider the (incorrect) mapping below:

.A highly-asymmetric, unidirectional association
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/reindexing/reindexonupdate/shallow/incorrect/Book.java[tags=include;!getters-setters]
----
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/reindexing/reindexonupdate/shallow/incorrect/BookCategory.java[tags=include;!getters-setters]
----

<1> Each book has an association to a `BookCategory` entity.
<2> We want to <<mapper-orm-indexedembedded,index-embed>> the `BookCategory` into the `Book` ...
<3> ... but we really don't want to model the (huge) inverse association from `BookCategory` to `Book`:
There are potentially thousands of books for each category, so calling a `getBooks()` method
would lead to loading thousands of entities into the Hibernate ORM session at once,
and would perform badly.
Thus there isn't any `getBooks()` method to list all books in a category.
====

With this mapping, Hibernate Search will not be able to reindex all books when the category name changes:
the getter that would list all books for that category simply doesn't exist.
Since Hibernate Search tries to be safe by default,
it will reject this mapping and throw an exception at bootstrap,
saying it needs an inverse side to the `Book` -> `BookCategory` association.

However, in this case, we don't expect the name of a `BookCategory` to change.
That's really "reference" data, which changes so rarely that we can conceivably plan ahead such change
and <<mapper-orm-indexing-massindexer,reindex all books>> whenever that happens.
So we would really not mind if Hibernate Search just ignored changes to `BookCategory`...

That's what `@IndexingDependency(reindexOnUpdate = ReindexOnUpdate.SHALLOW)` is for:
it tells Hibernate Search to ignore the impact of updates to an associated entity.
See the modified mapping below:

.Limiting automatic reindexing to same-entity updates with `ReindexOnUpdate.SHALLOW`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/reindexing/reindexonupdate/shallow/correct/Book.java[tags=include;!getters-setters]
----
<1> We use `ReindexOnUpdate.SHALLOW` to tell Hibernate Search that `Book`
should be reindexed automatically when it's assigned a new category (`book.setCategory( newCategory )`),
but not when properties of its category change (`category.setName( newName )`).
====

Hibernate Search will accept the mapping above and boot successfully,
since the inverse side of the association from `Book` to `BookCategory` is no longer deemed necessary.

Only _shallow_ changes to a book's category will trigger automatic reindexing:

* When a book is assigned a new category (`book.setCategory( newCategory )`),
Hibernate Search will consider it a "shallow" change, since it only affects the `Book` entity.
Thus, Hibernate Search will reindex the book automatically.
* When a category itself changes (`category.setName( newName )`),
Hibernate Search will consider it a "deep" change, since it occurs beyond the boundaries of the `Book` entity.
Thus, Hibernate Search will *not* reindex books of that category automatically.
The index will become slightly out-of-sync,
but this can be solved by <<mapper-orm-indexing-massindexer,reindexing>> `Book` entities,
for example every night.

=== `ReindexingOnUpdate.NO`: disabling automatic reindexing for updates of a particular property

`ReindexingOnUpdate.NO` is most useful for properties that change very frequently
and don't need to be up-to-date in the index.

It essentially tells Hibernate Search that changes to that property should not trigger automatic reindexing,

For example, let's consider the mapping below:

.A frequently-changing property
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/reindexing/reindexonupdate/no/incorrect/Sensor.java[tags=include;!getters-setters]
----
<1> The sensor name and status get updated very rarely.
<2> The sensor value gets updated every few milliseconds
<3> When the sensor value gets updated, we also update the rolling average over the last few seconds
(based on data not shown here).
====

Updates to the name and status, which are rarely updated, can perfectly well trigger automatic reindexing.
But considering there are thousands of sensors,
updates to the sensor value cannot reasonably trigger automatic reindexing:
reindexing thousands of sensors every few milliseconds probably won't perform well.

In this scenario, however, search on sensor value is not considered critical and indexes don't need to be as fresh.
We can accept indexes to lag behind a few minutes when it comes to sensor value.
We can consider setting up a batch process that runs every few seconds
to reindex all sensors, either through a <<mapper-orm-indexing-massindexer,mass indexer>>
or <<mapper-orm-indexing-manual,other means>>.
So we would really not mind if Hibernate Search just ignored changes to sensor values...

That's what `@IndexingDependency(reindexOnUpdate = ReindexOnUpdate.NO)` is for:
it tells Hibernate Search to ignore the impact of updates to the `rollingAverage` property.
See the modified mapping below:

.Disabling automatic reindexing for a particular property with `ReindexOnUpdate.NO`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/reindexing/reindexonupdate/no/correct/Sensor.java[tags=include;!getters-setters]
----
<1> We use `ReindexOnUpdate.NO` to tell Hibernate Search that updates to `rollingAverage`
should not trigger automatic reindexing.
====

With this mapping:

* When a sensor is assigned a new name (`sensor.setName( newName )`) or status (`sensor.setStatus( newStatus )`),
Hibernate Search will reindex the sensor automatically.
* When a sensor is assigned a new rolling average (`sensor.setRollingAverage( newName )`),
Hibernate Search will *not* reindex the sensor automatically.

[[mapper-orm-reindexing-programmatic]]
== Programmatic mapping

You can control reindexing through through the <<mapper-orm-programmatic-mapping,programmatic mapping>> too.
Behavior and options are identical to annotation-based mapping.

.Mapping the inverse side of an association with `.associationInverseSide(...)`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/reindexing/associationinverseside/AssociationInverseSideIT.java[tags=programmatic]
----
====

.Mapping a derived value with `.indexingDependency().derivedFrom(...)`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/reindexing/derivedfrom/DerivedFromIT.java[tags=programmatic]
----
====

.Limiting automatic reindexing with `.indexingDependency().reindexOnUpdate(...)`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/reindexing/reindexonupdate/shallow/correct/ReindexOnUpdateShallowIT.java[tags=programmatic]
----
====
