[[compatibility]]
= [[getting-started-compatibility]] Compatibility

[[compatibility-dependencies]]
== Dependencies

.Compatible versions of dependencies
[cols="h,^1,1", stripes=none]
|===============
| h|Version h|Note
|Java Runtime
|8, 11 or 17
|
|Hibernate ORM (for the Hibernate ORM mapper)
|{hibernateVersion}
|
|JPA (Java EE) (for the Hibernate ORM mapper)
|{jpaVersion}
|
|Jakarta Persistence (for the Hibernate ORM mapper)
|{jakartaPersistenceVersion}
|Need to use <<other-integrations-jakarta,different Maven artifacts>>.
|Apache Lucene (for the Lucene backend)
|{luceneVersion}
|
|Elasticsearch server (for the Elasticsearch backend)
|{elasticsearchCompatibleVersions}
|Other minor versions (e.g. {elasticsearchOtherPotentiallyCompatibleVersions}) may work
but are not given priority for bugfixes and new features.
|OpenSearch server (for the Elasticsearch backend)
|{openSearchCompatibleVersions}
|Other minor versions may work
but are not given priority for bugfixes and new features.
|===============

[TIP]
====
Find more information for all versions of Hibernate Search on our
https://hibernate.org/search/releases/#compatibility-matrix[compatibility matrix].

The https://hibernate.org/community/compatibility-policy/[compatibility policy] may also be of interest.
====

[NOTE]
.Elasticsearch 7.11+ licensing
====
While Elasticsearch up to 7.10 was distributed under the Apache License 2.0,
be aware that Elasticsearch 7.11 and later are distributed under the Elastic License and the SSPL,
which are https://opensource.org/node/1099[not considered open-source by the Open Source Initiative].

Only the low-level Java REST client, which Hibernate Search depends on, remains open-source.
====

[NOTE]
.OpenSearch
====
While it historically targeted link:{elasticsearchUrl}[Elastic's Elasticsearch distribution],
Hibernate Search is also compatible with link:{openSearchUrl}[OpenSearch] and regularly tested against it.

Every section of this documentation referring to Elasticsearch
is also relevant for the OpenSearch distribution.
====

[[compatibility-framework]]
== [[gettingstarted-framework]] Framework support

[[compatibility-framework-quarkus]]
=== [[gettingstarted-framework-quarkus]] [[_quarkus]] Quarkus

link:{quarkusUrl}[Quarkus] has an official extension for Hibernate Search with Hibernate ORM and Elasticsearch,
which is a tight integration with additional features, different dependencies, and different configuration properties.

As your first step to using Hibernate Search within Quarkus,
we recommend you follow Quarkus's https://quarkus.io/guides/hibernate-search-orm-elasticsearch[Hibernate Search Guide]:
it is a great hands-on introduction to Hibernate Search,
_and_ it covers the specifics of Quarkus.

[[compatibility-framework-spring-boot]]
=== [[gettingstarted-framework-spring-boot]] [[_spring_boot]] Spring Boot

Hibernate Search can easily be integrated into a link:{springBootUrl}[Spring Boot] application.
Just read about Spring Boot's specifics below, then follow the <<getting-started,getting started guide>>.

[[compatibility-framework-spring-boot-configuration-properties]]
==== [[gettingstarted-framework-spring-boot-configuration-properties]] [[_configuration_properties]] Configuration properties

`application.properties`/`application.yaml` are Spring Boot configuration files,
not JPA or Hibernate Search configuration files.
Adding Hibernate Search properties starting with `hibernate.search.` directly in that file will not work.

Instead, prefix your Hibernate Search properties with
https://docs.spring.io/spring-boot/docs/2.5.1/reference/html/application-properties.html#application-properties.data.spring.jpa.properties[`spring.jpa.properties.`],
so that Spring Boot passes along the properties to Hibernate ORM, which will pass them along to Hibernate Search.

For example:

[source]
----
spring.jpa.properties.hibernate.search.backend.hosts = elasticsearch.mycompany.com
----

[[compatibility-framework-spring-boot-dependency-versions]]
==== [[gettingstarted-framework-spring-boot-dependency-versions]] [[_dependency_versions]] Dependency versions

Spring Boot automatically sets the version of dependencies without your knowledge.
While this is ordinarily a good thing, from time to time Spring Boot dependencies will be a little out of date.
Thus, it is recommended to override Spring Boot's defaults at least for some key dependencies.

With Maven, add this to your POM's `<properties>`:

[source, XML, subs="+attributes"]
----
<properties>
    <hibernate.version>{hibernateVersion}</hibernate.version>
    <elasticsearch.version>{elasticsearchClientVersions}</elasticsearch.version>
    <!-- ... plus any other properties of yours ... -->
</properties>
----

[TIP]
====
If, after setting the properties above,
you still have problems (e.g. `NoClassDefFoundError`) with some of Hibernate Search's dependencies,
look for the version of that dependency in
https://search.maven.org/artifact/org.springframework.boot/spring-boot-dependencies/{testSpringBootVersion}/pom[Spring Boot's POM]
and https://search.maven.org/artifact/org.hibernate.search/hibernate-search-parent/{hibernateSearchVersion}/pom[Hibernate Search's POM]:
there will probably be a mismatch,
and generally overriding Spring Boot's version to match Hibernate Search's version will work fine.
====

[[compatibility-framework-spring-boot-application-hanging]]
==== [[gettingstarted-framework-spring-boot-application-hanging]] [[_application_hanging_on_startup]] Application hanging on startup

Spring Boot 2.3.x and above is affected by a bug that causes the application to hang on startup
when using Hibernate Search, particularly when using custom components (custom bridges, analysis configurers, ...).

The problem, which is not limited to just Hibernate Search,
https://github.com/spring-projects/spring-framework/issues/25111[has been reported],
but hasn't been fixed yet in Spring Boot 2.5.1.

As a workaround, you can set the property `spring.data.jpa.repositories.bootstrap-mode` to `deferred` or,
if that doesn't work, `default`.
Interestingly, using `@EnableJpaRepositories(bootstrapMode = BootstrapMode.DEFERRED)` has been reported to work
even in situations where setting `spring.data.jpa.repositories.bootstrap-mode` to `deferred` didn't work.

Alternatively, if you do not need dependency injection in your custom components,
you can refer to those components with the prefix `constructor:`
so that Hibernate Search doesn't even try to use Spring to retrieve the components,
and thus avoids the deadlock in Spring.
See <<configuration-bean-reference-parsing,this section>> for more information.

[[compatibility-framework-other]]
=== [[gettingstarted-framework-other]] Other

If your framework of choice is not mentioned in the previous sections, don't worry:
Hibernate Search works just fine with plenty of other frameworks.

Just follow the <<getting-started,getting started guide>> to try it out.
