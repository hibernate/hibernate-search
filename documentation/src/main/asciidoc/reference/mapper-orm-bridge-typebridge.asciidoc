[[mapper-orm-bridge-typebridge]]
= Type bridge
// Search 5 anchors backward compatibility
[[_classbridge]]

== Basics

A type bridge is a pluggable component that implements
the mapping of a whole type to one or more index fields.
It is applied to a type with the `@TypeBinding` annotation
or with a <<mapper-orm-custom-annotations,custom annotation>>.

The type bridge is very similar to the property bridge in its core principles and in how it is implemented.
The only (obvious) difference is that the property bridge is applied to properties (fields or getters),
while the type bridge is applied to the type (class or interface).
This entails some slight differences in the APIs exposed to the type bridge.

Implementing a type bridge requires two components:

. A custom implementation of `TypeBinder`, to bind the bridge to a type at bootstrap.
This involves declaring the properties of the type that will be used,
declaring the index fields that will be populated along with their type,
and instantiating the type bridge.
. A custom implementation of `TypeBridge`, to perform the conversion at runtime.
This involves extracting data from an instance of the type, transforming the data if necessary,
and pushing it to index fields.

Below is an example of a custom type bridge that maps
two properties of the `Author` class, the `firstName` and `lastName`,
to a single `fullName` field.

// Search 5 anchors backward compatibility
[[example-class-bridge]]
.Implementing and using a `TypeBridge`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/typebridge/simple/FullNameBinder.java[tags=binder]
----
<1> The binder must implement the `TypeBinder` interface.
<2> Implement the `bind` method in the binder.
<3> Declare the dependencies of the bridge,
i.e. the parts of the type instances that the bridge will actually use.
This is *absolutely necessary* in order for Hibernate Search to correctly trigger reindexing
when these parts are modified.
See <<mapper-orm-bridge-bridgedelement-dependencies>>
for more information about declaring dependencies.
<4> Declare the field that will be populated by this bridge.
In this case we're creating a single `fullName` String field.
Multiple index fields can be declared.
See <<mapper-orm-bridge-index-field-dsl>>
for more information about declaring index fields.
<5> Declare the type of the field.
Since we're indexing a full name,
we will use a `String` type with a `name` analyzer (defined separately, see <<concepts-analysis>>).
See <<mapper-orm-bridge-index-field-type-dsl>>
for more information about declaring index field types.
<6> Call `context.bridge(...)` to define the type bridge to use,
and pass an instance of the bridge.
<7> Pass a reference to the `fullName` field to the bridge.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/typebridge/simple/FullNameBinder.java[tags=bridge]
----
<1> The bridge must implement the `TypeBridge` interface.
Here the bridge class is nested in the binder class,
because it is more convenient,
but you are obviously free to implement it in a separate java file.
<2> The bridge stores references to the fields:
it will need them when indexing.
<3> Implement the `write` method in the bridge.
This method is called on indexing.
<4> The bridged element is passed as an `Object`,
so cast it to the correct type.
<5> Extract data from the bridged element,
and optionally transform it.
<6> Set the value of the `fullName` field.
Note the `fullName` field was declared at the root,
so we call `addValue` directly on the `target` argument.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/typebridge/simple/Author.java[tags=include;!getters-setters]
----
<1> Apply the bridge using the `@TypeBinding` annotation.
<2> It is still possible to map properties directly using other annotations,
as long as index field names are distinct from the names used in the type binder.
But no annotation is necessary on the `firstName` and `lastName` properties:
these are already handled by the bridge.
====

[[mapper-orm-bridge-typebridge-parameters]]
== Passing parameters

Type bridges are usually applied with the built-in `@TypeBinding` annotation.
which does not accept any parameter other than the type binder.

In some cases, it is necessary to pass parameters directly to the type binder.
This is achieved by defining a <<mapper-orm-custom-annotations,custom annotation>> with attributes:

.Passing parameters to a `TypeBinder`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/typebridge/parameter/FullNameBinding.java[tags=include]
----
<1> Define an annotation with retention `RUNTIME`.
*Any other retention policy will cause the annotation to be ignored by Hibernate Search*.
<2> Since we're defining a type bridge, allow the annotation to target types.
<3> Mark this annotation as a type mapping,
and instruct Hibernate Search to apply the given binder whenever it finds this annotation.
It is also possible to reference the binder by its name, in the case of a CDI/Spring bean.
<4> Optionally, mark the annotation as documented,
so that it is included in the javadoc of your entities.
<5> Define an attribute of type `boolean` to specify whether a sort field should be added.
<6> The processor must implement the `TypeMappingAnnotationProcessor` interface,
setting its generic type argument to the type of the corresponding annotation.
Here the processor class is nested in the annotation class,
because it is more convenient,
but you are obviously free to implement it in a separate Java file.
<7> In the annotation processor, instantiate the binder.
<8> Process the annotation attributes and pass the data to the binder.
Here we're using a setter, but passing the data through the constructor would work, too.
<9> Apply the binder to the type.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/typebridge/parameter/FullNameBinder.java[tags=include]
----
<1> Implement setters in the binder.
Alternatively, we could expose a parameterized constructor.
<2> In the `bind` method, use the value of parameters.
Here use the `sortField` parameter to decide whether to add a additional, sortable field,
but we could pass parameters for any purpose:
defining the field name,
defining a normalizer,custom annotation
...

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/typebridge/parameter/Author.java[tags=include;!getters-setters]
----
<1> Apply the bridge using its custom annotation,
setting the `sortField` parameter.
====

== Accessing the ORM session from the bridge

Contexts passed to the bridge methods can be used to retrieve the Hibernate ORM session.

.Retrieving the ORM session from a `TypeBridge`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/typebridge/ormcontext/MyEntityTypeBinder.java[tags=include]
----
<1> Apply an extension to the context to access content specific to Hibernate ORM.
<2> Retrieve the `Session` from the extended context.
====

== Injecting beans into the binder

With <<configuration-bean-frameworks,compatible frameworks>>,
Hibernate Search supports injecting beans into:

* the `TypeMappingAnnotationProcessor` if you use custom annotations and instantiate the binder yourself.
* the `TypeBinder` if you use the `@TypeBinding` annotation and let Hibernate Search
instantiate the binder using your dependency injection framework.

NOTE: This only applies to binders instantiated by Hibernate Search itself.
As a rule of thumb, if you need to call `new MyBinder()` at some point,
the binder won't get auto-magically injected.

The context passed to the routing key binder's `bind` method
also exposes a `getBeanResolver` method to access the bean resolver and instantiate beans explicitly.

See <<configuration-bean-injection>> for more details.

== Incubating features

include::components/incubating-warning.asciidoc[]

The context passed to the type binder's `bind` method
exposes a `bridgedElement()` method that gives access to metadata about the type being bound.

The metadata can in particular be used to inspect the type in details:

* Getting accessors to properties.
* Detecting properties with markers.
Markers are applied by specific annotations carrying a `@MarkerBinding` meta-annotation.

See the javadoc for more information.
