[[mapper-orm-bridge-valuebridge]]
= Value bridges
// Search 5 anchors backward compatibility
[[_stringbridge]]

== Basics

A value bridge is a pluggable component that implements
the mapping of a property to an index field.
It is applied to a property with a <<mapper-orm-directfieldmapping-annotations,`@*Field` annotation>>
(`@GenericField`, `@FullTextField`, ...)
or with a <<mapper-orm-custom-annotations,custom annotation>>.

A value bridge is relatively straightforward to implement:
in its simplest form,
it boils down to converting a value from the property type
to the index field type.
Thanks to the integration to the `@*Field` annotations,
several features come for free:

* The type of the index field can be customized directly in the `@*Field` annotation:
it can be defined as <<mapper-orm-directfieldmapping-sortable,sortable>>,
<<mapper-orm-directfieldmapping-projectable,projectable>>,
it can be assigned an <<mapper-orm-directfieldmapping-analyzer,analyzer>>,
...
* The bridge can be transparently applied to elements of a container.
For example, you can implement a `ValueBridge<ISBN, String>`
and transparently use it on a property of type `List<ISBN>`:
the bridge will simply be applied once per list element
and populate the index field with as many values.

However, due to these features,
several limitations are imposed on a value bridge
which are not present in a <<mapper-orm-bridge-propertybridge,property bridge>> for example:

* A value bridge only allows one-to-one mapping: one property to one index field.
A single value bridge cannot populate more than one index field.
* A value bridge *will not work correctly when applied to a mutable type*.
A value bridge is expected to be applied to "atomic" data, such as a `LocalDate`;
if it is applied to an entity, for example, extracting data from its properties,
Hibernate Search will not be aware of which properties are used
and will not be able to automatically trigger reindexing when these properties change.

Below is an example of a custom value bridge that converts
a custom `ISBN` type to its string representation to index it:

// Search 5 anchors backward compatibility
[[example-custom-string-bridge]]
.Implementing and using a `ValueBridge`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/simple/ISBNValueBridge.java[tags=include]
----
<1> The bridge must implement the `ValueBridge` interface.
Two generic type arguments must be provided:
the first one is the type of property values (values in the entity model),
and the second one is the type of index fields (values in the document model).
<2> The `toIndexedValue` method is the only one that must be implemented: all other methods are optional.
It takes the property value and a context object as parameters,
and is expected to return the corresponding index field value.
It is called when indexing,
but also when parameters to the search DSL <<search-dsl-argument-type,must be transformed>>.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/simple/Book.java[tags=include;!getters-setters]
----
<1> This this is unrelated to the value bridge,
but necessary in order for Hibernate ORM to store the data correctly in the database.
<2> Map the property to an index field.
<3> Instruct Hibernate Search to use our custom value bridge.
It is also possible to reference the bridge by its name, in the case of a CDI/Spring bean.
<4> Customize the field as usual.
====

The example above is just a minimal implementations.
A custom value bridge can do more:

* it can <<mapper-orm-bridge-valuebridge-projection,convert the result of projections back to the property type>>;
* it can <<mapper-orm-bridge-valuebridge-indexnullas,parse the value passed to `indexNullAs`>>;
* ...

See the next sections for more information.

== Type resolution

By default, the value bridge's property type and index field type are determined automatically,
using reflection to extract the generic type arguments of the `ValueBridge` interface:
the first argument is the property type while the second argument is the index field type.

For example, in `public class MyBridge implements ValueBridge<ISBN, String>`,
the property type is resolved to `ISBN` and the index field type is resolved to `String`:
the bridge will be applied to properties of type `ISBN`
and will populate an index field of type `String`.

The fact that types are resolved automatically using reflection brings a few limitations.
In particular, it means the generic type arguments cannot be just anything;
as a general rule, you should stick to literal types (`MyBridge implements ValueBridge<ISBN, String>`)
and avoid generic type parameters and wildcards (`MyBridge<T> implements ValueBridge<List<T>, T>`).

If you need more complex types,
you can bypass the automatic resolution and specify types explicitly
using a <<mapper-orm-bridge-valuebridge-valuebinder,`ValueBinder`>>.

[[mapper-orm-bridge-valuebridge-annotation-compatibility]]
== Using value bridges in other `@*Field` annotations

In order to use a custom value bridge with specialized annotations such as `@FullTextField`,
the bridge must declare a compatible index field type.

For example:

* `@FullTextField` and `@KeywordField` require an index field type of type `String` (`ValueBridge<Whatever, String>`);
* `@ScaledNumberField` requires an index field type of type `BigDecimal` (`ValueBridge<Whatever, BigDecimal>`)
or `BigInteger` (`ValueBridge<Whatever, BigInteger>`).

Refer to <<mapper-orm-directfieldmapping-annotations>>
for the specific constraints of each annotation.

Attempts to use a bridge that declares an incompatible type will trigger exceptions at bootstrap.

[[mapper-orm-bridge-valuebridge-projection]]
== Supporting projections with `fromIndexedValue()`
// Search 5 anchors backward compatibility
[[section-two-way-bridge]]

By default, any attempt to project on a field using a custom bridge will result in an exception,
because Hibernate Search doesn't know how to convert
the projected values obtained from the index back to the property type.

It is possible to <<search-dsl-projected-value-type,disable conversion explicitly>> to get the raw value from the index,
but another way of solving the problem is to simply implement `fromIndexedValue` in the custom bridge.
This method will be called whenever a projected value needs to be converted.

.Implementing `fromIndexedValue` to convert projected values
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/projection/ISBNValueBridge.java[tags=include]
----
<1> Implement `fromIndexedValue` as necessary.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/projection/Book.java[tags=include;!getters-setters]
----
<1> This this is unrelated to the value bridge,
but necessary in order for Hibernate ORM to store the data correctly in the database.
<2> Map the property to an index field.
<3> Instruct Hibernate Search to use our custom value bridge.
<4> Do not forget to configure the field as projectable.
====

[[mapper-orm-bridge-valuebridge-indexnullas]]
== Supporting `indexNullAs` with `parse()`

By default, the `indexNullAs` attribute of `@*Field` annotations cannot be used together with a custom bridge.

In order to make it work, the bridge needs to implement the `parse` method
so that Hibernate Search can convert the string assigned to `indexNullAs`
to a value of the correct type for the index field.

.Implementing `parse` to support `indexNullAs`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/indexnullas/ISBNValueBridge.java[tags=include]
----
<1> Implement `parse` as necessary.
The bridge may throw exceptions for invalid strings.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/indexnullas/Book.java[tags=include;!getters-setters]
----
<1> This this is unrelated to the value bridge,
but necessary in order for Hibernate ORM to store the data correctly in the database.
<2> Map the property to an index field.
<3> Instruct Hibernate Search to use our custom value bridge.
<4> Set `indexNullAs` to a valid value.
====

== Compatibility across indexes with `isCompatibleWith()`

A value bridges is involved in indexing,
but also in the various search DSLs,
to convert values passed to the DSL to an index field value that the backend will understand.

When creating a predicate targeting a single field across multiple indexes,
Hibernate Search will have multiple bridges to choose from: one per index.
Since only one predicate with a single value can be created,
Hibernate Search needs to pick a single bridge.
By default, when a custom bridge is assigned to the field,
Hibernate Search will throw an exception because it cannot decide which bridge to pick.

If the bridges assigned to the field in all indexes produce the same result,
it is possible to indicate to Hibernate Search that any bridge will do
by implementing `isCompatibleWith`.

This method accepts another bridge in parameter,
and returns `true` if that bridge can be expected to always behave the same as `this`.

.Implementing `isCompatibleWith` to support multi-index search
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/compatible/ISBNValueBridge.java[tags=include]
----
<1> Implement `isCompatibleWith` as necessary.
Here we just deem any instance of the same class to be compatible.
====

[[mapper-orm-bridge-valuebridge-valuebinder]]
== Configuring the bridge more finely with `ValueBinder`

To configure a bridge more finely,
it is possible to implement a value binder that will be executed at bootstrap.
This binder will be able in particular to define a custom index field type.

.Implementing a `ValueBinder`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/binder/ISBNValueBinder.java[tags=include]
----
<1> The binder must implement the `ValueBinder` interface.
<2> Implement the `bind` method.
<3> Call `context.bridge(...)` to define the value bridge to use.
<4> Pass the expected type of property values.
<5> Pass the value bridge instance.
<6> Use the context's type factory to create an index field type.
<7> Pick a base type for the index field using an `as*()` method.
<8> Configure the type as necessary.
This configuration will set defaults that are applied for any type using this bridge,
but they can be overridden.
Type configuration is similar to the attributes found in the various `@*Field` annotations.
See <<mapper-orm-bridge-index-field-type-dsl>> for more information.
<9> The value bridge must still be implemented.
Here the bridge class is nested in the binder class,
because it is more convenient,
but you are obviously free to implement it in a separate java file.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/binder/Book.java[tags=include;!getters-setters]
----
<1> This this is unrelated to the value bridge,
but necessary in order for Hibernate ORM to store the data correctly in the database.
<2> Map the property to an index field.
<3> Instruct Hibernate Search to use our custom value binder.
Note the use of `valueBinder` instead of `valueBridge`.
It is also possible to reference the binder by its name, in the case of a CDI/Spring bean.
<4> Customize the field as usual.
Configuration set using annotation attributes take precedence
over the index field type configuration set by the value binder.
For example, in this case, the field with be sortable
even if the binder didn't define the field as sortable.
====

[NOTE]
====
When using a value binder with a specialized `@*Field` annotation,
the index field type must be compatible with the annotation.

For example, `@FullTextField` will only work if the index field type was created using `asString()`.

These restrictions are similar to those when
assigning a value bridge directly;
see <<mapper-orm-bridge-valuebridge-annotation-compatibility>>.
====

[[mapper-orm-bridge-valuebridge-parameters]]
== Passing parameters

The value bridges are usually applied with built-in <<mapper-orm-directfieldmapping-annotations,`@*Field` annotation>>,
which already accept parameters to configure the field name,
whether the field is sortable, etc.

However, these parameters are not passed to the value bridge or value binder.
In some cases, it is necessary to pass parameters directly to the value bridge or value binder.
This is achieved by defining a <<mapper-orm-custom-annotations,custom annotation>> with attributes:

.Passing parameters to a `ValueBridge`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/parameter/BooleanAsStringBridge.java[tags=include]
----
<1> Implement a bridge that does not index booleans directly,
but indexes them as strings instead.
<2> The bridge accepts two parameters in its constructors:
the string representing `true` and the string representing `false`.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/parameter/BooleanAsStringField.java[tags=include]
----
<1> Define an annotation with retention `RUNTIME`.
*Any other retention policy will cause the annotation to be ignored by Hibernate Search*.
<2> Since we're defining a value bridge, allow the annotation
to target either methods (getters) or fields.
<3> Mark this annotation as a property mapping,
and instruct Hibernate Search to apply the given processor whenever it finds this annotation.
It is also possible to reference the processor by its name, in the case of a CDI/Spring bean.
<4> Optionally, mark the annotation as documented,
so that it is included in the javadoc of your entities.
<5> Optionally, mark the annotation as repeatable,
in order to be able to declare multiple fields on the same property.
<6> Define custom attributes to configure the value bridge.
Here we define two strings that the bridge should use to represent the boolean values `true` and `false`.
<7> Since we will be using a custom annotation,
and not the built-in <<mapper-orm-directfieldmapping-annotations,`@*Field` annotation>>,
the standard parameters that make sense for this bridge need to be declared here, too.
<8> The processor must implement the `PropertyMappingAnnotationProcessor` interface,
setting its generic type argument to the type of the corresponding annotation.
Here the processor class is nested in the annotation class,
because it is more convenient,
but you are obviously free to implement it in a separate Java file.
<9> In the `process` method, instantiate the bridge
and pass the annotation attributes as constructor arguments.
<10> Declare the field with the configured name (if provided).
<11> Assign our bridge to the field.
Alternatively, we could assign a value binder instead,
using the `valueBinder()` method.
<12> Configure the remaining standard parameters.
Note that the `context` object passed to the `process` method
exposes utility methods to convert standard Hibernate Search annotations
to something that can be passed to the mapping
(here, `@ContainerExtraction` is converted to a container extractor path).

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/parameter/Book.java[tags=include;!getters-setters]
----
<1> Apply the bridge using its custom annotation,
setting the parameters.
<2> Because we use a value bridge,
the annotation can be transparently applied to containers.
Here, the bridge will be applied successively to each value in the map.
====

== Accessing the ORM session or session factory from the bridge

Contexts passed to the bridge methods can be used to retrieve the Hibernate ORM session or session factory.

.Retrieving the ORM session or session factory from a `ValueBridge`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/valuebridge/ormcontext/MyDataValueBridge.java[tags=include]
----
<1> Apply an extension to the context to access content specific to Hibernate ORM.
<2> Retrieve the `SessionFactory` from the extended context.
The `Session` is not available here.
<3> Apply an extension to the context to access content specific to Hibernate ORM.
<4> Retrieve the `Session` from the extended context.
====

== Injecting beans into the value bridge or value binder

With <<configuration-bean-frameworks,compatible frameworks>>,
Hibernate Search supports injection of beans into both the `ValueBridge` and the `ValueBinder`.

NOTE: This only applies to beans instantiated by Hibernate Search itself.
As a rule of thumb, if you need to call `new MyBridge()` at some point,
the bridge won't get auto-magically injected.

The context passed to the value binder's `bind` method
also exposes a `getBeanResolver` method to access the bean resolver and instantiate beans explicitly.

See <<configuration-bean-injection>> for more details.

== Experimental features

[WARNING]
====
These features are *experimental*.
Usual compatibility policies do not apply: incompatible changes may be introduced in any future release.
====

[[_type_aware_bridge]]
The context passed to the value binder's `bind` method
exposes a `bridgedElement()` method that gives access to metadata about the value being bound,
in particular its type.

See the javadoc for more information.
