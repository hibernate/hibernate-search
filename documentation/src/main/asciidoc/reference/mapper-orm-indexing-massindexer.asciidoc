[[mapper-orm-indexing-massindexer]]
= Reindexing large volumes of data with the `MassIndexer`
// Search 5 anchors backward compatibility
[[search-batchindex-massindexer]]

== Basics

There are cases where automatic indexing is not enough,
because a pre-existing database has to be indexed:

* when restoring a database backup;
* when indexes had to be wiped,
for example because the Hibernate Search mapping or some core settings changed;
* when automatic indexing had to be disabled for performance reasons,
and periodic reindexing (every night, ...) is preferred.

To address these situations, Hibernate Search provides the `MassIndexer`:
a tool to rebuild indexes completely based on the content of the database.
It can be told to reindex a few selected indexed types, or all of them.

The `MassIndexer` takes the following approach to provide a reasonably high throughput:

* Indexes are purged completely when mass indexing starts.
* Mass indexing is performed by several parallel threads,
each loading data from the database and sending indexing requests to the indexes.

[WARNING]
====
Because of the initial index purge, and because mass indexing is a very resource-intensive operation,
it is recommended to take your application offline while the `MassIndexer` works.

Querying the index while a `MassIndexer` is busy may be slower than usual
and will likely return incomplete results.
====

The following snippet of code will rebuild the index of all indexed entities,
deleting the index and then reloading all entities from the database.

.Reindexing everything using a `MassIndexer`
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/indexing/HibernateOrmMassIndexerIT.java[tags=simple]
----
<1> Get the `SearchSession`.
<2> Create a `MassIndexer` targeting every indexed entity type.
<3> Start the mass indexing process and return when it is over.
====

[NOTE]
====
The `MassIndexer` creates its own, separate sessions and (read-only) transactions,
so there is no need to begin a database transaction before the `MassIndexer` is started
or to commit a transaction after it is done.
====

[WARNING]
====
A note to MySQL users: the `MassIndexer` uses forward only scrollable results
to iterate on the primary keys to be loaded,
but MySQL's JDBC driver will pre-load all values in memory.

To avoid this "optimization" set the <<mapper-orm-indexing-massindexer-parameters-idfetchsize,`idFetchSize` parameter>>
to `Integer.MIN_VALUE`.
====

You can also select entity types when creating a mass indexer,
so as to reindex only these types (and their indexed subtypes, if any):

.Reindexing selected types using a `MassIndexer`
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/indexing/HibernateOrmMassIndexerIT.java[tags=select-type]
----
<1> Create a `MassIndexer` targeting the `Book` type and its indexed subtypes (if any).
<2> Start the mass indexing process for the selected types and return when it is over.
====

It is possible to run the mass indexer asynchronously,
because, the mass indexer does not rely on the original Hibernate ORM session.
When used asynchronously, the mass indexer will return a completion stage
to track the completion of mass indexing:

.Reindexing asynchronously using a `MassIndexer`
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/indexing/HibernateOrmMassIndexerIT.java[tags=async]
----
<1> Create a `MassIndexer`.
<2> Start the mass indexing process, but do not wait for the process to finish.
A `CompletionStage` is returned.
<3> The `CompletionStage` exposes methods to execute more code after indexing is complete.
<4> Alternatively, call `toCompletableFuture()` on the returned object to get a `Future`.
====

Although the `MassIndexer` is simple to use, some tweaking is recommended to speed up the process.
Several optional parameters are available, and can be set as shown below,
before the mass indexer starts.
See <<mapper-orm-indexing-massindexer-parameters>> for a reference of all available parameters,
and <<mapper-orm-indexing-massindexer-tuning>> for details about key topics.

.Using a tuned MassIndexer
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/indexing/HibernateOrmMassIndexerIT.java[tags=parameters]
----
<1> Create a `MassIndexer`.
<2> Load `Book` identifiers by batches of 150 elements.
<3> Load `Book` entities to reindex by batches of 25 elements.
<4> Create 12 parallel threads to load the `Book` entities.
<5> Start the mass indexing process and return when it is over.
====

[WARNING]
====
Running the `MassIndexer` with many threads will require many connections to the database.
If you don't have a sufficiently large connection pool, the `MassIndexer` itself and/or your other
applications could starve and be unable to serve other requests:
make sure you size your connection pool according to the mass indexing parameters,
as explained in <<mapper-orm-indexing-massindexer-tuning-threads>>.
====

[[mapper-orm-indexing-massindexer-parameters]]
== `MassIndexer` parameters
// Search 5 anchors backward compatibility
[[_useful_parameters_for_batch_indexing]]

.`MassIndexer` parameters
|===
|Setter|Default value|Description

|`typesToIndexInParallel(int)`
|`1`
|The number of types to index in parallel.

|`threadsToLoadObjects(int)`
|`6`
|The number of threads for entity loading, for *each type indexed in parallel*.
That is to say, the number of threads spawned for entity loading
will be `typesToIndexInParallel * threadsToLoadObjects`
(+ 1 thread per type to retrieve the IDs of entities to load).

|[[mapper-orm-indexing-massindexer-parameters-idfetchsize]]`idFetchSize(int)`
|`100`
|The fetch size to be used when loading primary keys. Some databases
accept special values, for example MySQL might benefit from using `Integer#MIN_VALUE`, otherwise it
will attempt to preload everything in memory.

|`batchSizeToLoadObjects(int)`
|`10`
|The fetch size to be used when loading entities from database. Some databases
accept special values, for example MySQL might benefit from using `Integer#MIN_VALUE`, otherwise it
will attempt to preload everything in memory.

|[[mapper-orm-indexing-massindexer-parameters-drop-and-create-schema]]`dropAndCreateSchemaOnStart(boolean)`
|`false`
|Drops the indexes and their schema (if they exist) and re-creates them before indexing.

Indexes will be unavailable for a short time during the dropping and re-creation,
so this should only be used when failures of concurrent operations on the indexes (automatic indexing, ...)
are acceptable.

This should be used when the existing schema is known to be obsolete,
for example when <<mapper-orm-mapping-changes,the Hibernate Search mapping changed>>
and some fields now have a different type, a different analyzer, new capabilities (projectable, ...), etc.

This may also be used when the schema is up-to-date,
since it can be faster than a purge (`purgeAllOnStart`) on large indexes,
especially with the Elasticsearch backend.

As an alternative to this parameter,
you can also use a schema manager to manage schemas manually at the time of your choosing:
<<mapper-orm-schema-management-manager>>.

|`purgeAllOnStart(boolean)`
|`true`
|Removes all entities from the indexes before indexing.

Only set this to `false` if you know the index is already empty;
otherwise, you will end up with duplicates in the index.

|`mergeSegmentsAfterPurge(boolean)`
|`true`
|Force merging of each index into a single segment after the initial index purge, just before indexing.
This setting has no effect if {@code purgeAllOnStart} is set to false.

|`mergeSegmentsOnFinish(boolean)`
|`false`
|Force merging of each index into a single segment after indexing.
This operation does not always improve performance: see <<mapper-orm-indexing-merge-segments>>.

|`cacheMode(CacheMode)`
|`CacheMode.IGNORE`
|The Hibernate `CacheMode` when loading entities.
The default is `CacheMode.IGNORE`, and it will be the most efficient choice in most cases,
but using another mode such as `CacheMode.GET` may be more efficient if many of the entities being indexed
refer to a small set of other entities.

|`transactionTimeout`
|-
|*Only supported in JTA-enabled environments.*
Timeout of transactions for loading ids and entities to be re-indexed.
The timeout should be long enough to load and index all entities of one type.
Note that these transactions are read-only,
so choosing a large value (e.g. `1800`, meaning 30 minutes)
should not cause any problem.

|`limitIndexedObjectsTo(long)`
|-
|The maximum number of results to load per entity type. This parameter let you define a threshold
value to avoid loading too many entities accidentally. The value defined must be greater than 0.
The parameter is not used by default. It is equivalent to keyword `LIMIT` in SQL.

|`monitor(MassIndexingMonitor)`
|A logging monitor.
|
The component responsible for monitoring progress of mass indexing.

As a `MassIndexer` can take some time to finish its job,
it is often necessary to monitor its progress.
The default, built-in monitor logs progress periodically at the `INFO` level,
but a custom monitor can be set by implementing the `MassIndexingMonitor` interface
and passing an instance using the `monitor` method.

Implementations of `MassIndexingMonitor` must be thread-safe.

|`failureHandler(MassIndexingFailureHandler)`
|A failure handler.
|
The component responsible for handling failures occurring during mass indexing.

A `MassIndexer` performs multiple operations in parallel,
some of which can fail without stopping the whole mass indexing process.
As a result, it may be necessary to trace individual failures.

The default, built-in failure handler just forwards the failures
to the global <<configuration-background-failure-handling,background failure handler>>,
which by default will log them at the `ERROR` level,
but a custom handler can be set by implementing the `MassIndexingFailureHandler` interface
and passing an instance using the `failureHandler` method.
This can be used to simply log failures in a context specific to the mass indexer,
e.g. a web interface in a maintenance console from which mass indexing was requested,
or for more advanced use cases, such as cancelling mass indexing on the first failure.

Implementations of `MassIndexingFailureHandler` must be thread-safe.

|===

[[mapper-orm-indexing-massindexer-tuning]]
== Tuning the `MassIndexer` for best performance

=== Basics

The `MassIndexer` was designed to finish the re-indexing task as quickly as possible,
but there is no one-size-fits-all solution,
so some configuration is required to get the best of it.

Performance optimization can get quite complex,
so keep the following in mind while you attempt to configure the `MassIndexer`:

* Always test your changes to assess their actual effect:
advice provided in this section is true in general,
but each application and environment is different,
and some options, when combined, may produce unexpected results.
* Take baby steps:
before tuning mass indexing with 40 indexed entity types
with two million instances each,
try a more reasonable scenario with only one entity type,
optionally limiting the number of entities to index
to assess performance more quickly.
* Tune your entity types individually *before*
you try to tune a mass indexing operation that indexes multiple entity types in parallel.

[[mapper-orm-indexing-massindexer-tuning-threads]]
=== Threads and JDBC connections
// Search 5 anchors backward compatibility
[[search-batchindexing-threadsandconnections]]

Increasing parallelism usually helps as the bottleneck
usually is the latency to the database connection:
it's probably worth it to experiment with a number of threads significantly higher
than the number of actual cores available.

However, each thread requires one JDBC connection,
and JDBC connections are usually in limited supply.
In order to increase the number of threads safely:

1. You should make sure your database can actually handle the resulting number of connections.
2. Your JDBC connection pool should be configured to provide a sufficient number of connections.
3. The above should take into account the rest of your application (request threads in a web application):
ignoring this may bring other processes to a halt while the `MassIndexer` is working.

There is a simple formula to understand how
the different options applied to the `MassIndexer` affect
the number of used worker threads and connections:

----
threads = typesToIndexInParallel * (threadsToLoadObjects + 1);
required JDBC connections = threads;
----

Here are a few suggestions for a roughly sane tuning starting point
for the parameters that affect parallelism:

`typesToIndexInParallel`::
Should probably be a low value, like 1 or 2, depending on how much
of your CPUs have spare cycles and how slow a database round trip will be.
`threadsToLoadObjects`::
Higher increases the pre-loading rate for the picked entities from
the database, but also increases memory usage and the pressure on the threads working on subsequent
indexing.
Note that each thread will extract data from the entity to reindex,
which depending on your mapping might require to access lazy associations
and load associated entities, thus making blocking calls to the database,
so you will probably need a high number of threads working in parallel.

[TIP]
====
All internal thread groups have meaningful names prefixed with "Hibernate Search",
so they should be easily identified with most diagnostic tools,
including simply thread dumps.
====
