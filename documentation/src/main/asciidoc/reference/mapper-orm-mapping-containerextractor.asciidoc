[[mapper-orm-containerextractor]]
= Mapping container types with container extractors

== Basics

Most built-in annotations applied to properties will work transparently when applied to container types:

* `@GenericField` applied to a property of type `String` will index the property value directly.
* `@GenericField` applied to a property of type `OptionalInt` will index the optional's value (an integer).
* `@GenericField` applied to a property of type `List<String>` will index the list elements (strings).
* `@GenericField` applied to a property of type `Map<Integer, String>` will index the map values (strings).
* `@GenericField` applied to a property of type `Map<Integer, List<String>>` will index the list elements in the map values (strings).
* Etc.

Same goes for other field annotations such as `@FullTextField`,
as well as `@IndexedEmbedded` in particular.

What happens behind the scenes is that Hibernate Search will inspect the property type
and attempt to apply "container extractors", picking the first that works.

== Explicit container extraction

In some cases, you will want to pick the container extractors to use explicitly.
This is the case when a map's keys must be indexed, instead of the values.
Relevant annotations offer an `extraction` attribute to configure this,
as shown in the example below.

TIP: All built-in extractor names are available as constants
in `org.hibernate.search.mapper.pojo.extractor.builtin.BuiltinContainerExtractors`.

.Mapping map keys to an index field using explicit container extractor definition
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/containerextractor/Book.java[tags=explicit-extractor]
----
<1> This annotation, and those below, are just Hibernate ORM configuration.
<2> Declare an index field based on the `priceByFormat` property.
<3> By default, Hibernate Search would index the map values (the book prices).
This uses the `extraction` attribute to specify that map keys (the book formats)
must be indexed instead.
====

TIP: When multiple levels of extractions are necessary,
multiple extractors can be configured:
`extraction = @ContainerExtraction(BuiltinContainerExtractors.MAP_KEY, BuiltinContainerExtractors.OPTIONAL)`.
However, such complex mappings are unlikely since they are generally not supported by Hibernate ORM.

[NOTE]
====
It is possible to implement and use custom container extractors,
but at the moment these extractors will not be handled correctly for automatic reindexing,
so the corresponding property must <<mapper-orm-reindexing-reindexonupdate,have automatic reindexing disabled>>.

See https://hibernate.atlassian.net/browse/HSEARCH-3688[HSEARCH-3688] for more information.
====

== Disabling container extraction

In some rare cases, container extraction is not wanted,
and the `@GenericField`/`@IndexedEmbedded` is meant to be applied to the `List`/`Optional`/etc. directly.
To ignore the default container extractors,
most annotations offer an `extraction` attribute.
Set it as below to disable extraction altogether:

.Disabling container extraction
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/containerextractor/Book.java[tags=no-extractor]
----
<1> Declare an index field based on the `authors` property.
<2> Instruct Hibernate Search to use the given bridge,
which will extract the collection size (the number of authors).
<3> Because the bridge is applied to the collection as a whole,
and not to each author,
the `extraction` attribute is used to disable container extraction.
====
