[[mapper-orm-directfieldmapping]]
= Mapping a property to an index field with `@GenericField`, `@FullTextField`, ...

[[mapper-orm-directfieldmapping-basics]]
== Basics

Properties of an entity can be mapped to an index field directly:
you just need to add an annotation, configure the field through the annotation attributes,
and Hibernate Search will take care of extracting the property value and populating the index field when necessary.

Mapping a property to an index field looks like this:

.Mapping properties to fields directly
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/directfieldmapping/Book.java[tags=direct-field-mapping]
----
<1> Map the `title` property to a full-text field with the same name.
Some options can be set to customize the fields' behavior, in this case the analyzer (for full-text indexing)
and the fact that this field is projectable (its value can be retrieved from the index).
<2> Map the `title` property to *another* field, configured differently:
it is not analyzed, but simply normalized (i.e. it's not split into multiple tokens),
and it is stored in such a way that it can be used in sorts.
+
Mapping a single property to multiple fields is particularly useful when doing full-text search:
at query time, you can use a different field depending on what you need.
You can map a property to as many fields as you want, but each must have a unique name.
<3> Map another property to its own field.
====

Before you map a property, you must consider two things:

The `@*Field` annotation::
In its simplest form, property/field mapping is achieved by applying the `@GenericField` annotation to a property.
This annotation will work for every supported property type, but is rather limited:
it does not allow full-text search in particular.
To go further, you will need to rely on different, more specific annotations,
which offer specific attributes.
The available annotations are described in details in <<mapper-orm-directfieldmapping-annotations>>.
The type of the property::
In order for the `@*Field` annotation to work correctly, the type of the mapped property must be supported by Hibernate Search.
See <<mapper-orm-directfieldmapping-supported-types>> for a list of all types that are supported out of the box,
and <<mapper-orm-directfieldmapping-custom-types>> for indications on how to handle more complex types,
be it simply containers (`List<String>`, `Map<String, Integer>`, ...)
or custom types.

[[mapper-orm-directfieldmapping-annotations]]
== Available field annotations

Various field annotations exist,
each offering its own set of attributes.

This section lists the different annotations and their use.
For more details about available attributes,
see <<mapper-orm-directfieldmapping-annotation-attributes>>.

`@GenericField`::
A good default choice that will work for every property type with built-in support.
+
Fields mapped using this annotation do not provide any advanced features such as full-text search:
matches on a generic field are exact matches.

[[mapper-orm-directfieldmapping-annotations-fulltextfield]] `@FullTextField`::
A text field whose value is considered as multiple words.
Only works for `String` fields.
+
Matches on a full-text field can be <<search-dsl-predicate-match-analysis,more subtle than exact matches>>:
match fields which contains a given word,
match fields regardless of case,
match fields ignoring diacritics,
...
+
Full-text fields must be assigned an <<mapper-orm-directfieldmapping-analyzer,analyzer>>, referenced by its name.
See <<concepts-analysis>> for more details about analyzers and full-text analysis.
Moreover, you can define <<mapper-orm-directfieldmapping-search-analyzer,a specific analyzer>>
a search analyzer to analyze searched terms differently.
+
IMPORTANT: Full-text fields cannot be sorted on.
If you need to sort on the value of a property,
it is recommended to use `@KeywordField`, with a normalizer if necessary (see below).
Note that multiple fields can be added to the same property,
so you can use both `@FullTextField` and `@KeywordField` if you need both
full-text search and sorting.

[[mapper-orm-directfieldmapping-annotations-keywordfield]] `@KeywordField`::
A text field whose value is considered as a single keyword.
Only works for `String` fields.
+
Keyword fields allow <<search-dsl-predicate-match-analysis,more subtle matches>>, similarly to full-text fields,
with the limitation that keyword fields only contain one token.
On the other hand, this limitation allows keyword fields to be <<mapper-orm-directfieldmapping-sortable,sorted on>>.
+
Keyword fields may be assigned a <<mapper-orm-directfieldmapping-normalizer,normalizer>>, referenced by its name.
See <<concepts-analysis>> for more details about normalizers and full-text analysis.

[[mapper-orm-directfieldmapping-annotations-scalednumberfield]] `@ScaledNumberField`::
A numeric field for integer or floating-point values
that require a higher precision than doubles
but always have roughly the same scale.
Only works for either `java.math.BigDecimal` or `java.math.BigInteger` fields.
+
Scaled numbers are indexed as integers, typically a long (64 bits),
with a fixed scale that is consistent for all values of the field across all documents.
Because scaled numbers are indexed with a fixed precision, they cannot represent all `BigDecimal` or `BigInteger` values.
Values that are too large to be indexed  will trigger a runtime exception.
Values that have trailing decimal digits will be rounded to the nearest integer.
+
This annotation allows to set <<mapper-orm-directfieldmapping-decimalscale, the decimalScale attribute>>.

`@NonStandardField`::
An annotation for advanced use cases
where a <<mapper-orm-bridge-valuebridge-valuebinder,value binder>> is used
and that binder is expected to define an index field type that does not support
any of the standard options: `searchable`, `sortable`, ...
+
This annotation is very useful for cases when a field type native to the backend is necessary:
<<backend-elasticsearch-field-types-extension,defining the mapping directly as JSON>> for Elasticsearch,
or <<backend-lucene-field-types-extension,manipulating `IndexableField` directly>> for Lucene.
+
Fields mapped using this annotation have very limited configuration options from the annotation
(no `searchable`/`sortable`/etc.),
but the value binder will be able to pick a non-standard field type,
which generally gives much more flexibility.

[[mapper-orm-directfieldmapping-annotation-attributes]]
== Field annotation attributes

Various field mapping annotations exist,
each offering its own set of attributes.

This section lists the different annotation attributes and their use.
For more details about available annotations,
see <<mapper-orm-directfieldmapping-annotations>>.

[[mapper-orm-directfieldmapping-name]] `name`::
The name of the index field. By default, it is the same as the property name.
You may want to change it in particular when mapping a single property to multiple fields.
+
Value: `String`. The name must not contain the dot character (`.`).
Defaults to the name of the property.

[[mapper-orm-directfieldmapping-sortable]] `sortable`::
Whether the field can be <<search-dsl-sort, sorted on>>,
i.e. whether a specific data structure is added to the index to allow efficient sorts when querying.
+
Value: `Sortable.YES`, `Sortable.NO`, `Sortable.DEFAULT`.
+
[IMPORTANT]
====
This option is not available for `@FullTextField`.
See <<mapper-orm-directfieldmapping-annotations-fulltextfield,here>> for an explanation and some solutions.
====

[[mapper-orm-directfieldmapping-projectable]] `projectable`::
Whether the field can be <<search-dsl-projection, projected on>>,
i.e. whether the field value is stored in the index to allow retrieval later when querying.
+
Value: `Projectable.YES`, `Projectable.NO`, `Projectable.DEFAULT`.

[[mapper-orm-directfieldmapping-aggregable]] `aggregable`::
Whether the field can be <<search-dsl-aggregation, aggregated>>,
i.e. whether the field value is stored in a specific data structure in the index
to allow aggregations later when querying.
+
Value: `Aggregable.YES`, `Aggregable.NO`, `Aggregable.DEFAULT`.

`searchable`::
Whether the field can be searched on.
i.e. whether the field is indexed in order to allow applying predicates later when querying.
+
Value: `Searchable.YES`, `Searchable.NO`, `Searchable.DEFAULT`.

[[mapper-orm-directfieldmapping-indexnullas]] `indexNullAs`::
The value to use as a replacement anytime the property value is null.
+
Disabled by default.
+
[IMPORTANT]
====
The replacement is defined as a String. Thus its value has to be parsed.
Look up the column _Parsing method for 'indexNullAs'_ in <<mapper-orm-directfieldmapping-supported-types>> to find out the format used when parsing.
====

`extraction`::
How elements to index should be extracted from the property in the case of container types
(`List`, `Optional`, `Map`, ...).
+
By default, for properties that have a container type,
the innermost elements will be indexed.
For example for a property of type `List<String>`, elements of type `String` will be indexed.
+
This default behavior and ways to override it are described
in the section <<mapper-orm-containerextractor>>.

[[mapper-orm-directfieldmapping-analyzer]] `analyzer`::
The analyzer to apply to field values when indexing and querying.
Only available on `@FullTextField`.
+
See <<concepts-analysis>> for more details about analyzers and full-text analysis.

[[mapper-orm-directfieldmapping-search-analyzer]] `searchAnalyzer`::
An optional different analyzer, overriding the one defined with the `analyzer` attribute,
to use only when analyzing searched terms.
If not defined, the analyzer assigned to `analyzer` will be used.
+
See <<concepts-analysis>> for more details about analyzers and full-text analysis.

[[mapper-orm-directfieldmapping-normalizer]] `normalizer`::
The normalizer to apply to field values when indexing and querying.
Only available on `@KeywordField`.
+
See <<concepts-analysis>> for more details about normalizers and full-text analysis.

`norms`::
Whether index-time scoring information for the field should be stored or not.
Only available on `@KeywordField` and `@FullTextField`.
+
Enabling norms will improve the quality of scoring.
Disabling norms will reduce the disk space used by the index.
+
Value: `Norms.YES`, `Norms.NO`, `Norms.DEFAULT`.

`termVector`::
The term vector storing strategy.
Only available on `@FullTextField`.
+
The different values of this attribute are:
+
[options="header"]
|===============
|Value|Definition
|`TermVector.YES`|Store the term vectors of each document.
	This produces two synchronized arrays, one contains document terms and the other contains the term's frequency.
|`TermVector.NO`|Do not store term vectors.
|`TermVector.WITH_POSITIONS`|Store the term vector and token position information.
	This is the same as `TermVector.YES` plus it contains the ordinal positions of each occurrence of a term in a document.
|`TermVector.WITH_OFFSETS`|Store the term vector and token offset information.
	This is the same as `TermVector.YES` plus it contains the starting and ending offset position information for the terms.
|`TermVector.WITH_POSITION_OFFSETS`|Store the term vector, token position and offset information.
	This is a combination of the `YES`, `WITH_OFFSETS` and `WITH_POSITIONS`.
|`TermVector.WITH_POSITIONS_PAYLOADS`|Store the term vector, token position and token payloads.
	This is the same as `TermVector.WITH_POSITIONS` plus it contains the payload of each occurrence of a term in a document.
|`TermVector.WITH_POSITIONS_OFFSETS_PAYLOADS`|Store the term vector, token position, offset information and token payloads.
	This is the same as `TermVector.WITH_POSITION_OFFSETS` plus it contains the payload of each occurrence of a term in a document.
|===============

[[mapper-orm-directfieldmapping-decimalscale]] `decimalScale`::
How the scale of a large number (`BigInteger` or `BigDecimal`) should be adjusted before it is indexed as a fixed-precision integer.
Only available on `@ScaledNumberField`.
+
To index numbers that have significant digits after the decimal point, set the `decimalScale` to the number of digits you need indexed.
The decimal point will be shifted that many times to the right before indexing, preserving that many digits from the decimal part.
To index very large numbers that cannot fit in a long, set the decimal point to a negative value.
The decimal point will shifted that many times to the left before indexing, dropping all digits from the decimal part.
+
`decimalScale` with strictly positive values is allowed only for `BigDecimal`, since `BigInteger` values have no decimal digits.
+
Note that shifting of the decimal points is completely transparent and will not affect how you use the search DSL:
you be expected to provide "normal" `BigDecimal` or `BigInteger` values,
and Hibernate Search will apply the `decimalScale` and rounding transparently.
+
As a result of the rounding, search predicates and sorts will only be as precise as what the `decimalScale` allows.
+
Note that rounding does not affect projections, which will return the original value without any loss of precision.
+
NOTE: A typical use case is monetary amounts, with a decimal scale of 2
because only two digits are generally needed beyond the decimal point.
+
NOTE: Using Hibernate ORM mapping,
a default `decimalScale` is taken automatically from the underlying `scale` value of the relative SQL `@Column`,
using the Hibernate ORM metadata. The value could be overridden explicitly using the `decimalScale` attribute.

[[mapper-orm-directfieldmapping-supported-types]]
== Supported property types
// Search 5 anchors backward compatibility
[[section-built-in-bridges]]

Below is a table listing all types with built-in value bridges,
i.e. property types that are supported out of the box
when mapping a property to an index field.

The table also explains the value assigned to the index field,
i.e. the value passed to the underlying backend for indexing.

[NOTE]
====
For information about the underlying indexing and storage used by the backend,
see <<backend-lucene-field-types,Lucene field types>>
or <<backend-elasticsearch-field-types,Elasticsearch field types>> depending on your backend.
====

[cols="l,1,1,1",options="header"]
.Property types with built-in value bridges
|===
|Property type|Value of index field (if different)|Limitations|Parsing method for 'indexNullAs'
|All enum types|`name()` as a `java.lang.String`|-|`Enum.valueOf(String)`
|java.lang.String|-|-|-
|java.lang.Character, char|A single-character `java.lang.String`|-|Accepts any single-character `java.lang.String`
|java.lang.Byte, byte|-|-|`Byte.parseByte(String)`
|java.lang.Short, short|-|-|`Short.parseShort(String)`
|java.lang.Integer, int|-|-|`Integer.parseInt(String)`
|java.lang.Long, long|-|-|`Long.parseLong(String)`
|java.lang.Double, double|-|-|`Double.parseDouble(String)`
|java.lang.Float, float|-|-|`Float.parseFloat(String)`
|java.lang.Boolean, boolean|-|-|Accepts the strings `true` or `false`, ignoring case
|java.math.BigDecimal|-|-|`new BigDecimal(String)`
|java.math.BigInteger|-|-|`new BigInteger(String)`
|java.net.URI|`toString()` as a `java.lang.String`|-|`new URI(String)`
|java.net.URL|`toExternalForm()` as a `java.lang.String`|-|`new URL(String)`
|java.time.Instant
 |-
 |<<mapper-orm-directfieldmapping-supported-types-date-time>>
 |`Instant.parse(String)`
|java.time.LocalDate
 |-
 |<<mapper-orm-directfieldmapping-supported-types-date-time>>
 |`LocalDate.parse(String)`.
|java.time.LocalTime
 |-
 |<<mapper-orm-directfieldmapping-supported-types-date-time>>
 |`LocalTime.parse(String)`
|java.time.LocalDateTime
 |-
 |<<mapper-orm-directfieldmapping-supported-types-date-time>>
 |`LocalDateTime.parse(String)`
|java.time.OffsetDateTime
 |-
 |<<mapper-orm-directfieldmapping-supported-types-date-time>>
 |`OffsetDateTime.parse(String)`
|java.time.OffsetTime
 |-
 |<<mapper-orm-directfieldmapping-supported-types-date-time>>
 |`OffsetTime.parse(String)`
|java.time.ZonedDateTime
 |-
 |<<mapper-orm-directfieldmapping-supported-types-date-time>>
 |`ZonedDateTime.parse(String)`
|java.time.ZoneId|`getId()` as a `java.lang.String`|-|`ZoneId.of(String)`
|java.time.ZoneOffset|`getTotalSeconds()` as a `java.lang.Integer`|-|`ZoneOffset.of(String)`
|java.time.Period|A formatted `java.lang.String`: `<years on 11 characters><months on 11 characters><days on 11 characters>`|-|`Period.parse(String)`
|java.time.Duration
 |`toNanos()` as a `java.lang.Long`
 |<<mapper-orm-directfieldmapping-supported-types-date-time>>
 |`Duration.parse(String)`
|java.time.Year
 |-
 |<<mapper-orm-directfieldmapping-supported-types-date-time>>
 |`Year.parse(String)`
|java.time.YearMonth
 |-
 |<<mapper-orm-directfieldmapping-supported-types-date-time>>
 |`YearMonth.parse(String)`
|java.time.MonthDay|-|-|`MonthDay.parse(String)`
|java.util.UUID|`toString()` as a `java.lang.String`|-|`UUID.fromString(String)`
|java.util.Calendar
 |A `java.time.ZonedDateTime` representing the same date/time and timezone.
 |See <<mapper-orm-legacy-date-time-apis>>.
 |`ZonedDateTime.parse(String)`
|java.util.Date
 |`Instant.ofEpochMilli(long)` as a `java.time.Instant`.
 |See <<mapper-orm-legacy-date-time-apis>>.
 |`Instant.parse(String)`
|java.sql.Timestamp
 |`Instant.ofEpochMilli(long)` as a `java.time.Instant`.
 |See <<mapper-orm-legacy-date-time-apis>>.
 |`Instant.parse(String)`
|java.sql.Date
 |`Instant.ofEpochMilli(long)` as a `java.time.Instant`.
 |See <<mapper-orm-legacy-date-time-apis>>.
 |`Instant.parse(String)`
|java.sql.Time
 |`Instant.ofEpochMilli(long)` as a `java.time.Instant`.
 |See <<mapper-orm-legacy-date-time-apis>>.
 |`Instant.parse(String)`
|org.hibernate.search.engine.spatial.GeoPoint and subtypes|-|-|Latitude as double and longitude as double, separated by a comma. Ex: `41.8919, 12.51133`.
|===

[[mapper-orm-directfieldmapping-supported-types-date-time,Possibly lower range/resolution]]
[NOTE]
.Range and resolution of date/time fields
====
With a few exceptions, most date and time values are passed as-is to the backend;
e.g. a `LocalDateTime` property would be passed as a `LocalDateTime` to the backend.

Internally, however, the Lucene and Elasticsearch backend use a different representation of date/time types.
As a result, date and time fields stored in the index may have a smaller range and resolution
than the corresponding Java type.

The documentation of each backend provides more information:
see <<backend-lucene-field-types-date-time,here for Lucene>>
and <<backend-elasticsearch-field-types-date-time,here for Elasticsearch>>.
====

[[mapper-orm-legacy-date-time-apis]]
== Support for legacy `java.util` date/time APIs

Using legacy date/time types such as `java.util.Calendar`, `java.util.Date`, `java.sql.Timestamp`, `java.sql.Date`, `java.sql.Time`
is not recommended,
due to their numerous quirks and shortcomings.
The https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html[`java.time`] package introduced
in Java 8 should generally be preferred.

That being said, integration constraints may force you to rely on the legacy date/time APIs,
which is why Hibernate Search still attempts to support them on a best effort basis.

Since Hibernate Search uses the `java.time` APIs to represent date/time internally,
the legacy date/time types need to be converted before they can be indexed.
Hibernate Search keeps things simple:
`java.util.Date`, `java.util.Calendar`, etc. will be converted using their time-value (number of milliseconds since the epoch),
which will be assumed to represent the same date/time in Java 8 APIs.
In the case of `java.util.Calendar`, timezone information will be preserved for projections.

For all dates after 1900, this will work exactly as expected.

Before 1900, indexing and searching through Hibernate Search APIs will also work as expected,
but *if you need to access the index natively*, for example through direct HTTP calls to an Elasticsearch server,
you will notice that the indexed values are slightly "off".
This is caused by differences in the implementation of `java.time` and legacy date/time APIs
which lead to slight differences in the interpretation of time-values (number of milliseconds since the epoch).

The "drifts" are consistent: they will also happen when building a predicate,
and they will happen in the opposite direction when projecting.
As a result, the differences will not be visible from an application relying on the Hibernate Search APIs exclusively.
They will, however, be visible when accessing indexes natively.

For the large majority of use cases, this will not be a problem.
If this behavior is not acceptable for your application,
you should look into implementing custom <<mapper-orm-bridge-valuebridge,value bridges>>
and instructing Hibernate Search to use them by default for `java.util.Date`, `java.util.Calendar`, etc.:
see <<mapper-orm-bridge-resolver>>.

[TIP]
====
Technically, conversions are difficult because the `java.time` APIs
and the legacy date/time APIs do not have the same internal calendar.

In particular:

* `java.time` assumes a "Local Mean Time" before 1900, while legacy date/time APIs do not support it
(https://bugs.openjdk.java.net/browse/JDK-6281408[JDK-6281408]),
As a result, time values (number of milliseconds since the epoch) reported by the two APIs
will be different for dates before 1900.
* `java.time` uses a proleptic Gregorian calendar before October 15, 1582,
meaning it acts as if the Gregorian calendar, along with its system of leap years, had always existed.
Legacy date/time APIs, on the other hand, use the Julian calendar before that date (by default),
meaning the leap years are not exactly the same ones.
As a result, some dates that are deemed valid by one API will be deemed invalid by the other,
for example February 29, 1500.

Those are the two main problems, but there may be others.
====

[[mapper-orm-directfieldmapping-custom-types]]
== Mapping custom property types

Even types that are not <<mapper-orm-directfieldmapping-supported-types,supported out of the box>> can be mapped.
There are various solutions, some simple and some more powerful,
but they all come down to extracting data from the unsupported type and converting it to types that are
supported by the backend.

There are two cases to distinguish between:

1. If the unsupported type is simply a container (`List<String>`)
or multiple nested containers (`Map<Integer, List<String>>`)
whose elements have a supported type,
then what you need is a container extractor.
See <<mapper-orm-containerextractor>> for more information.
2. Otherwise, you will have to rely on a custom component, called a bridge, to extract data from your type.
See <<mapper-orm-bridge>> for more information on custom bridges.
