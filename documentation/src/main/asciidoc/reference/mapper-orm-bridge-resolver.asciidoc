[[mapper-orm-bridge-resolver]]
= Assigning default bridges with the bridge resolver
// Search 5 anchors backward compatibility
[[_bridgeprovider_associate_a_bridge_to_a_given_return_type]]

== Basics

Both the <<mapper-orm-directfieldmapping-supported-types,`@*Field` annotations>>
and the <<mapper-orm-identifiermapping-supported-types,`@DocumentId` annotation>>
support a broad range of standard types by default,
without needing to tell Hibernate Search how to convert values to something that can be indexed.

Under the hood, the support for default types is handled by the bridge resolver.
For example, when a property is mapped with `@GenericField`
and neither `@GenericField.valueBridge` nor `@GenericField.valueBinder` is set,
Hibernate Search will resolve the type of this property,
then pass it to the bridge resolver,
which will return an appropriate bridge, or fail if there isn't any.

It is possible to customize the bridge resolver,
to override existing default bridges (indexing `java.util.Date` differently, for example)
or to define default bridges for additional types (a geo-spatial type from an external library, for example).

To that end, define a mapping configurer as explained in <<mapper-orm-programmatic-mapping>>,
then define bridges as shown below:

.Defining default bridges with a mapping configurer
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/resolver/MyDefaultBridgesConfigurer.java[tags=include]
----
<1> Use our custom bridge (`MyCoordinatesBridge`) by default when a property of type `MyCoordinates`
is mapped to an index field (e.g. with `@GenericField`).
<2> Use our custom bridge (`MyProductBridge`) by default when a property of type `MyProductId`
is mapped to a document identifier (e.g. with `@DocumentId`).
<3> It's also possible to specify a binder instead of a bridge,
so that additional settings can be tuned.
Here we're assigning the "isbn" normalizer every time we map an ISBN to an index field.
====

== Assigning a single binder to multiple types

include::components/incubating-warning.asciidoc[]

For more advanced use cases, it is also possible to assign a single binder to subtypes of a given type.
This is useful when many types should be indexed similarly.

Below is an example where enums are not indexed as their `.name()` (which is the default),
but instead are indexed as their label retrieved from an external service.

.Assigning a single default binder to multiple types with a mapping configurer
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/resolver/MyDefaultBridgesConfigurer.java[tags=advanced]
----
<1> Match all subtypes of `Enum`.
<2> <<mapper-orm-bridge-valuebridge-incubating,Retrieve the type of the element being bridged>>.
<3> <<mapper-orm-bridge-valuebridge-injection,Retrieve an external service>> (through CDI/Spring).
<4> Create and assign the bridge.
====