[[mapper-orm-programmatic-mapping]]
= Programmatic mapping
// Search 5 anchors backward compatibility
[[hsearch-mapping-programmaticapi]]

== Basics

Most examples in this documentation use annotation-based mapping,
which is generally enough for most applications.
However, some applications have needs that go beyond the what annotations can offer:

* a single entity type must be mapped differently for different deployments -- e.g. for different customers.
* many entity types must be mapped similarly, without code duplication.

To address those needs, you can use _programmatic_ mapping:
define the mapping through code that will get executed on startup.

Implementing a programmatic mapping requires two steps:

. Define a class that implements the `org.hibernate.search.mapper.orm.mapping.HibernateOrmSearchMappingConfigurer` interface.
. Configure Hibernate Search to use that implementation by setting the configuration property
`hibernate.search.mapping.configurer`
to a <<configuration-property-types,bean reference>> pointing to the implementation.

Hibernate Search will call the `configure` method of this implementation on startup,
and the configurer will be able to take advantage of a DSL to define
the programmatic mapping.

[NOTE]
====
Programmatic mapping is declarative and exposes the exact same features as annotation-based mapping.

In order to implement more complex, "imperative" mapping,
for example to combine two entity properties into a single index field,
use <<mapper-orm-bridge,custom bridges>>.
====

[TIP]
====
Alternatively, if you only need to repeat the same mapping for several types or properties,
you can apply a custom annotation on those types or properties,
and have Hibernate Search execute some programmatic mapping code when it encounters that annotation.
This solution doesn't require a mapping configurer.

See <<mapper-orm-custom-annotations>> for more information.
====

See below for an example. The following sections also provides one example of programmatic mapping for each feature.

.Implementing a mapping configurer
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/programmatic/simple/MySearchMappingConfigurer.java[tags=include]
----
<1> Access the programmatic mapping.
<2> Access the programmatic mapping of type `Book`.
<3> Define `Book` as <<mapper-orm-entityindexmapping-programmatic,indexed>>.
<4> Access the programmatic mapping of property `title` of type `Book`.
<5> Define an <<mapper-orm-directfieldmapping-programmatic,index field>> based on property `title` of type `Book`.
====

[TIP]
====
By default, programmatic mapping will be merged with annotation mapping (if any).

To disable annotation mapping, set `hibernate.search.mapping.process_annotations` to `false`.
====

[[mapper-orm-programmatic-mapping-dynamicmap]]
== Mapping `Map`-based models

link:{hibernateDocUrl}#dynamic-model["dynamic-map" entity models],
i.e. models based on `java.util.Map` instead of custom classes,
cannot be mapped using annotations.
However, they can be mapped using the programmatic mapping API:
you just need to refer to the types by their name using `context.programmaticMapping().type("thename")`:

* The entity name for dynamic entity types.
* The "role" for dynamic embedded/component types,
i.e. the name of the owning entity, followed by a dot ("."),
followed by the dot-separated path to the component in that entity.
For example `MyEntity.myEmbedded` or `MyEntity.myEmbedded.myNestedEmbedded`.

However, support for "dynamic-map" entity models is limited. In particular:

* <<mapper-orm-indexing-massindexer,Mass indexing>> dynamic-map entities is not supported.
See https://hibernate.atlassian.net/browse/HSEARCH-3771[HSEARCH-3771].
