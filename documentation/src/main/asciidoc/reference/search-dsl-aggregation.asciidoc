[[search-dsl-aggregation]]
= Aggregation DSL
// Search 5 anchors backward compatibility
[[query-faceting]]

[[search-dsl-aggregation-concepts]]
== Basics

Sometimes, you don't just need to list query hits directly:
you also need to group and aggregate the hits.

// Search 5 anchors backward compatibility
[[example-amazon-facets]]
For example, almost any e-commerce website you can visit will have some sort of "faceting",
which is a simple form of aggregation.
In the "book search" webpage of an online bookshop, beside the list of matching books,
you will find "facets", i.e. a count of matching documents in various categories.
These categories can be taken directly from the indexed data, e.g. the genre of the book (science-fiction, crime fiction, ...),
but also derived from the indexed data slightly, e.g. a price range ("less than $5", "less than $10", ...).

Aggregations allow just that (and, depending on the backend, much more):
they allow the query to return "aggregated" hits.

// Search 5 anchors backward compatibility
[[section-creating-faceting-request]][[section-applying-faceting-request]]
Aggregations can be configured when building the search query:

// Search 5 anchors backward compatibility
[[example-applying-faceting]]
.Defining an aggregation in a search query
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/search/aggregation/AggregationDslIT.java[tags=entryPoint-lambdas]
----
<1> Define a key that will uniquely identify the aggregation. Make sure to give it the correct type (see <6>).
<2> Start building the query as usual.
<3> Define a predicate: the aggregation will only take into account documents matching this predicate.
<4> Request an aggregation on the `genre` field,
with a separate count for each genre: science-fiction, crime fiction, ...
If the field does not exist or cannot be aggregated, an exception will be thrown.
<5> Fetch the results.
<6> Retrieve the aggregation from the results as a `Map`,
with the genre as key and the hit count as value of type `Long`.
====

Alternatively, if you don't want to use lambdas:

.Defining an aggregation in a search query -- object-based syntax
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/search/aggregation/AggregationDslIT.java[tags=entryPoint-objects]
----
====

// Search 5 anchors backward compatibility
[[example-faceting-entity]]
[NOTE]
====
There are a few constraints regarding aggregations.
In particular, in order for a field to be "aggregable", it must be <<mapper-orm-directfieldmapping-aggregable,marked as such in the mapping>>,
so that it is correctly stored in the index.
====

// Search 5 anchors backward compatibility
[[example-restricting-query-results]]
[TIP]
====
Faceting generally involves a concept of "drill-down",
i.e. the ability to select a facet and restrict the hits
to only those that match that facet.

Hibernate Search 5 used to offer a dedicated API to enable this "drill-down",
but in Hibernate Search 6 you should simply create a new query
with the appropriate <<search-dsl-predicate,predicate>>.
====

The aggregation DSL offers more aggregation types, and multiple options for each type of aggregation.
To learn more about the `terms` aggregation, and all the other types of aggregations,
refer to the following sections.

[[search-dsl-aggregation-terms]]
== `terms`: group by the value of a field
// Search 5 anchors backward compatibility
[[discrete-faceting-request]]

The `terms` aggregation returns a count of documents for each term value of a given field.

[NOTE]
====
The `terms` aggregation is not available on geo-point fields.
====

.Counting hits grouped by the value of a field
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/search/aggregation/AggregationDslIT.java[tags=terms]
----
<1> Define the path and type of the field whose values should be considered.
<2> The result is a map from field value to document count.
====

=== Skipping conversion

By default, the values returned by the `terms` aggregation have the same type as
the entity property corresponding to the target field.

For example, if an entity property if of an enum type,
<<mapper-orm-directfieldmapping-supported-types,the corresponding field may be of type `String`>>;
the values returned by the `terms` aggregation will be of the enum type regardless.

This should generally be what you want,
but if you ever need to bypass conversion and have unconverted values returned to you instead
(of type `String` in the example above),
you can do it this way:

.Counting hits grouped by the value of a field, without converting field values
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/search/aggregation/AggregationDslIT.java[tags=terms-noConverter]
----
====

See <<search-dsl-projected-value-type>> for more information.

[[search-dsl-aggregation-terms-maxtermcount]]
=== `maxTermCount`: limiting the number of returned entries

By default, Hibernate Search will return at most 100 entries.
You can customize the limit by calling `.maxTermCount(...)`:

.Setting the maximum number of returned entries in a `terms` aggregation
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/search/aggregation/AggregationDslIT.java[tags=terms-max-term-count]
----
====

[[search-dsl-aggregation-terms-mindocumentcount]]
=== `minDocumentCount`: requiring at least N matching documents per term

By default, Hibernate search will return an entry only if the document count is at least 1.

You can set the threshold to an arbitrary value by calling `.minDocumentCount(...)`.

This is particularly useful to return all terms that exist in the index,
even if no document containing the term matched the query.
To that end, just call `.minDocumentCount(0)`:

.Including values from unmatched documents in a `terms` aggregation
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/search/aggregation/AggregationDslIT.java[tags=terms-min-doc-count-zero]
----
====

This can also be used to omit entries with a document count that is too low to matter:

.Excluding the rarest terms from a `terms` aggregation
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/search/aggregation/AggregationDslIT.java[tags=terms-min-doc-count-high]
----
====

[[search-dsl-aggregation-terms-order]]
=== Order of entries

By default, entries are returned in descending order of document count,
i.e. the terms with the most matching documents appear first.

Several other orders are available.

[WARNING]
====
With the Lucene backend, due to limitations of the current implementation,
using any order other than the default one (by descending count)
may lead to incorrect results.
See https://hibernate.atlassian.net/browse/HSEARCH-3666[HSEARCH-3666] for more information.
====

You can order entries by ascending term value:

// Search 5 anchors backward compatibility
[[section-sorting-faceting-request]]
.Ordering entries by ascending value in a `terms` aggregation
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/search/aggregation/AggregationDslIT.java[tags=terms-order-term-ascending]
----
====

You can order entries by descending term value:

.Ordering entries by descending value in a `terms` aggregation
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/search/aggregation/AggregationDslIT.java[tags=terms-order-term-descending]
----
====

Finally, you can order entries by ascending document count:

.Ordering entries by ascending count in a `terms` aggregation
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/search/aggregation/AggregationDslIT.java[tags=terms-order-count-ascending]
----
====

[WARNING]
====
When ordering entries by ascending count in a `terms` aggregation,
link:{elasticsearchDocUrl}/search-aggregations-bucket-terms-aggregation.html#search-aggregations-bucket-terms-aggregation-order[hit counts are approximate].
====

=== Other options

* For fields in nested objects, all nested objects are considered by default,
but that can be <<search-dsl-aggregation-common-filter,controlled explicitly with `.filter(...)`>>.

[[search-dsl-aggregation-range]]
== `range`: grouped by ranges of values for a field
// Search 5 anchors backward compatibility
[[range-faceting-request]]

The `range` aggregation returns a count of documents for given ranges of values of a given field.

[NOTE]
====
The `range` aggregation is not available on text fields or geo-point fields.
====

.Counting hits grouped by range of values for a field
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/search/aggregation/AggregationDslIT.java[tags=range]
----
<1> Define the path and type of the field whose values should be considered.
<2> Define the ranges to group hits into.
The range can be passed directly as the lower bound (included) and upper bound (excluded).
Other syntaxes exist to define different bound inclusion (see other examples below).
<3> `null` means "to infinity".
====

=== Passing `Range` arguments

Instead of passing two arguments for each range (a lower and upper bound),
you can pass a single argument of type `Range`.

.Counting hits grouped by range of values for a field -- passing `Range` objects
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/search/aggregation/AggregationDslIT.java[tags=range-objects]
----
<1> With `Range.of(Object, Object)`, the lower bound is included and the upper bound is excluded.
<2> `Range.of(Object, RangeBoundInclusion, Object, RangeBoundInclusion)` is more verbose, but allows setting the bound inclusion explicitly.
<3> `Range` also offers multiple static methods to create ranges for a variety of use cases ("at least", "greater than", "at most", ...).
====

[WARNING]
====
With the Elasticsearch backend, due to a limitation of Elasticsearch itself,
all ranges must have their lower bound included (or `null`)
and their upper bound excluded (or `null`).
Otherwise, an exception will be thrown.

If you need to exclude the lower bound, or to include the upper bound,
replace that bound with the immediate next value instead.
For example with integers, `.range( 0, 100 )` means "0 (included) to 100 (excluded)".
Call `.range( 0, 101 )` to mean "0 (included) to 100 (included)",
or `.range( 1, 100 )` to mean "0 (excluded) to 100 (excluded)".
====

It's also possible to pass a collection of `Range` objects,
which is especially useful if ranges are defined dynamically (e.g. in a web interface):

.Counting hits grouped by range of values for a field -- passing a collection of `Range` objects
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/search/aggregation/AggregationDslIT.java[tags=range-objects-collection]
----
====

=== Skipping conversion

By default, the bounds of ranges accepted by the `range` aggregation must have the same type as
the entity property corresponding to the target field.

For example, if an entity property if of type `java.util.Date`,
<<mapper-orm-directfieldmapping-supported-types,the corresponding field may be of type `java.time.Instant`>>;
the values returned by the `terms` aggregation will have to be of type `java.util.Date` regardless.

This should generally be what you want,
but if you ever need to bypass conversion and have unconverted values returned to you instead
(of type `java.time.Instant` in the example above),
you can do it this way:

.Counting hits grouped by range of values for a field, without converting field values
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/search/aggregation/AggregationDslIT.java[tags=range-noConverter]
----
====

See <<search-dsl-argument-type>> for more information.

=== Other options

* For fields in nested objects, all nested objects are considered by default,
but that can be <<search-dsl-aggregation-common-filter,controlled explicitly with `.filter(...)`>>.

[[search-dsl-aggregation-extensions]]
== Backend-specific extensions

By calling `.extension(...)` while building a query,
it is possible to access backend-specific aggregations.

[NOTE]
====
As their name suggests, backend-specific aggregations are not portable from one backend technology to the other.
====

[[search-dsl-aggregation-extensions-elasticsearch-from-json]]
=== Elasticsearch: `fromJson`

`.fromJson(...)` turns JSON representing an Elasticsearch aggregation into a Hibernate Search aggregation.

include::components/elasticsearch-json-warning.asciidoc[]

.Defining a native Elasticsearch JSON aggregation as a `JsonObject`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/search/aggregation/AggregationDslIT.java[tags=elasticsearch-fromJson-jsonObject]
----
<1> The aggregation result is a `JsonObject`.
====

.Defining a native Elasticsearch JSON aggregation as a JSON-formatted string
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/search/aggregation/AggregationDslIT.java[tags=elasticsearch-fromJson-string]
----
<1> The aggregation result is a `JsonObject`.
====

[[search-dsl-aggregation-common]]
== Options common to multiple aggregation types

[[search-dsl-aggregation-common-filter]]
=== Filter for fields in nested objects

When the aggregation field is located in a <<mapper-orm-indexedembedded-structure-nested,nested object>>,
by default all nested objects will be considered for the aggregation,
and the document will be counted once for each value found in any nested object.

It is possible to filter the nested documents whose values will be considered for the aggregation
using one of the `filter(...)` methods.

Below is an example with the <<search-dsl-aggregation-range,range aggregation>>:
the result of the aggregation is a count of books for each price range,
with only the price of "paperback" editions being taken into account;
the price of e-book editions, for example, is ignored.

.Counting hits grouped by range of values for a field, using a filter for nested objects
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/search/aggregation/AggregationDslIT.java[tags=filter]
----
====
