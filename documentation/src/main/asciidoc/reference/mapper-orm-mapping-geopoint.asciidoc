[[mapper-orm-geopoint]]
= Mapping geo-point types
// Search 5 anchors backward compatibility
[[spatial]]

== Basics

Hibernate Search provides a variety of spatial features
such as <<search-dsl-predicate-spatial-within,a distance predicate>>
and <<search-dsl-sort-distance,a distance sort>>.
These features require that spatial coordinates are indexed.
More precisely, it requires that a *geo-point*,
i.e. a latitude and longitude in the geographic coordinate system, are indexed.

Geo-points are a bit of an exception,
because there isn't any type in the standard Java library to represent them.
For that reason, Hibernate Search defines its own interface,
`org.hibernate.search.engine.spatial.GeoPoint`.
Since your model probably uses a different type to represent geo-points,
mapping geo-points requires some extra steps.

Two options are available:

* If your geo-points are represented by a dedicated, immutable type,
simply use `@GenericField` and the `GeoPoint` interface,
as explained <<mapper-orm-geopoint-genericfield, here>>.
* For every other case, use the more complex (but more powerful) `@GeoPointBinding`,
as explained <<mapper-orm-geopoint-geopointbinding, here>>.

[[mapper-orm-geopoint-genericfield]]
== Using `@GenericField` and the `GeoPoint` interface
// Search 5 anchors backward compatibility
[[spatial-coordinatesinterface]]

When geo-points are represented in your entity model by a dedicated, *immutable* type,
you can simply make that type implement the `GeoPoint` interface,
and use simple <<mapper-orm-directfieldmapping,property/field mapping>> with `@GenericField`:

.Mapping spatial coordinates by implementing `GeoPoint` and using `@GenericField`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/spatial/genericfield/MyCoordinates.java[tags=include]
----
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/spatial/genericfield/Author.java[tags=include;!getters-setters]
----
<1> Model the geo-point as an embeddable implementing `GeoPoint`.
A custom type with a corresponding Hibernate ORM `UserType` would work as well.
<2> The geo-point type *must be immutable*: it does not declare any setter.
<3> Apply the `@GenericField` annotation to the `placeOfBirth` property holding the coordinates.
An index field named `placeOfBirth` will be added to the index.
Options generally used on `@GenericField` can be used here as well.
====

[WARNING]
====
The geo-point type *must be immutable*,
i.e. the latitude and longitude of a given instance may never change.

This is a core assumption of `@GenericField` and generally all `@*Field` annotations:
changes to the coordinates will be ignored and will not trigger reindexing as one would expect.

If the type holding your coordinates is mutable,
do not use `@GenericField`
and refer to <<mapper-orm-geopoint-geopointbinding>> instead.
====

[TIP]
====
If your geo-point type is immutable, but extending the `GeoPoint` interface is not an option,
you can also use a custom <<mapper-orm-bridge-valuebridge,value bridge>>
converting between the custom geo-point type and `GeoPoint`.
`GeoPoint` offers static methods to quickly build a `GeoPoint` instance.
====

[[mapper-orm-geopoint-geopointbinding]]
== Using `@GeoPointBinding`, `@Latitude` and `@Longitude`
// Search 5 anchors backward compatibility
[[spatial-indexing-range]]
[[spatial-indexing-spatialHash]]

For cases where coordinates are stored in a mutable object,
the solution is the `@GeoPointBinding` annotation.
Combined with the `@Latitude` and `@Longitude` annotation,
it can map the coordinates of any type that declares a latitude and longitude of type `double`:

.Mapping spatial coordinates using `@GeoPointBinding`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/spatial/geopointbinding/type/Author.java[tags=include;!getters-setters]
----
<1> Apply the `@GeoPointBinding` annotation to the type,
setting `fieldName` to the name of the index field.
<2> Apply `@Latitude` to the property holding the latitude. It must be of `double` or `Double` type.
<3> Apply `@Longitude` to the property holding the longitude. It must be of `double` or `Double` type.
====

The `@GeoPointBinding` annotation may also be applied to a property,
in which case the `@Latitude` and `@Longitude` must be applied to properties of the property's type:

.Mapping spatial coordinates using `@GeoPointBinding` on a property
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/spatial/geopointbinding/property/MyCoordinates.java[tags=include]
----
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/spatial/geopointbinding/property/Author.java[tags=include;!getters-setters]
----
<1> Model the geo-point as an embeddable.
An entity would work as well.
<2> In the geo-point type, apply `@Latitude` to the property holding the latitude.
<3> In the geo-point type, apply `@Longitude` to the property holding the longitude.
<4> The geo-point type may safely declare setters (it can be mutable).
<5> Apply the `@GeoPointBinding` annotation to the property.
Setting `fieldName` to the name of the index field is possible, but optional:
the property name will be used by default.
====

It is possible to handle multiple sets of coordinates by applying the annotations multiple times
and setting the `markerSet` attribute to a unique value:

[[spatial-multiplecoordinates]]
.Mapping spatial coordinates using `@GeoPointBinding` on a property
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/spatial/geopointbinding/multiple/Author.java[tags=include;!getters-setters]
----
<1> Apply the `@GeoPointBinding` annotation to the type,
setting `fieldName` to the name of the index field, and `markerSet` to a unique value.
<2> Apply the `@GeoPointBinding` annotation to the type a second time,
setting `fieldName` to the name of the index field (different from the first one),
and `markerSet` to a unique value (different from the first one).
<3> Apply `@Latitude` to the property holding the latitude for the first geo-point field.
Set the `markerSet` attribute to the same value as the corresponding `@GeoPointBinding` annotation.
<4> Apply `@Longitude` to the property holding the longitude for the first geo-point field.
Set the `markerSet` attribute to the same value as the corresponding `@GeoPointBinding` annotation.
<5> Apply `@Latitude` to the property holding the latitude for the second geo-point field.
Set the `markerSet` attribute to the same value as the corresponding `@GeoPointBinding` annotation.
<6> Apply `@Longitude` to the property holding the longitude for the second geo-point field.
Set the `markerSet` attribute to the same value as the corresponding `@GeoPointBinding` annotation.
====

[[mapper-orm-geopoint-programmatic]]
== Programmatic mapping

You can map geo-point fields document identifier through the <<mapper-orm-programmatic-mapping,programmatic mapping>> too.
Behavior and options are identical to annotation-based mapping.

.Mapping spatial coordinates by implementing `GeoPoint` and using `.genericField()`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/spatial/genericfield/GeoPointGenericFieldIT.java[tags=programmatic]
----
====

.Mapping spatial coordinates using `GeoPointBinder`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/spatial/geopointbinding/type/GeoPointBindingTypeIT.java[tags=programmatic]
----
====
