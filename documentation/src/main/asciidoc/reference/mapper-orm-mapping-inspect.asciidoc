[[mapper-orm-mapping-inspect]]
= Inspecting the mapping
// Search 5 anchors backward compatibility
[[_metadata_api]]

After Hibernate Search has successfully booted, the `SearchMapping` can be used
to get a list of indexed entities and get more direct access to the corresponding indexes,
as shown in the example below.

.Accessing indexed entities
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/indexedentities/SearchMappingIndexedEntitiesIT.java[tags=indexedEntities]
----
<1> Retrieve the `SearchMapping`.
<2> Retrieve the `SearchIndexedEntity` by its entity class.
`SearchIndexedEntity` gives access to information pertaining to that entity and its index.
<3> Get the JPA name of that entity.
<4> Get the index manager for that entity.
<5> Get the backend for that index manager.
<6> Retrieve the `SearchIndexedEntity` by its entity name.
<7> Retrieve all indexed entities.
====

From an `IndexManager`, you can then access the index metamodel,
to inspect available fields and their main characteristics,
as shown below.

.Accessing the index metamodel
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/indexedentities/SearchMappingIndexedEntitiesIT.java[tags=indexMetamodel]
----
<1> Retrieve a `SearchIndexedEntity`.
<2> Get the index manager for that entity.
`IndexManager` gives access to information pertaining to the index.
This includes the metamodel, but not only (see below).
<3> Get the descriptor for that index.
The descriptor exposes the index metamodel.
<4> Retrieve a field by name. The method returns an `Optional`, which is empty if the field does not exist.
<5> The field descriptor exposes information about the field structure: path, name, parent, ...
<6> Check that the field is a value field, holding a value (integer, text, ...),
as opposed to object fields, holding other fields.
<7> Narrow down the field descriptor to a value field descriptor.
<8> Get the descriptor for the field type.
The type descriptor exposes information about the field's capabilities:
is it searchable, sortable, projectable,
what is the expected java class for arguments to the <<search-dsl,Search DSL>>,
what are the analyzers/normalizer set on this field,
...
<9> Object fields can also be inspected.
====

[TIP]
====
The `Backend` and `IndexManager` can also be used to
<<backend-elasticsearch-access-client,retrieve the Elasticsearch REST client>>
or <<backend-lucene-access-analyzers,retrieve Lucene analyzers>>.
====

The `SearchMapping` also exposes methods to retrieve an `IndexManager` by name,
or even a whole `Backend` by name.
