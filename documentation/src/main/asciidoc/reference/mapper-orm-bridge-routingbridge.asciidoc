[[mapper-orm-bridge-routingbridge]]
= Routing bridges
// Legacy anchor from earlier 6.0 beta versions
[[mapper-orm-bridge-routingkeybridge]]

== Basics

A routing bridge is a pluggable component that defines, at runtime,
whether an entity should be indexed and <<concepts-sharding-routing,to which shard the corresponding indexed document should be routed>>.
It is applied to an indexed entity type with the `@Indexed` annotation,
using its `routingBinder` attribute (`@Indexed(routingBinder = ...)`).

Implementing a routing bridge requires two components:

. A custom implementation of `RoutingBinder`, to bind the bridge to an indexed entity type at bootstrap.
This involves declaring the properties of the indexed entity type that will be used by the routing bridge
and instantiating the routing bridge.
. A custom implementation of `RoutingBridge`, to route entities to the index at runtime.
This involves extracting data from an instance of the type, transforming the data if necessary,
and defining the current route (or marking the entity as "not indexed").
+
If routing can change during the lifetime of an entity instance,
you will also need to define the potential previous routes,
so that Hibernate Search can find and delete previous documents indexed for this entity instance.

In the sections below, you will find examples for the main use cases:

* <<mapper-orm-bridge-routingbridge-conditionalindexing>>
* <<mapper-orm-bridge-routingbridge-routingkey>>

[[mapper-orm-bridge-routingbridge-conditionalindexing]]
== Using a routing bridge for conditional indexing
// Search 5 anchors backward compatibility
[[example-search-mapping-indexinginterceptor-blog]]

Below is a first example of a custom routing bridge that
disables indexing for instances of the `Book` class if their status is `ARCHIVED`.

.Implementing and using a `RoutingBridge` for conditional indexing
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/routingbridge/conditionalindexing/BookStatusRoutingBinder.java[tags=binder]
----
<1> The binder must implement the `RoutingBinder` interface.
<2> Implement the `bind` method in the binder.
<3> Declare the dependencies of the bridge,
i.e. the parts of the entity instances that the bridge will actually use.
See <<mapper-orm-bridge-bridgedelement-dependencies>>
for more information about declaring dependencies.
<4> Call `context.bridge(...)` to define the routing bridge to use.
<5> Pass the expected type of indexed entities.
<6> Pass the routing bridge instance.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/routingbridge/conditionalindexing/BookStatusRoutingBinder.java[tags=bridge]
----
<1> The bridge must implement the `RoutingBridge` interface.
Here the bridge class is nested in the binder class,
because it is more convenient,
but you are obviously free to implement it in a separate java file.
<2> Implement the `route(...)` method in the bridge.
This method is called on indexing.
<3> Extract data from the bridged element and inspect it.
<4> If the `Book` status is `PUBLISHED`, then we want to proceed with indexing:
add a route so that Hibernate Search indexes the entity as usual.
<5> If the `Book` status is `ARCHIVED`, then we don't want to index it:
call `notIndexed()` so that Hibernate Search knows it should *not* index the entity.
<6> When a book gets archived, there might be a previously indexed document that needs to be deleted.
The `previousRoutes(...)` method allows you to tell Hibernate Search where this document can possibly be.
When necessary, Hibernate Search will follow each given route, look for documents corresponding to this entity,
and delete them.
<7> In this case, routing is very simple: there is only one possible previous route, so we only register that route.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/routingbridge/conditionalindexing/Book.java[tags=include;!getters-setters]
----
<1> Apply the bridge using the `@Indexed` annotation.
<2> Properties used in the bridge can still be mapped as index fields, but they don't have to be.
====

[[mapper-orm-bridge-routingbridge-routingkey]]
== Using a routing bridge to control routing to index shards

include::components/sharding-intro-note.asciidoc[]

Routing bridges can also be used to control <<concepts-sharding-routing,routing to index shards>>.

Below is a second example of a custom routing bridge that
uses the `genre` property of the `Book` class as a routing key.
See <<search-dsl-query-routing>> for an example of how to use routing in search queries,
with the same mapping as the example below.

.Implementing and using a `RoutingBridge` to control routing to index shards
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/routingbridge/routingkey/BookGenreRoutingBinder.java[tags=binder]
----
<1> The binder must implement the `RoutingBinder` interface.
<2> Implement the `bind` method in the binder.
<3> Declare the dependencies of the bridge,
i.e. the parts of the entity instances that the bridge will actually use.
See <<mapper-orm-bridge-bridgedelement-dependencies>>
for more information about declaring dependencies.
<4> Call `context.bridge(...)` to define the routing bridge to use.
<5> Pass the expected type of indexed entities.
<6> Pass the routing bridge instance.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/routingbridge/routingkey/BookGenreRoutingBinder.java[tags=bridge]
----
<1> The bridge must implement the `RoutingBridge` interface.
Here the bridge class is nested in the binder class,
because it is more convenient,
but you are obviously free to implement it in a separate java file.
<2> Implement the `route(...)` method in the bridge.
This method is called on indexing.
<3> Extract data from the bridged element and derive a routing key.
<4> Add a route with the generated routing key.
Hibernate Search will follow this route when adding/updating/deleting the entity in the index.
<5> When the genre of a book changes, the route will change,
and there it might be a previously indexed document in the index that needs to be deleted.
The `previousRoutes(...)` method allows you to tell Hibernate Search where this document can possibly be.
When necessary, Hibernate Search will follow each given route, look for documents corresponding to this entity,
and delete them.
<6> In this case, we simply don't know what the previous genre of the book was,
so we tell Hibernate Search to follow all possible routes,
one for every possible genre.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/routingbridge/routingkey/Book.java[tags=include;!getters-setters]
----
<1> Apply the bridge using the `@Indexed` annotation.
<2> Properties used in the bridge can still be mapped as index fields, but they don't have to be.
====

[NOTE]
.Optimizing `previousRoutes(...)`
====
In some cases you might have more information than in the example above about the previous routes,
and you can take advantage of that information to trigger fewer deletions in the index:

* If the routing key is derived from an immutable property,
then you can be sure the route never changes.
In that case, just call `route(...)` with the arguments passed to `previousRoutes(...)`
to tell Hibernate Search that the previous route is the same as the current route,
and Hibernate Search will skip the deletion.
* If the routing key is derived from a property that changes in a predictable way,
e.g. a status that *always* goes from `DRAFT` to `PUBLISHED` to `ARCHIVED` and never goes back,
then you can be sure the previous routes are those corresponding to the possible previous values.
In that case, just add one route for each possible previous status,
e.g. if the current status is `PUBLISHED` you only need to add a route for `DRAFT` and `PUBLISHED`,
but not for `ARCHIVED`.
====

[[mapper-orm-bridge-routingbridge-parameters]]
== Passing parameters
// Legacy anchor from earlier 6.0 beta versions
[[mapper-orm-bridge-routingkeybridge-parameters]]

Routing bridges are usually applied with the built-in `@Indexed` annotation and its `routingBinder` attribute,
which does not accept any parameter other than the routing binder.

In some cases, it is necessary to pass parameters directly to the routing binder.
This is achieved by defining a <<mapper-orm-custom-annotations,custom annotation>> with attributes.

Refer to <<mapper-orm-bridge-typebridge-parameters,this example for `TypeBinder`>>,
which is fairly similar to what you'll need for a `RoutingBinder`.

[[mapper-orm-bridge-routingbridge-ormsession]]
== Accessing the ORM session from the bridge

Contexts passed to the bridge methods can be used to retrieve the Hibernate ORM session.

.Retrieving the ORM session from a `RoutingBridge`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/routingbridge/ormcontext/MyEntityRoutingBinder.java[tags=include]
----
<1> Apply an extension to the context to access content specific to Hibernate ORM.
<2> Retrieve the `Session` from the extended context.
====

[[mapper-orm-bridge-routingbridge-injection]]
== Injecting beans into the binder

With <<configuration-bean-frameworks,compatible frameworks>>,
Hibernate Search supports injecting beans into:

* the `TypeMappingAnnotationProcessor` if you use custom annotations and instantiate the binder yourself.
* the `RoutingBinder` if you use `@Indexed(routingBinder = ...)` and let Hibernate Search
instantiate the binder using your dependency injection framework.

NOTE: This only applies to binders instantiated by Hibernate Search itself.
As a rule of thumb, if you need to call `new MyBinder()` at some point,
the binder won't get auto-magically injected.

The context passed to the routing binder's `bind` method
also exposes a `beanResolver()` method to access the bean resolver and instantiate beans explicitly.

See <<configuration-bean-injection>> for more details.

[[mapper-orm-bridge-routingbridge-programmatic]]
== Programmatic mapping
// Legacy anchor from earlier 6.0 beta versions
[[mapper-orm-bridge-routingkeybridge-programmatic]]

You can apply a routing key bridge through the <<mapper-orm-programmatic-mapping,programmatic mapping>> too.
Just pass an instance of the binder.

.Applying an `RoutingBinder` with `.binder(...)`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/routingbridge/conditionalindexing/RoutingBridgeConditionalIndexingIT.java[tags=programmatic]
----
====

[[mapper-orm-bridge-routingbridge-incubating]]
== Incubating features

include::components/incubating-warning.asciidoc[]

The context passed to the routing binder's `bind` method
exposes a `bridgedElement()` method that gives access to metadata about the type being bound.

The metadata can in particular be used to inspect the type in details:

* Getting accessors to properties.
* Detecting properties with markers.
Markers are applied by specific annotations carrying a `@MarkerBinding` meta-annotation.

See the javadoc for more information.
