[[coordination]]
= Coordination

[[coordination-basics]]
== Basics

include::components/coordination-comparison-note.asciidoc[]

An application using Hibernate Search usually relies on multiple threads,
or even multiple application instances,
which will update the database concurrently.

The coordination strategy defines how these threads/nodes will coordinate with each other
in order to update indexes according to these database updates,
in a way that ensures consistency,
prevents data loss,
and optimizes performance.

This strategy is set through configuration properties:

[source]
----
hibernate.search.coordination.strategy = database-polling
----

The default for this property is `none`.

See the following subsections for details about available strategies.

[[coordination-none]]
== No coordination

[[coordination-none-basics]]
=== Basics

The default strategy is the simplest and does not involve any additional infrastructure
for communication between application nodes.

All <<mapper-orm-indexing-automatic,automatic indexing>> operations
are executed directly in application threads,
which gives this strategy the unique ability to provide <<mapper-orm-indexing-automatic-synchronization,synchronous indexing>>,
at the cost of a few limitations:

* <<limitations-parallel-embedded-update>>
* <<limitations-backend-indexing-error>>

include::components/coordination-comparison-note.asciidoc[]

[[coordination-none-indexing]]
=== How indexing works without coordination

[[coordination-none-indexing-detected-changes]]
Changes have to occur in the ORM session in order to be detected::
See <<mapper-orm-indexing-automatic-concepts-changes-in-session>> for more details.
[[coordination-none-indexing-association-consistency]]
Associations must be updated on both sides::
See <<limitations-changes-asymmetric-association-updates>> for more details.
[[coordination-none-indexing-change-filter]]
Only relevant changes trigger indexing::
See <<mapper-orm-indexing-automatic-concepts-dirty-checking>> for more details.
[[coordination-none-indexing-on-flush]]
Entity data is extracted from entities upon session flushes::
[[mapper-orm-indexing-automatic-concepts-extraction-on-flush]] When a Hibernate ORM session is flushed,
Hibernate Search will extract data from the entities
to build documents to index,
and will put these documents in an internal buffer for
<<coordination-none-indexing-guarantee,indexing after the commit>>.
This extraction <<coordination-none-indexing-lazy-loading,may involve loading extra data from the database>>.
+
[NOTE]
====
The fact that this internal buffer is populated on session flush
means that you can safely `clear()` the session after a `flush()`:
entity changes performed up to the flush will be indexed correctly.

If you come from Hibernate Search 5 or earlier,
you may see this as a significant improvement:
there is no need to call `flushToIndexes()` and update indexes in the middle of a transaction anymore,
except for larger volumes of data (see <<mapper-orm-indexing-manual-indexingplan-process-execute>>).
====
+
However, if you perform a batch process inside a transaction,
and call `session.flush()`/`session.clear()` regularly to save memory,
be aware that Hibernate Search's internal buffer holding documents to index
will grow on each flush, and will not be cleared until the transaction is committed or rolled back.
If you encounter memory issues because of that,
see <<mapper-orm-indexing-manual-indexingplan-process-execute>> for a few solutions.
[[coordination-none-indexing-lazy-loading]]
Extraction of entity data may fetch extra data from the database::
[[mapper-orm-indexing-automatic-concepts-indexing-triggers-lazy-loading]] Even when you change only a single property of an indexed entity,
if that property is indexed,
Hibernate Search needs to rebuild the corresponding document *in full*.
+
Hibernate Search tries to only load what is necessary for indexing,
but depending on your mapping, this may lead to lazy associations being loaded just to reindex entities,
even if you didn't need them in your business code,
which may represent an overhead for your application threads
as well as your database.
+
This extra cost can be mitigated to some extent by:
+
* leveraging Hibernate ORM's batch fetching:
see link:{hibernateDocUrl}#configurations-database-fetch[the `batch_fetch_size` property]
and link:{hibernateDocUrl}#fetching-batch[the `@BatchSize` annotation].
* leveraging Hibernate ORM's link:{hibernateDocUrl}#caching[second-level cache],
especially for immutable entities referenced from indexed entities
(e.g. for reference data such as countries, cities, ...).
[[coordination-none-indexing-guarantee]]
Indexing is not guaranteed on commit, but only when the application thread returns::
[[mapper-orm-indexing-automatic-concepts-transaction-commit]] When entity changes happen inside a transaction,
indexes are not updated immediately, but only after the transaction is successfully committed.
That way, if a transaction is rolled back, the indexes will be left in a state consistent with the database,
discarding all the index changes that were planned during the transaction.
+
However, if an error occurs in the backend while indexing,
this behavior means that <<limitations-backend-indexing-error,index changes may be lost, leading to out-of-sync indexes>>.
If this is a problem for you, you should consider switching to <<coordination-database-polling,another coordination strategy>>.
+
[[mapper-orm-indexing-automatic-concepts-notransaction-flush]]
NOTE: When entity changes happen outside of any transaction (not recommended),
indexes are updated immediately upon session `flush()`.
Without that flush, indexes will not be updated automatically.
[[coordination-none-indexing-visibility]]
Index changes may not be visible immediately::
[[mapper-orm-indexing-automatic-concepts-nearrealtime]] By default, indexing will resume the application thread after index changes are committed to the indexes.
This means index changes are safely stored to disk,
but this does not mean a search query ran immediately after indexing will take the changes into account:
when using the Elasticsearch backend in particular, changes may take some time to be visible from search queries.
+
See <<mapper-orm-indexing-automatic-synchronization>> for details.

[[coordination-database-polling]]
== `database-polling`: additional event tables and polling in background processors

[[coordination-database-polling-basics]]
=== Basics

The `database-polling` strategy implements coordination through
<<coordination-database-polling-schema,additional tables>> in the application database.

<<mapper-orm-indexing-automatic,Automatic indexing>> is implemented
by pushing events to an outbox table within the same transaction as the entity changes,
and polling this outbox table from background processors which perform indexing.

This strategy is able to provide guarantees that entities will be indexed regardless
of temporary I/O errors in backend,
at the cost of being only able to perform this indexing asynchronously.

The `database-polling` strategy can be enabled with the following settings:

[source]
----
hibernate.search.coordination.strategy = database-polling
----

You will also need to add this dependency:

[source, XML, subs="+attributes"]
----
<dependency>
   <groupId>org.hibernate.search</groupId>
   <artifactId>hibernate-search-mapper-orm-coordination-database-polling</artifactId>
   <version>{hibernateSearchVersion}</version>
</dependency>
----

include::components/dynamic-sharding-not-implemented-warning.asciidoc[]

include::components/coordination-comparison-note.asciidoc[]

[[coordination-database-polling-indexing]]
=== How indexing works with database-polling coordination

[[coordination-database-polling-indexing-detected-changes]]
Changes have to occur in the ORM session in order to be detected::
See <<mapper-orm-indexing-automatic-concepts-changes-in-session>> for more details.
[[coordination-database-polling-indexing-association-consistency]]
Associations must be updated on both sides::
See <<limitations-changes-asymmetric-association-updates>> for more details.
[[coordination-database-polling-indexing-change-filter]]
Only relevant changes trigger indexing::
See <<mapper-orm-indexing-automatic-concepts-dirty-checking>> for more details.
[[coordination-database-polling-indexing-background]]
Indexing happens in a background thread::
When a Hibernate ORM session is flushed,
Hibernate Search will persist entity change events within the same Hibernate ORM session and the same transaction.
+
A <<coordination-database-polling-processors,background processor>> polls the database for new entity change events,
and asynchronously performs reindexing of the appropriate entities when it finds new events
(i.e. after the transaction is committed).
+
[NOTE]
====
The fact that events are persisted on session flush
means that you can safely `clear()` the session after a `flush()`:
entity changes events detected up to the flush will be persisted correctly.

If you come from Hibernate Search 5 or earlier,
you may see this as a significant improvement:
there is no need to call `flushToIndexes()` and update indexes in the middle of a transaction anymore.
====
[[coordination-database-polling-indexing-full-loading]]
The background processor will completely reload entities from the database::
The background processor responsible for reindexing entities
does not have access to the state of the link:{hibernateDocUrl}#best-practices-caching[first level cache]
when the entity change occurred, because it occurred in a different session.
+
This means each time an entity changes and has to be reindexed,
the background process will load that entity in full.
Depending on your mapping, it may also need to load lazy associations to other entities.
+
This extra cost can be mitigated to some extent by:
+
* leveraging Hibernate ORM's batch fetching;
see link:{hibernateDocUrl}#configurations-database-fetch[the `batch_fetch_size` property]
and link:{hibernateDocUrl}#fetching-batch[the `@BatchSize` annotation].
* leveraging Hibernate ORM's link:{hibernateDocUrl}#caching[second-level cache],
especially for immutable entities referenced from indexed entities
(e.g. for reference data such as countries, cities, ...).
[[coordination-database-polling-indexing-guarantee]]
Indexing is guaranteed on transaction commit::
When entity changes happen inside a transaction,
Hibernate Search will persist entity change events within the same transaction.
+
If the transaction is committed, these events will be committed as well;
if it rolls back, the events will be rolled back as well.
This guarantees the events will eventually be processed by a background thread
and that the indexes will be updated accordingly,
but only when (if) the transaction succeeds.
+
[[coordination-database-polling-indexing-guarantee-notransaction]]
NOTE: When entity changes happen outside of any transaction (not recommended),
events indexes are sent immediately after the session `flush()`.
Without that flush, indexes will not be updated automatically.
[[coordination-database-polling-indexing-visibility]]
Index changes will not be visible immediately::
By default, the application thread will resume after entity change events are committed to the database.
This means these changes are safely stored to disk,
but this does not mean a search query ran immediately when the thread resumes will take the changes into account:
<<coordination-database-polling-indexing-background,indexing will happen at a later time, asynchronously, in a background processor>>.
+
You can <<coordination-database-polling-processors,configure this background processor>> to run more often,
but it will remain asynchronous.

[[coordination-database-polling-schema]]
=== Impact on the database schema

The database-polling coordination strategy needs to store data in additional tables in the application database,
so that this data can be consumed by background threads.
This includes in particular an outbox events table, where one row is pushed every time an entity is changed
in a way that requires reindexing.

These tables are accessed through entities that are automatically added to the Hibernate ORM configuration,
and as such they should be automatically generated when relying on Hibernate ORM's
link:{hibernateDocUrl}#configurations-hbmddl[automatic schema generation].

If you need to integrate the creation/dropping of these tables to your own script,
the easiest solution is to have Hibernate ORM generate DDL scripts for your whole schema
and copy everything related to constructs (tables, sequences, ...) prefixed with `HSEARCH_`.
See link:{hibernateDocUrl}#configurations-hbmddl[automatic schema generation],
in particular the Hibernate ORM properties `javax.persistence.schema-generation.scripts.action`,
`javax.persistence.schema-generation.scripts.create-target`
and `javax.persistence.schema-generation.scripts.drop-target`.

[[coordination-database-polling-sharding]]
=== Sharding

[[coordination-database-polling-sharding-basics]]
==== Basics

In order to avoid unnecessarily indexing the same entity multiple times on different application nodes,
Hibernate Search partitions the entities in what it calls "shards":

* Each entity belongs to exactly one shard.
* Each application node involved in <<coordination-database-polling-processors,event processing>>
is uniquely assigned one or more shards, and will only process events related to entities in these shards.

How shards are assigned to application nodes can be customized, as explained in the following sections.

[[coordination-database-polling-sharding-dynamic]]
==== Dynamic sharding

include::components/dynamic-sharding-not-implemented-warning.asciidoc[]

[[coordination-database-polling-sharding-static]]
==== Static sharding

Sharding can be controlled explicitly by setting the following configuration properties:

[source]
----
hibernate.search.backend.coordination.shards.static = true
hibernate.search.backend.coordination.shards.total_count = 4
hibernate.search.backend.coordination.shards.assigned = 0
----

* `shards.static` defines sharding as static.
It defaults to `false` and must be set to `true` explicitly in order for
the other configuration properties to be taken into account.
* `shards.total_count` defines the total number of shards
as an <<configuration-property-types,integer value>>.
This property has no default and must be set explicitly when static sharding is enabled.
It must be set to the same value on all application nodes with assigned shards.
* `shards.assigned` defines the shards assigned to the application node
as an <<configuration-property-types,integer value>>, or multiple comma-separated integer values.
This property has no default and must be set explicitly when static sharding is enabled.
Shards are referred to by an index in the range `[0, total_count - 1]` (see above for `total_count`).
A given application node must be assigned at least one shard
but may be assigned multiple shards by setting `shards.assigned` to a comma-separated list,
e.g. `0,3`.

[CAUTION]
====
Each shard must be assigned to one and only one application node,
but this is **not** checked automatically by Hibernate Search.

Failure to do so may result in poor performance,
or event out-of-sync indexes.
====

[TIP]
====
Sharding settings are irrelevant, and thus ignored,
when <<coordination-database-polling-processors,processing is disabled>>.
====

.Example of static sharding settings
====
For example, the following configuration with 4 application nodes
would assign shard `0` to application node #0, shard `1` application node #1,
and no shard at all to application nodes #2 and #3:

[source]
----
# Node #0
hibernate.search.backend.coordination.strategy = database-polling
hibernate.search.backend.coordination.shards.static = true
hibernate.search.backend.coordination.shards.total_count = 2
hibernate.search.backend.coordination.shards.assigned = 0
----

[source]
----
# Node #1
hibernate.search.backend.coordination.strategy = database-polling
hibernate.search.backend.coordination.shards.static = true
hibernate.search.backend.coordination.shards.total_count = 2
hibernate.search.backend.coordination.shards.assigned = 1
----

[source]
----
# Node #2
hibernate.search.backend.coordination.strategy = database-polling
hibernate.search.backend.coordination.processors.indexing.enabled = false
----

[source]
----
# Node #3
hibernate.search.backend.coordination.strategy = database-polling
hibernate.search.backend.coordination.processors.indexing.enabled = false
----
====

[TIP]
====
Sharding settings, even static, may change over the lifetime of an application,
but must be consistent across all application nodes involved in processing at all times.

If you cannot stop your whole application cluster,
the only way to safely change sharding settings is to restart nodes one by one
to disable <<coordination-database-polling-processors,processing>>,
then (once every node has processing disabled),
restart nodes one by one with the new sharding settings and with processing re-enabled.
====

[[coordination-database-polling-processors]]
=== Processors

The database-polling coordination strategy involves background processors,
in particular one that polls the outbox events table for events
and then reindex the corresponding entities when new events are found.

These processors can be configured using the following configuration properties:

[source]
----
hibernate.search.backend.processors.indexing.enabled = true
hibernate.search.backend.processors.indexing.polling_interval = 100
hibernate.search.backend.processors.indexing.batch_size = 50
hibernate.search.coordination.processors.indexing.transaction_timeout = 10
----

* `processors.indexing.enabled` defines whether the background processor responsible for indexing entities is enabled,
as a <<configuration-property-types,boolean value>>.
The default for this property is `true`, but it can be set to `false` to disable background processing on some application nodes,
for example to dedicate some nodes to HTTP request processing and other nodes to background processing.
* `processors.indexing.polling_interval` defines how long to wait for another query to the outbox events table
after a query didn't return any event,
as an <<configuration-property-types,integer value>> in milliseconds.
The default for this property is `100`.
+
Lower values will reduce the time it takes for a change to be reflected in the index,
but will increase the stress on the database when there are no new events.
* `processors.indexing.batch_size` defines how many outbox events, at most, are processed in a single transaction
as an <<configuration-property-types,integer value>>.
The default for this property is `50`.
+
Higher values will reduce the number of transactions opened by the background process
and may increase performance thanks to the first-level cache (persistence context),
but will increase memory usage and in extreme cases may lead to `OutOfMemoryErrors`.
but will increase memory usage and in extreme cases may lead to `OutOfMemoryErrors`.
* `processors.indexing.transaction_timeout` defines the timeout for transactions processing outbox events
as an <<configuration-property-types,integer value>> in seconds.
Only effective when a JTA transaction manager is configured.
The default for this property is `null`, meaning that the default value will be use,
which value may depend on the transaction manager in use.
