[[mapper-orm-bridge-propertybridge]]
= [[section-field-bridge]] Property bridge

[[mapper-orm-bridge-propertybridge-basics]]
== Basics

A property bridge, like a <<mapper-orm-bridge-valuebridge,value bridge>>,
is a pluggable component that implements
the mapping of a property to one or more index fields.
It is applied to a property with the `@PropertyBinding` annotation
or with a <<mapper-orm-custom-annotations,custom annotation>>.

Compared to the value bridge, the property bridge is more complex to implement,
but covers a broader range of use cases:

* A property bridge can map a single property to more than one index field.
* A property bridge can work correctly when applied to a mutable type,
provided it is implemented correctly.

However, due to its rather flexible nature,
the property bridge does not transparently provide all the features
that come for free with a value bridge.
They can be supported, but have to be implemented manually.
This includes in particular container extractors,
which cannot be combined with a property bridge:
the property bridge must extract container values explicitly.

Implementing a property bridge requires two components:

. A custom implementation of `PropertyBinder`, to bind the bridge to a property at bootstrap.
This involves declaring the parts of the property that will be used,
declaring the index fields that will be populated along with their type,
and instantiating the property bridge.
. A custom implementation of `PropertyBridge`, to perform the conversion at runtime.
This involves extracting data from the property, transforming it if necessary,
and pushing it to index fields.

Below is an example of a custom property bridge that maps
a list of invoice line items
to several fields summarizing the invoice.

// Search 5 anchors backward compatibility
[[example-field-bridge]]
.Implementing and using a `PropertyBridge`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/simple/InvoiceLineItemsSummaryBinder.java[tags=binder]
----
<1> The binder must implement the `PropertyBinder` interface.
<2> Implement the `bind` method in the binder.
<3> Declare the dependencies of the bridge,
i.e. the parts of the property value that the bridge will actually use.
This is *absolutely necessary* in order for Hibernate Search to correctly trigger reindexing
when these parts are modified.
See <<mapper-orm-bridge-bridgedelement-dependencies>>
for more information about declaring dependencies.
<4> Declare the fields that are populated by this bridge.
In this case we're creating a `summary` object field,
which will have multiple sub-fields (see below).
See <<mapper-orm-bridge-index-field-dsl>>
for more information about declaring index fields.
<5> Declare the type of the sub-fields.
We're going to index monetary amounts,
so we will use a `BigDecimal` type with two digits after the decimal point.
See <<mapper-orm-bridge-index-field-type-dsl>>
for more information about declaring index field types.
<6> Call `context.bridge(...)` to define the property bridge to use,
and pass an instance of the bridge.
<7> Pass a reference to the `summary` object field to the bridge.
<8> Create a sub-field for the `total` amount of the invoice,
a sub-field for the sub-total for `books`,
and a sub-field for the sub-total for `shipping`.
Pass references to these fields to the bridge.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/simple/InvoiceLineItemsSummaryBinder.java[tags=bridge]
----
<1> The bridge must implement the `PropertyBridge` interface.
One generic type argument must be provided: the type of the property,
i.e. the type of the "bridged element".
Here the bridge class is nested in the binder class,
because it is more convenient,
but you are obviously free to implement it in a separate java file.
<2> The bridge stores references to the fields:
it will need them when indexing.
<3> Implement the `write` method in the bridge.
This method is called on indexing.
<4> Extract data from the bridged element,
and optionally transform it.
<5> Add an object to the `summary` object field.
Note the `summary` field was declared at the root,
so we call `addObject` directly on the `target` argument.
<6> Add a value to each of the `summary.total`, `summary.books`
and `summary.shipping` fields.
Note the fields were declared as sub-fields of `summary`,
so we call `addValue` on `summaryValue` instead of `target`.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/simple/Invoice.java[tags=include;!getters-setters]
----
<1> Apply the bridge using the `@PropertyBinding` annotation.

Here is an example of what an indexed document would look like, with the Elasticsearch backend:

[source, JSON]
----
{
  "summary": {
    "total": 38.96,
    "books": 30.97,
    "shipping": 7.99
  }
}
----
====

[[mapper-orm-bridge-propertybridge-parameters]]
== [[_parameterized_bridge]] Passing parameters

There are two ways to pass parameters to property bridges:

* One is (mostly) limited to string parameters, but is trivial to implement.
* The other can allow any type of parameters, but requires you to declare your own annotations.

[[mapper-orm-bridge-propertybridge-parameters-string]]
=== Simple, string parameters

You can pass string parameters to the `@PropertyBinderRef` annotation and then use them later in the binder:

// Search 5 anchors backward compatibility
[[example-passing-bridge-parameters]]
.Passing parameters to a `PropertyBinder` using the `@PropertyBinderRef` annotation
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/param/context/InvoiceLineItemsSummaryBinder.java[tags=include]
----
<1> Use the binding context to get the parameter value.
Getting the param using the `param` method assumes that the param has been defined.
Alternatively it is possible to use `paramOptional` to get the `java.util.Optional` of the param.
<2> In the `bind` method, use the value of parameters.
Here use the `fieldName` parameter to set the field name,
but we could pass parameters for any purpose:
defining the field as sortable,
defining a normalizer,
...

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/param/context/Invoice.java[tags=include;!getters-setters]
----
<1> Define the binder to use on the property,
setting the `fieldName` parameter.
====

[[mapper-orm-bridge-propertybridge-parameters-custom-annotation]]
=== Parameters with custom annotations

You can pass parameters of any type to the bridge by defining
a <<mapper-orm-custom-annotations,custom annotation>> with attributes:

.Passing parameters to a `PropertyBinder` using a custom annotation
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/param/InvoiceLineItemsSummaryBinding.java[tags=include]
----
<1> Define an annotation with retention `RUNTIME`.
*Any other retention policy will cause the annotation to be ignored by Hibernate Search*.
<2> Since we're defining a property bridge, allow the annotation
to target either methods (getters) or fields.
<3> Mark this annotation as a property mapping,
and instruct Hibernate Search to apply the given processor whenever it finds this annotation.
It is also possible to reference the processor by its name, in the case of a CDI/Spring bean.
<4> Optionally, mark the annotation as documented,
so that it is included in the javadoc of your entities.
<5> Define an attribute of type `String` to specify the field name.
<6> The processor must implement the `PropertyMappingAnnotationProcessor` interface,
setting its generic type argument to the type of the corresponding annotation.
Here the processor class is nested in the annotation class,
because it is more convenient,
but you are obviously free to implement it in a separate Java file.
<7> In the annotation processor, instantiate the binder.
<8> Process the annotation attributes and pass the data to the binder.
Here we're using a setter, but passing the data through the constructor would work, too.
<9> Apply the binder to the property.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/param/InvoiceLineItemsSummaryBinder.java[tags=include]
----
<1> Implement setters in the binder.
Alternatively, we could expose a parameterized constructor.
<2> In the `bind` method, use the value of parameters.
Here use the `fieldName` parameter to set the field name,
but we could pass parameters for any purpose:
defining the field as sortable,
defining a normalizer,
...

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/param/Invoice.java[tags=include;!getters-setters]
----
<1> Apply the bridge using its custom annotation,
setting the `fieldName` parameter.
====

[[mapper-orm-bridge-propertybridge-parameters-access-orm]]
== Accessing the ORM session from the bridge

Contexts passed to the bridge methods can be used to retrieve the Hibernate ORM session.

.Retrieving the ORM session from a `PropertyBridge`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/ormcontext/MyDataPropertyBinder.java[tags=include]
----
<1> Apply an extension to the context to access content specific to Hibernate ORM.
<2> Retrieve the `Session` from the extended context.
====

[[mapper-orm-bridge-propertybridge-parameters-injecting-beans]]
== Injecting beans into the binder

With <<configuration-bean-frameworks,compatible frameworks>>,
Hibernate Search supports injecting beans into:

* the `PropertyMappingAnnotationProcessor` if you use custom annotations and instantiate the binder yourself.
* the `PropertyBinder` if you use the `@PropertyBinding` annotation and let Hibernate Search
instantiate the binder using your dependency injection framework.

NOTE: This only applies to binders instantiated by Hibernate Search itself.
As a rule of thumb, if you need to call `new MyBinder()` at some point,
the binder won't get auto-magically injected.

The context passed to the property binder's `bind` method
also exposes a `beanResolver()` method to access the bean resolver and instantiate beans explicitly.

See <<configuration-bean-injection>> for more details.

[[mapper-orm-bridge-propertybridge-programmatic]]
== Programmatic mapping

You can apply a property bridge through the <<mapper-orm-programmatic-mapping,programmatic mapping>> too.
Just pass an instance of the binder. You can pass arguments either through the binder's constructor, or through setters.

.Applying an `PropertyBinder` with `.binder(...)`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/param/PropertyBridgeParamIT.java[tags=programmatic]
----
====

[[mapper-orm-bridge-propertybridge-parameters-incubating]]
== Incubating features

include::components/incubating-warning.asciidoc[]

The context passed to the property binder's `bind` method
exposes a `bridgedElement()` method that gives access to metadata about the property being bound.

The metadata can be used to inspect the property in details:

* Getting the name of the property.
* Checking the type of the property.
* Getting accessors to properties.
* Detecting properties with markers.
Markers are applied by specific annotations carrying a `@MarkerBinding` meta-annotation.

See the javadoc for more information.

Below is an example of the simplest use of this metadata,
getting the property name and using it as a field name.

.Naming a field after the property being bound in a `PropertyBinder`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/bridgedelement/InvoiceLineItemsSummaryBinder.java[tags=include]
----
<1> Use the binding context to get the bridged element.
<2> Use the name of the property as the name of a newly declared index field.

[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/propertybridge/bridgedelement/Invoice.java[tags=include;!getters-setters]
----
<1> Apply the bridge using the `@PropertyBinding` annotation.

Here is an example of what an indexed document would look like, with the Elasticsearch backend:

[source, JSON]
----
{
  "lineItems": {
    "total": 38.96,
    "books": 30.97,
    "shipping": 7.99
  }
}
----
====
