[[mapper-orm-mapping-changes]]
= Changing the mapping of an existing application

Over the lifetime of an application,
it will happen that the mapping of a particular indexed entity type has to change.
When this happens, the mapping changes are likely to require changes to the structure of the index,
i.e. its _schema_.
Hibernate Search does *not* handle this structure change automatically,
so manual intervention is required.

The simplest solution when the index structure needs to change is to simply:

1. Drop and re-create the index and its schema,
either manually by deleting the filesystem directory for Lucene
or using the REST API to delete the index for Elasticsearch,
or using Hibernate Search's <<mapper-orm-schema-management,schema management features>>.
2. Re-populate the index, for example using the <<mapper-orm-indexing-massindexer,mass indexer>>.

[TIP]
====
Technically, dropping the index and reindexing is not _strictly_ required if the mapping changes include _only_:

* *adding* new indexed entities that will not have any persisted instance,
e.g. adding an `@Indexed` annotation on an entity which has no rows in database.
* *adding* new fields that will be empty for all currently persisted entities,
e.g. adding a new property on an entity type and mapping it to a field,
but with the guarantee that this property will initially be null for every instance of this entity;
* and/or *removing* data from existing indexes/fields,
e.g. removing an index field, or removing the need for a field to be stored.

However, you will still need to:

* create missing indexes: this can generally be done automatically
by starting up the application with the <<mapper-orm-schema-management-strategy-create,`create`>>,
<<mapper-orm-schema-management-strategy-create-or-validate,`create-or-validate`>>,
or <<mapper-orm-schema-management-strategy-create-or-update,`create-or-update`>>
schema management strategy.
* (Elasticsearch only:) update the schema of existing indexes to declare the new fields.
This will be more complex: either do it manually using Elasticsearch's REST API,
or start up the application with the <<mapper-orm-schema-management-strategy-create-or-update,`create-or-update` strategy>>,
but be warned that it <<mapper-orm-schema-management-concepts-update-failure,may fail>>.
====
