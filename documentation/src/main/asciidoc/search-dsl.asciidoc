[[search-dsl]]
= Searching
// Search 5 anchors backward compatibility
[[search-query-querydsl]]

include::todo-placeholder.asciidoc[]

[[search-dsl-query]]
== Query DSL
// Search 5 anchors backward compatibility
[[search-query]]

[[search-dsl-query-generality]]
=== Generality
// Search 5 anchors backward compatibility
[[_building_a_hibernate_search_query]]

include::todo-placeholder.asciidoc[]

////
TODO explain the general concepts around querying the index.
It's not as obvious as it seems, in particular in the Hibernate Search / ORM integration:
we're querying the index, but getting the results from the database...
See the Search 5 docs, it's probably explained in detail there.
Also briefly explain the main features (predicate, sort, projection, ...)
and point to the various other sections (predicate DSL, sort DSL, projection DSL, ...) where relevant.
////

[[search-dsl-query-fetching-results]]
=== Fetching results
// Search 5 anchors backward compatibility
[[_retrieving_the_results]]

include::todo-placeholder.asciidoc[]

// TODO [[_pagination]] https://docs.jboss.org/hibernate/search/5.11/reference/en-US/html_single/#_pagination
// TODO [[_performance_considerations]] https://docs.jboss.org/hibernate/search/5.11/reference/en-US/html_single/#_performance_considerations
// TODO [[_result_size]] https://docs.jboss.org/hibernate/search/5.11/reference/en-US/html_single/#_result_size

[[search-dsl-query-timeout]]
=== Timeout
// Search 5 anchors backward compatibility
[[_limiting_the_time_of_a_query]]

include::todo-placeholder.asciidoc[]

// TODO [[]]:
// TODO [[_raise_an_exception_on_time_limit]] https://docs.jboss.org/hibernate/search/5.11/reference/en-US/html_single/#_raise_an_exception_on_time_limit
// TODO [[_limit_the_number_of_results_when_the_time_limit_is_reached]] https://docs.jboss.org/hibernate/search/5.11/reference/en-US/html_single/#_limit_the_number_of_results_when_the_time_limit_is_reached

[[search-dsl-query-entity-loading-options]]
=== Entity loading options
// Search 5 anchors backward compatibility
[[_fetching_strategy]]
//[[_customizing_object_initialization_strategies]] // There can only be one anchor per paragraph, unfortunately...

include::todo-placeholder.asciidoc[]

// TODO https://docs.jboss.org/hibernate/search/5.11/reference/en-US/html_single/#_fetching_strategy
// TODO https://docs.jboss.org/hibernate/search/5.11/reference/en-US/html_single/#_customizing_object_initialization_strategies

[[search-dsl-query-turning-into-jpa-query]]
=== Turning the `SearchQuery` into a JPA or Hibernate ORM query

include::todo-placeholder.asciidoc[]

// TODO turning a SearchQuery into a JPA/ORM query

// TODO [[_resulttransformer]] https://docs.jboss.org/hibernate/search/5.11/reference/en-US/html_single/#_resulttransformer

[[search-dsl-query-debugging]]
=== Debugging a query
// Search 5 anchors backward compatibility
[[_understanding_results]]

include::todo-placeholder.asciidoc[]

// TODO https://docs.jboss.org/hibernate/search/5.11/reference/en-US/html_single/#_understanding_results
// TODO toString(), getQueryString(), and logging, too?

[[search-dsl-predicate]]
== Predicate DSL
// Search 5 anchors backward compatibility
[[query-predicate]]

include::todo-placeholder.asciidoc[]

// TODO add more than just examples in the sub-sections

[[search-dsl-predicate-concepts]]
=== Generality

The main component of a search query is the _predicate_,
i.e. the condition that every document must satisfy in order to be included in search results.

The predicate is configured when building the search query:

.Defining the predicate of a search query
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/directfieldmapping/HibernateOrmSimpleMappingIT.java[tags=predicate-simple-lambdas]
----
<1> Start building the query.
<2> Mention that the results of the query are expected to have a `title` field matching the value `robot`.
If the field does not exist or cannot be searched on, an exception will be thrown.
<3> The results match the given predicate.
====

Or alternatively, if you don't want to use lambdas:

.Defining the predicate of a search query - object-based syntax
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/directfieldmapping/HibernateOrmSimpleMappingIT.java[tags=predicate-simple-objects]
----
====

The predicate DSL offers more predicate types, and multiple options for each type of predicate.
To learn more about the `match` predicate, and all the other types of predicate,
refer to the following sections.

[[search-dsl-predicate-common]]
=== Options common to multiple predicate types
// Search 5 anchors backward compatibility
[[_query_options]]

include::todo-placeholder.asciidoc[]

// TODO boostedTo, withConstantScore, ...

[[search-dsl-predicate-match-all]]
=== `matchAll`: match all documents

.Matching all documents
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=matchAll]
----
====

.Matching all documents except those matching a given predicate
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=matchAll-except]
----
====

[[search-dsl-predicate-id]]
=== `id`: match a document identifier

.Matching a document with a given identifier
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=id]
----
====

.Matching all documents with an identifier among a given collection
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=id-matchingAny]
----
====

[[search-dsl-predicate-match]]
=== `match`: match a value
// Search 5 anchors backward compatibility
[[_keyword_queries]]

.Matching a value
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=match]
----
====

.Matching multiple terms
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=match-multipleTerms]
----
<1> For full-text fields, the value passed to `matching` may be a string containing multiple terms.
The string will be analyzed and each term identified.
<2> All returned hits will match *at least one* term of the given string.
Hits matching multiple terms will have a higher score.
====

// TODO HSEARCH-917 add an option to match all terms instead of any term, then document it here

.Matching a value in any of multiple fields
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=match-orField]
----
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=match-fields]
----
====

.Matching a text value approximately
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=match-fuzzy]
----
====

// TODO fuzzy parameters: edit distance, prefix length, ...

.Matching a value, analyzing it with a different analyzer
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=match-analyzer]
----
====

.Matching a value without analyzing it
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=match-skipAnalysis]
----
====

// TODO per-field boosts?

[[search-dsl-predicate-range]]
=== `range`: match a range of values
// Search 5 anchors backward compatibility
[[_range_queries]]

.Matching a range of values
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=range-between]
----
====

.Matching values above a given value
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=range-above]
----
====

.Matching values below a given value
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=range-below]
----
====

.Matching a range of values, excluding the limit(s)
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=range-excludeLimit]
----
====

// TODO multiple fields?

// TODO per-field boosts?

[[search-dsl-predicate-phrase]]
=== `phrase`: match a sequence of words
// Search 5 anchors backward compatibility
[[_phrase_queries]]

.Matching a sequence of words
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=phrase]
----
====

.Matching a sequence of words approximately
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=phrase-withSlop]
----
====

// TODO analyzer?

// TODO skipAnalysis?

// TODO multiple fields?

// TODO per-field boosts?

[[search-dsl-predicate-exists]]
=== `exists`: match fields with non-null values

[NOTE]
====
This predicate currently only works with non-object fields.

See https://hibernate.atlassian.net/browse/HSEARCH-2389[HSEARCH-2389].
====

.Matching fields with non-null values
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=exists]
----
====

[TIP]
====
There isn't any built-in predicate to match fields with exclusively null values,
but you can easily create one yourself
using an `exists` predicate in a `mustNot` clause in a <<search-dsl-predicate-boolean,boolean predicate>>.
====

[[search-dsl-predicate-wildcard]]
=== `wildcard`: match a simple pattern
// Search 5 anchors backward compatibility
[[_wildcard_queries]]

.Matching a simple pattern
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=wildcard]
----
====

// TODO HSEARCH-3612 When the ticket is fixed, rephrase this warning to state that only ES 6.7 and below is affected by the normalization problem.

[IMPORTANT]
====
Patterns used in wildcard predicates are not analyzed or normalized,
and they are expected to match a *single* indexed token, not a sequence of tokens.

For example, a pattern such as `Cat*` will not match anything
when targeting a field that applies a lowercase filter when indexing.
`cat*` may match, since it's already lowercased.

Similarly, a pattern such as `john gr*` will not match anything
when targeting a field that tokenizes on spaces.
`gr*` may match, since it doesn't include any space.

These limitations generally make the wildcard predicate unadvisable for high-level,
user-exposed features,
though it can still be useful in very specific cases.

When the goal is to match user-provided query strings,
the <<search-dsl-predicate-simple-query-string,simple query string predicate>> should be preferred.
At the very least it fixes the second issue by automatically splitting the query string around spaces,
even though it may also suffer from the case-sensitivity issue in some cases
(see https://hibernate.atlassian.net/browse/HSEARCH-3612[HSEARCH-3612]).
====

[[search-dsl-predicate-boolean]]
=== `bool`: combine predicates (or/and/...)
// Search 5 anchors backward compatibility
[[_combining_queries]]

.Matching a document that matches any of multiple given predicates (~`OR` operator)
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=bool-or]
----
<1> The hits *should* have a `title` field matching the text `robot`,
*or* they should match any other clause in the same boolean predicate.
<2> The hits *should* have a `description` field matching the text `investigation`,
*or* they should match any other clause in the same boolean predicate.
<3> All returned hits will match *at least one* of the clauses above:
they will have a `title` field matching the text `robot`
*or* they will have a `description` field matching the text `investigation`.
====

.Matching a document that matches all of multiple given predicates (~`AND` operator)
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=bool-and]
----
<1> The hits *must* have a `title` field matching the text `robot`,
independently from other clauses in the same boolean predicate.
<2> The hits *must* have a `description` field matching the text `crime`,
independently from other clauses in the same boolean predicate.
<3> All returned hits will match *all* of the clauses above:
they will have a `title` field matching the text `robot`
*and* they will have a `description` field matching the text `crime`.
====

.Matching a document that does *not* match a given predicate
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=bool-mustNot]
----
<1> The hits *must* have a `title` field matching the text `robot`,
independently from other clauses in the same boolean predicate.
<2> The hits *must not* have a `description` field matching the text `investigation`,
independently from other clauses in the same boolean predicate.
<3> All returned hits will match *all* of the clauses above:
they will have a `title` field matching the text `robot`
*and* they will not have a `description` field matching the text `investigation`.

[NOTE]
======
While it is possible to execute a boolean predicate with only "negative" clauses (`mustNot`),
performance may be disappointing because the full power of indexes cannot be leveraged in that case.
======
====

.Matching a document that matches a given predicate without affecting the score
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=bool-filter]
----
<1> Create a top-level boolean predicate, with two `should` clauses.
<2> In the first `should` clause, create a nested boolean predicate.
<3> Use a `filter` clause to require documents to have the `science-fiction` genre,
without taking this predicate into account when scoring.
<4> Use a `must` clause to require documents with the `science-fiction` genre
to have a `title` field matching `crime`,
and take this predicate into account when scoring.
<5> In the second `should` clause, create a nested boolean predicate.
<6> Use a `filter` clause to require documents to have the `crime fiction` genre,
without taking this predicate into account when scoring.
<7> Use a `must` clause to require documents with the `crime fiction` genre
to have a `description` field matching `robot`,
and take this predicate into account when scoring.
<8> The score of hits will ignore the `filter` clauses,
leading to fairer sorts if there are much more "crime fiction" documents than "science-fiction" documents.
====

.Using optional `should` clauses to boost the score of some documents
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=bool-mustAndShould]
----
<1> The hits *must* have a `title` field matching the text `robot`,
independently from other clauses in the same boolean predicate.
<2> The hits *should* have a `description` field matching the text `crime`,
but they may not, because matching the `must` clause above is enough.
However, matching this `should` clause will improve the score of the document.
<3> The hits *should* have a `description` field matching the text `investigation`,
but they may not, because matching the `must` clause above is enough.
However, matching this `should` clause will improve the score of the document.
<4> All returned hits will match the `must` clause, and optionally the `should` clauses:
they will have a `title` field matching the text `robot`,
and the ones whose description matches either `crime` or `investigation` will have a better score.
====

.Fine-tuning `should` clauses matching requirements with `minimumShouldMatch`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=bool-minimumShouldMatchNumber]
----
<1> At least two "should" clauses must match for this boolean predicate to match.
<2> The hits *should* have a `description` field matching the text `robot`.
<3> The hits *should* have a `description` field matching the text `investigate`.
<4> The hits *should* have a `description` field matching the text `crime`.
<5> All returned hits will match at least two of the `should` clauses:
their description will match either `robot` and `investigate`,
`robot` and `crime`, `investigate` and `crime`, or all three of these terms.
====

.Easily adding clauses dynamically with the lambda syntax
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=bool-dynamicParameters]
----
<1> Get a custom object holding the search parameters provided by the user through a web form, for example.
<2> Call `.bool(Consumer)`.
The consumer, implemented by a lambda expression, will receive a builder as an argument
and will add clauses to that builder as necessary.
<3> By default, a boolean predicate will match nothing if there is no clause.
To match every document when there is no clause, add a `must` clause that matches everything.
<4> Inside the lambda, the code is free to check conditions before adding clauses.
In this case, we only add clauses if the relevant parameter was filled in by the user.
<5> The hits will match the clauses added by the lambda expression.
====

[[search-dsl-predicate-simple-query-string]]
=== `simpleQueryString`: match a user-provided query
// Search 5 anchors backward compatibility
[[_simple_query_string_queries]]

.Matching a simple query string: AND/OR operators
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=simpleQueryString-boolean]
----
====

.Matching a simple query string: NOT operator
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=simpleQueryString-not]
----
====

.Matching a simple query string: AND as default operator
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=simpleQueryString-withAndAsDefaultOperator]
----
====

.Matching a simple query string: prefix
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=simpleQueryString-prefix]
----
====

.Matching a simple query string: fuzzy
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=simpleQueryString-fuzzy]
----
====

.Matching a simple query string: phrase
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=simpleQueryString-phrase]
----
====

.Matching a simple query string: phrase with slop
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=simpleQueryString-phrase-withSlop]
----
====

// TODO multiple fields?

// TODO per-field boosts?

[[search-dsl-predicate-nested]]
=== `nested`: match nested documents

.Matching a simple pattern
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=nested]
----
<1> Create a nested predicate on the `authors` object field.
<2> The author must have a first name matching `isaac`.
<3> The author must have a last name matching `asimov`.
<4> All returned hits will be books for which at least one author
has a first name matching `isaac` and a last name matching `asimov`.
Books that happen to have multiple authors,
one of which has a first name matching `isaac`
and *another* of which has a last name matching `asimov`,
will *not* match.
====

[[search-dsl-predicate-spatial-within]]
=== `within`: match points within a circle, box, polygon
// Search 5 anchors backward compatibility
[[spatial-queries]]

.Matching points within a circle
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=within-circle]
----
====

// TODO alternative syntaxes?

.Matching points within a box
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=within-box]
----
====

// TODO alternative syntaxes?

.Matching points within a polygon
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=within-polygon]
----
====

// TODO alternative syntaxes?

[[search-dsl-predicate-more-like-this]]
=== More like this
[[search-query-querydsl-mlt]]

include::todo-placeholder.asciidoc[]

[[search-dsl-predicate-extensions]]
=== Backend-specific extensions

include::todo-placeholder.asciidoc[]

// TODO introduction to extensions or links to that introduction

[[search-dsl-predicate-extensions-lucene-from-lucene-query]]
==== Lucene: `fromLuceneQuery`

.Matching a native `org.apache.lucene.search.Query`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=lucene-fromLuceneQuery]
----
====

[[search-dsl-predicate-extensions-elasticsearch-from-json]]
==== Elasticsearch: `fromJson`

.Matching a native Elasticsearch JSON query
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/predicate/PredicateDslIT.java[tags=elasticsearch-fromJson]
----
====

[[search-dsl-sort]]
== Sort DSL
// Search 5 anchors backward compatibility
[[query-sorting]]

include::todo-placeholder.asciidoc[]

// TODO add more than just examples in the sub-sections

[[search-dsl-sort-concepts]]
=== Generality

By default, query results are sorted by relevance.
Other sorts, including the sort by field value, can be configured when building the search query:

.Using custom sorts
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/directfieldmapping/HibernateOrmSimpleMappingIT.java[tags=sort-simple-lambdas]
----
<1> Start building the query as usual.
<2> Mention that the results of the query are expected to be sorted on field "pageCount" in descending order,
then (for those with the same page count) on field "title_sort" in ascending order.
If the field does not exist or cannot be sorted on, an exception will be thrown.
<3> The results are sorted according to instructions.
====

Or alternatively, if you don't want to use lambdas:

.Using custom sorts - object-based syntax
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/directfieldmapping/HibernateOrmSimpleMappingIT.java[tags=sort-simple-objects]
----
====

[NOTE]
====
There are a few constraints regarding sorts by field.
In particular, in order for a field to be "sortable", it must be <<mapper-orm-directfieldmapping-sortable,marked as such in the mapping>>,
so that the correct data structures are available in the index.
====

The sort DSL offers more sort types, and multiple options for each type of sort.
To learn more about the field sort, and all the other types of sort,
refer to the following sections.

[[search-dsl-sort-common]]
=== Options common to multiple sort types

include::todo-placeholder.asciidoc[]

// TODO asc(), desc(), order(SortOrder), ...

[[search-dsl-sort-score]]
=== `byScore`: sort by matching score (relevance)

.Sorting by relevance
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/sort/SortDslIT.java[tags=byScore]
----
====

[[search-dsl-sort-index-order]]
=== `byIndexOrder`: sort according to the order of documents on storage

.Sorting according to the order of documents on storage
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/sort/SortDslIT.java[tags=byIndexOrder]
----
====

[[search-dsl-sort-field]]
=== `byField`: sort by field values

.Sorting by field values
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/sort/SortDslIT.java[tags=byField]
----
====

// Search 5 anchors backward compatibility
[[_handling_missing_values]]

.Sorting by field values, with missing values in first position
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/sort/SortDslIT.java[tags=byField_onMissingValue_sortFirst]
----
====

.Sorting by field values, with missing values in last position
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/sort/SortDslIT.java[tags=byField_onMissingValue_sortLast]
----
====

.Sorting by field values, with missing values replaced by a given value
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/sort/SortDslIT.java[tags=byField_onMissingValue_use]
----
====

[[search-dsl-sort-distance]]
=== `byDistance`: sort by distance to a point

.Sorting by distance to a point
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/sort/SortDslIT.java[tags=byDistance]
----
====

// TODO alternative syntaxes?

[[search-dsl-sort-composite]]
=== `byComposite`: combine sorts

.Sorting by multiple composed sorts using `byComposite()`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/sort/SortDslIT.java[tags=byComposite]
----
====

.Sorting by multiple composed sorts using `then()`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/sort/SortDslIT.java[tags=then]
----
====

.Easily composing sorts dynamically with the lambda syntax
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/sort/SortDslIT.java[tags=byComposite_dynamicParameters]
----
<1> Get a custom object holding the search parameters provided by the user through a web form, for example.
<2> Call `.byComposite(Consumer)`.
The consumer, implemented by a lambda expression, will receive a builder as an argument
and will add sorts to that builder as necessary.
<3> Inside the lambda, the code is free to do whatever is necessary before adding sorts.
In this case, we iterate over user-selected sorts and add sorts accordingly.
<4> The hits will be sorted according to sorts added by the lambda expression.
====

[[search-dsl-sort-extensions]]
=== Backend-specific extensions

include::todo-placeholder.asciidoc[]

// TODO introduction to extensions or links to that introduction

[[search-dsl-sort-extensions-lucene-from-lucene-sort]]
==== Lucene: `fromLuceneSort`

.Matching a native `org.apache.lucene.search.Sort`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/sort/SortDslIT.java[tags=lucene-fromLuceneSort]
----
====

[[search-dsl-sort-extensions-lucene-from-lucene-sort-field]]
==== Lucene: `fromLuceneSortField`
// Search 5 anchors backward compatibility
[[_using_native_sorts_within_the_sort_dsl]]

.Matching a native `org.apache.lucene.search.SortField`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/sort/SortDslIT.java[tags=lucene-fromLuceneSortField]
----
====

[[search-dsl-sort-extensions-elasticsearch-from-json]]
==== Elasticsearch: `fromJson`

.Matching a native Elasticsearch JSON sort
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/sort/SortDslIT.java[tags=elasticsearch-fromJson]
----
====

[[search-dsl-projection]]
== Projection DSL
// Search 5 anchors backward compatibility
[[projections]]

include::todo-placeholder.asciidoc[]

// TODO add more than just examples in the sub-sections

[[search-dsl-projection-concepts]]
=== Generality

For some use cases, you only need the query to return a small subset of the data contained in your domain object.
In these cases, returning managed entities and extracting data from these entities may be overkill:
extracting the data from the index itself would avoid the database round-trip.

Projections do just that: they allow the query to return something more precise than just "the matching entities".
Projections can be configured when building the search query:

.Using projections to extract data from the index
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/directfieldmapping/HibernateOrmSimpleMappingIT.java[tags=projection-simple-lambdas]
----
<1> Start building the query as usual.
<2> Mention that the expected result of the query is a projection on field "title", of type String.
If that type is not appropriate or if the field does not exist, an exception will be thrown.
<3> The query is type-safe and will return results of the expected type.
====

Or alternatively, if you don't want to use lambdas:

.Using projections to extract data from the index - object-based syntax
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/directfieldmapping/HibernateOrmSimpleMappingIT.java[tags=projection-simple-objects]
----
====

[NOTE]
====
There are a few constraints regarding field projections.
In particular, in order for a field to be "projectable", it must be <<mapper-orm-directfieldmapping-projectable,marked as such in the mapping>>,
so that it is correctly stored in the index.
====

While field projections are certainly the most common,
they are not the only type of projection.
Other projections allow to
<<search-dsl-projection-composite,compose custom beans containing extracted data>>,
get references to the <<search-dsl-projection-documentReference,extracted documents>>
or the <<search-dsl-projection-reference,corresponding entities>>,
or get information related to the search query itself
(<<search-dsl-projection-score,score>>, ...).

To learn more about the field projection, and all the other types of projection,
refer to the following sections.

[[search-dsl-projection-common]]
=== Options common to multiple projection types

include::todo-placeholder.asciidoc[]

// TODO common options, if there are any?

[[search-dsl-projection-documentReference]]
=== `documentReference`: return references to matched documents

.Returning references to matched documents
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/projection/ProjectionDslIT.java[tags=documentReference]
----
====

[[search-dsl-projection-reference]]
=== `reference`: return references to matched entities

.Returning references to matched entities
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/projection/ProjectionDslIT.java[tags=reference]
----
====

[[search-dsl-projection-entity]]
=== `entity`: return matched entities loaded from the database

.Returning matched entities loaded from the database
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/projection/ProjectionDslIT.java[tags=entity]
----
====

[[search-dsl-projection-field]]
=== `field`: return field values from matched documents

.Returning field values from matched documents
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/projection/ProjectionDslIT.java[tags=field]
----
====

.Returning field values from matched documents, without specifying the field type
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/projection/ProjectionDslIT.java[tags=field-noType]
----
====

.Returning field values from matched documents, without converting the field value
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/projection/ProjectionDslIT.java[tags=field-noProjectionConverter]
----
====

[[search-dsl-projection-score]]
=== `score`: return the score of matched documents

.Returning the score of matched documents
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/projection/ProjectionDslIT.java[tags=score]
----
====

[[search-dsl-projection-distance]]
=== `distance`: return the distance to a point

.Returning the distance to a point
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/projection/ProjectionDslIT.java[tags=distance]
----
====

.Returning the distance to a point with a given distance unit
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/projection/ProjectionDslIT.java[tags=distance-unit]
----
====

[[search-dsl-projection-composite]]
=== `composite`: combine projections

.Returning custom objects created from multiple projected values
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/projection/ProjectionDslIT.java[tags=composite-customObject]
----
<1> Call `.composite(...)`.
<2> Use the constructor of a custom object, `MyPair`, as the combining function.
The combining function can be a `Function`, a `BiFunction`,
or a `org.hibernate.search.util.common.function.TriFunction`.
It will combine values returned by other projections and create an object returned by the composite projection.
Depending on the type of function,
either one, two, or three additional arguments are expected.
<3> Define the first projection to combine as a projection on the `title` field,
meaning the constructor of `MyPair` will be called for each matched document
with the value of the `title` field as its first argument.
<4> Define the second projection to combine as a projection on the `genre` field,
meaning the constructor of `MyPair` will be called for each matched document
with the value of the `genre` field as its second argument.
<5> The hits will be the result of calling the combining function for each matched document,
in this case `MyPair` instances.
====

.Returning a `List` of projected values
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/projection/ProjectionDslIT.java[tags=composite-list]
----
<1> Call `.composite(...)`.
<2> Define the first projection to combine as a projection on the `title` field,
meaning the hits will be `List` instances with the value of the `title` field of the matched document at index `0`.
<3> Define the second projection to combine as a projection on the `genre` field,
meaning the hits will be `List` instances with the value of the `genre` field of the matched document at index `1`.
<4> The hits will be `List` instances holding the result of the given projections, in order for each matched document.
====

[[search-dsl-projection-extensions]]
=== Backend-specific extensions

include::todo-placeholder.asciidoc[]

// TODO introduction to extensions or links to that introduction

[[search-dsl-projection-extensions-lucene-document]]
==== Lucene: `document`

.Returning the matched document as a native `org.apache.lucene.document.Document`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/projection/ProjectionDslIT.java[tags=lucene-document]
----
====

// TODO explain limitations: not the original documents, fields reconstructed from what we find, not all fields presents, ...

[[search-dsl-projection-extensions-lucene-explanation]]
==== Lucene: `explanation`

.Returning the score explanation as a native `org.apache.lucene.search.Explanation`
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/projection/ProjectionDslIT.java[tags=lucene-explanation]
----
====

[[search-dsl-projection-extensions-elasticsearch-source]]
==== Elasticsearch: `source`

.Returning the matched document source as a JSON-formatted String
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/projection/ProjectionDslIT.java[tags=elasticsearch-source]
----
====

[[search-dsl-projection-extensions-elasticsearch-explanation]]
==== Elasticsearch: `explanation`

.Returning the score explanation as a JSON-formatted String
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/projection/ProjectionDslIT.java[tags=elasticsearch-explanation]
----
====

[[search-dsl-type-compatibility]]
== Field types and compatibility

[[search-dsl-argument-type]]
=== Type of arguments passed to the DSL

Some predicates, such as the `match` predicate or the `range` predicate,
require a parameter of type `Object` at some point (`matching(Object)`, `above(Object)`, ...).
Similarly, it is possible to pass an argument of type `Object` in the sort DSL
when defining the behavior for missing values (`onMissingValue().use(Object)`).

These methods do not actually accept *any* object,
and will throw an exception when passed an argument with the wrong type.

Generally the expected type of this argument should be rather obvious:
for example if you created a field by mapping an `Integer` property,
then an `Integer` value will be expected when building a predicate;
if you mapped a `java.time.LocalDate`, then a `java.time.LocalDate` will be expected,
etc.

Things get a little more complex if you start defining and using custom bridges.
You will then have properties of type `A` mapped to an index field of type `B`.
What should you pass to the DSL?
To answer that question, we need to understand DSL converters.

DSL converters are a feature of Hibernate Search that allows the DSL to accept
arguments that match the type of the indexed property,
instead of the type of the underlying index field.

Each custom bridge has the possibility to define a DSL converter for the index fields it populates.
When it does, every time that field is mentioned in the predicate DSL,
Hibernate Search will use that DSL converter to convert the value passed to the DSL to a value that the backend understands.

For example, let's imagine an `AuthenticationEvent` entity with an `outcome` property of type `AuthenticationOutcome`.
This `AuthenticationOutcome` type is an enum.
We index the `AuthenticationEvent` entity and its `outcome` property in order to allow users to find events by their outcome.

The default bridge for enums puts the result of `Enum.name()` into a `String` field.
However, this default bridge also defines a DSL converter under the hood.
As a result, any call to the DSL will be expected to pass an `AuthenticationOutcome` instance:

.Transparent conversion of DSL parameters
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/converter/DslConverterIT.java[tags=dsl-converter-enabled]
----
====

This is handy, and especially appropriate if users are asked to select an outcome in a list of choices.
But what if we want users to type in some words instead, i.e. what if we want full-text search on the `outcome` field?
Then we will not have an `AuthenticationOutcome` instance to pass to the DSL, only a `String`...

In that case, we will first need to assign some text to each enum.
This can be achieved by defining a custom <<mapper-orm-bridge-valuebridge,`ValueBridge<AuthenticationOutcome, String>`>>
and applying it to the `outcome` property so as to index a textual description of the outcome,
instead of the default `Enum#name()`.

Then, we will need to tell Hibernate Search that the value passed to the DSL should not be passed to the DSL converter,
but should be assumed to match the type of the index field directly (in this case, `String`).
To that end, one can simply use the variant of the `matching` method that accepts a `DslConverter` parameter,
and pass `DslConverter.DISABLED`:

.Disabling the DSL converter
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/converter/DslConverterIT.java[tags=dsl-converter-disabled]
----
====

All methods that apply DSL converters offer a variant that accepts a `DslConverter` parameter:
`matching`, `from`, `to`, `above`, `below`, ...

[NOTE]
====
A DSL converter is always automatically generated for value bridges.
However, more complex bridges will require explicit configuration.

See <<mapper-orm-bridge-typeandpropertybridge>> for more information.
====

[[search-dsl-projected-value-type]]
=== Type of projected values

Generally the type of values returned by projections argument should be rather obvious:
for example if you created a field by mapping an `Integer` property,
then an `Integer` value will be returned when projecting;
if you mapped a `java.time.LocalDate`, then a `java.time.LocalDate` will be returned,
etc.

Things get a little more complex if you start defining and using custom bridges.
You will then have properties of type `A` mapped to an index field of type `B`.
What will be returned by projections?
To answer that question, we need to understand projection converters.

Projection converters are a feature of Hibernate Search that allows the projections to return
values that match the type of the indexed property,
instead of the type of the underlying index field.

Each custom bridge has the possibility to define a projection converter for the index fields it populates.
When it does, every time that field is projected on,
Hibernate Search will use that projection converter to convert the projected value returned by the index.

For example, let's imagine an `Order` entity with a `status` property of type `OrderStatus`.
This `OrderStatus` type is an enum.
We index the `Order` entity and its `status` property.

The default bridge for enums puts the result of `Enum.name()` into a `String` field.
However, this default bridge also defines a projection converter.
As a result, any projection on the `status` field will return an `OrderStatus` instance:

.Transparent conversion of projections
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/converter/ProjectionConverterIT.java[tags=projection-converter-enabled]
----
====

This is probably what you want in general.
But in some cases, you may want to disable this conversion and return the index value instead
(i.e. the value of `Enum.name()`).

In that case, we will need to tell Hibernate Search that the value returned by the backend should not be passed to the projection converter.
To that end, one can simply use the variant of the `field` method that accepts a `ProjectionConverter` parameter,
and pass `ProjectionConverter.DISABLED`:

.Disabling the projection converter
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/searchdsl/converter/ProjectionConverterIT.java[tags=projection-converter-disabled]
----
====

[NOTE]
====
Projection converters must be configured explicitly in custom bridges.

See <<mapper-orm-bridge-valuebridge>> and <<mapper-orm-bridge-typeandpropertybridge>> for more information.
====

[[search-dsl-multiple-fields]]
=== Targeting multiple fields

Sometimes a predicate/sort/projection targets *multiple* field, which may have conflicting definitions:

* when multiple field names are passed to the `onFields` method in the predicate DSL (each field has its own definition);
* or when the search query targets multiple indexes (each index has its own definition of each field).

In such cases, the definition of the targeted fields is expected to be compatible.
For example targeting an `Integer` field and a `java.time.LocalDate` field
in the same `match` predicate will not work,
because you won't be able to pass a non-null argument to the `matching(Object)` method
that is both an `Integer` and a `java.time.LocalDate`.

If you are looking for a simple rule of thumb, here it is:
if the indexed properties do not have the same type, or are mapped differently,
the corresponding fields are probably not going to be compatible.

However, if you're interested in the details, Hibernate Search is a bit more flexible than that.

There are three different constraints when it comes to field compatibility:

1. The fields must be "encoded" in a compatible way.
This means the backend must use the same representation for the two fields,
for example they are both `Integer`,
or they are both `BigDecimal` with the same decimal scale,
or they are both `LocalDate` with the same date format, etc.
2. The fields must have a compatible DSL converter (for predicates and sorts) or projection converter (for projections).
3. For full-text predicates, the fields must have a compatible analyzer.

The following sections describe all the possible incompatibilities, and how to solve them.

==== Incompatible codec

In a search query targeting multiple indexes,
if a field is encoded differently in each index,
you cannot apply predicates, sorts or projections on that field.

NOTE: Encoding is not only about the field type, such as `LocalDate` or `BigDecimal`.
Some codecs are parameterized and two codecs with different parameters will often be considered incompatible.
Examples of parameters include the format for temporal types
or the <<mapper-orm-directfieldmapping-annotations-scalednumberfield, decimal scale>>
for `BigDecimal` and `BigInteger`.

In that case, your only option is to change your mapping to avoid the conflict:

1. rename the field in one index
2. OR change the field type in one index
3. OR if the problem is simply different codec parameters (date format, decimal scale, ...),
align the value of these parameters in one index with the other index.

If you choose to rename the field in one index,
you will still be able to apply a similar predicate
to the two fields in a single query:
you will have to create one predicate per field
and combine them with a <<search-dsl-predicate-boolean,boolean junction>>.

==== Incompatible DSL converters

Incompatible DSL converters are only a problem when you need to pass an argument to the DSL in certain methods:
`matching(Object)`/`to(Object)`/`above(Object)`/`below(Object)`/etc. in the predicate DSL,
or `onMissingValue().use(Object) in the sort DSL.

If two fields encoded in a compatible way (for example both as `String`),
but that have different DSL converters
(for example the first one converts from `String` to `String`, but the second one converts from `Integer` to `String`),
you can still use these methods, but you will need to disable the DSL converter
as explained in <<search-dsl-argument-type>>:
you will just pass the "index" value to the DSL (using the same example, a `String`).

==== Incompatible projection converters

If, in a search query targeting multiple indexes,
a field is encoded in a compatible way in every indexes (for example both as `String`),
but that has a different projection converters
(for example the first one converts from `String` to `String`, but the second one converts from `String` to `Integer`),
you can still project on this field, but you will need to disable the projection converter
as explained in <<search-dsl-projected-value-type>>:
the projection will return the "index", unconverted value (using the same example, a `String`).

==== Incompatible analyzer

Incompatible analyzers are only a problem with full-text predicates:
match predicate on a text field, phrase predicate, simple query string predicate, ...

If two fields encoded in a compatible way (for example both as `String`),
but that have different analyzers,
you can still use these predicates, but you will need to explicitly configure the predicate to either
set the search analyzer to an analyzer of your choosing with `.analyzer(analyzerName)`,
or skip analysis completely with `.skipAnalysis()`.

See <<search-dsl-predicate>> for more information about how to create predicates
and about the available options.
