[[backend-lucene]]
= Lucene backend

[[backend-lucene-configuration]]
== General configuration

In order to define a Lucene backend,
the `hibernate.search.backends.<backend name>.type` property must be set to `lucene`.

All other configuration properties are optional,
but the defaults might not suit everyone.
In particular, you might want to set the location of your indexes in the filesystem.
See below for the details of every configuration property.

[[backend-lucene-configuration-directory]]
=== Index storage (`Directory`)
// Search 5 anchors backward compatibility
[[search-configuration-directory]]

The component responsible for index storage in Lucene is the `org.apache.lucene.store.Directory`.
The implementation of the directory determines where the index will be stored:
on the filesystem, in the JVM's heap, ...

By default, the Lucene backend stores the indexes on the filesystem,
in the JVM's working directory.

The type of directory is set a the backend level:

// Search 5 anchors backward compatibility
[[example-configuring-directory-providers]]
[source]
----
hibernate.search.backends.<backend-name>.directory.type = local-filesystem
----

// Search 5 anchors backward compatibility
[[directory-provider-table]]
The following directory types are available:

* `local-filesystem`: Store the index on the local filesystem.
See <<backend-lucene-configuration-directory-local-filesystem>>
for details and configuration options.
* `local-heap`: Store the index in the local JVM heap.
*Local heap directories and all contained indexes are lost when the JVM shuts down.*
See <<backend-lucene-configuration-directory-local-heap>>
for details and configuration options.

[[backend-lucene-configuration-directory-local-filesystem]]
==== Local filesystem storage

The `local-filesystem` directory type will store each index in
a subdirectory of a configured filesystem directory.

[NOTE]
====
Local filesystem directories really are designed to be *local* to one server and one application.

In particular, they should not be shared between multiple Hibernate Search instances.
Even if network shares allow to share the raw content of indexes,
using the same index files from multiple Hibernate Search
would require more than that:
non-exclusive locking, routing of write requests from one node to another, ...
These additional features are simply not available on `local-filesystem` directories.

If you need to share indexes between multiple Hibernate Search instances,
the Elasticsearch backend will be a better choice.
Refer to <<architecture>> for more information.
====

===== Index location

Each index is assigned a subdirectory under a root directory.

By default, the root directory is the JVM's working directory.
It can be configured at the backend level:

[source]
----
hibernate.search.backends.<backend-name>.directory.root = /path/to/my/root
----

For example, with the configuration above,
an entity of type `com.mycompany.Order` will be indexed in directory
`/path/to/my/root/com.mycompany.Order/`.
If that entity is explicitly assigned the index name "orders"
(see `@Indexed(index = ...)` in <<mapper-orm-entityindexmapping>>),
it will instead be indexed in directory
`/path/to/my/root/orders/`.

===== Filesystem access strategy

The default strategy for accessing the filesystem is determined automatically
based on the operating system and architecture.
It should work well in most situations.

For situations where a different filesystem access strategy is needed,
Hibernate Search exposes a configuration property at the backend level:

[source]
----
hibernate.search.backends.<backend-name>.directory.filesystem_access.strategy = auto (default)
----

Allowed values are:

* `auto` (default): lets Lucene select the most appropriate implementation
based on the operating system and architecture.
* `simple`: a straightforward strategy based on `Files.newByteChannel`.
See `org.apache.lucene.store.SimpleFSDirectory`.
* `mmap`: uses `mmap` for reading, and `FSDirectory.FSIndexOutput` for writing.
See `org.apache.lucene.store.MMapDirectory`.
* `nio`: uses ``java.nio.channels.FileChannel``'s positional read for concurrent reading,
and `FSDirectory.FSIndexOutput` for writing.
See `org.apache.lucene.store.NIOFSDirectory`.

[NOTE]
====
Make sure to refer to Javadocs of these `Directory`
implementations before changing this setting.
Implementations offering better performance
also bring issues of their own.
====

===== Other configuration options

The `local-filesystem` directory also allows configuring a
<<backend-lucene-configuration-directory-locking-strategy,locking strategy>>.

[[backend-lucene-configuration-directory-local-heap]]
==== Local heap storage

The `local-heap` directory type will store indexes in the local JVM's heap.

As a result, indexes contained in a `local-heap` directory are *lost when the JVM shuts down*.

This directory type is only provided for use in *testing configurations*
with *small indexes* and *low concurrency*,
where it could slightly improve performance.
In setups requiring larger indexes and/or high concurrency,
a <<backend-lucene-configuration-directory-local-filesystem,filesystem-based directory>>
will achieve better performance.

The `local-heap` directory does not offer any specific option
beyond the <<backend-lucene-configuration-directory-locking-strategy,locking strategy>>.

[[backend-lucene-configuration-directory-locking-strategy]]
==== Locking strategy
// Search 5 anchors backward compatibility
[[search-configuration-directory-lockfactories]]

In order to write to an index, Lucene needs to acquire a lock to ensure no other application instance
writes to the same index concurrently.
Each directory type comes with a default locking strategy that should work well enough in most situations.

For those (very) rare situations where a different locking strategy is needed,
Hibernate Search exposes a configuration property at the backend level:

[source]
----
hibernate.search.backends.<backend-name>.directory.locking.strategy = native-filesystem
----

The following strategies are available:

* `simple-filesystem`:
Locks the index by creating a marker file and checking it before write operations.
This implementation is very simple and based Java's File API.
If for some reason an application ends abruptly,
the marker file will stay on the filesystem and will need to be removed manually.
+
This strategy is only available for filesystem-based directories.
+
See `org.apache.lucene.store.SimpleFSLockFactory`.
* `native-filesystem`:
Similarly to `simple-filesystem`, locks the index by creating a marker file,
but using native OS file locks instead of Java's File API,
so that locks will be cleaned up if the application ends abruptly.
+
This is the default strategy for the `local-filesystem` directory type.
+
This implementation has known problems with NFS: it should be avoided on network shares.
+
This strategy is only available for filesystem-based directories.
+
See `org.apache.lucene.store.NativeFSLockFactory`.
* `single-instance`:
Locks using a Java object held in the JVM's heap.
Since the lock is only accessible by the same JVM,
this strategy will only work properly when it is known
that only a single application will ever try to accesses the indexes.
+
This is the default strategy for the `local-heap` directory type.
+
See `org.apache.lucene.store.SingleInstanceLockFactory`.
* `none`:
Does not use any lock.
Concurrent writes from another application will result in index corruption.
Test your application carefully and make sure you know what it means.
+
See `org.apache.lucene.store.NoLockFactory`.

=== Index format compatibility

While Hibernate Search strives to offer a backwards compatible API,
making it easy to port your application to newer versions,
it still delegates to Apache Lucene to handle the index writing and searching.
This creates a dependency to the Lucene index format.
The Lucene developers of course attempt to keep a stable index format,
but sometimes a change in the format can not be avoided.
In those cases you either have to re-index all your data or use an index upgrade tool.
Sometimes, Lucene is also able to read the old format so you don't need to take specific actions
(besides making backup of your index).

While an index format incompatibility is a rare event,
it can happen more often that Lucene's Analyzer implementations might slightly change its behavior.
This can lead to some documents not matching anymore, even though they used to.

To avoid this analyzer incompatibility,
Hibernate Search allows to configure to which version of Lucene
the analyzers and other Lucene classes should conform their behavior.

This configuration property is set at the backend level:

[source]
----
hibernate.search.backends.<backend-name>.lucene_version = LUCENE_8_1_1
----

Depending on the specific version of Lucene you're using,
you might have different options available:
see `org.apache.lucene.util.Version` contained in `lucene-core.jar`
for a list of allowed values.

When this option is not set, Hibernate Search will instruct Lucene to use the latest version,
which is usually the best option for new projects.
Still, it's recommended to define the version you're using explicitly in the configuration,
so that when you happen to upgrade, Lucene the analyzers will not change behavior.
You can then choose to update this value at a later time,
for example when you have the chance to rebuild the index from scratch.

[NOTE]
====
The setting will be applied consistently when using Hibernate Search APIs,
but if you are also making use of Lucene bypassing Hibernate Search
(for example when instantiating an Analyzer yourself),
make sure to use the same value.
====

=== Other configuration properties

Other configuration properties are mentioned in the relevant parts of this documentation.
You can find a full reference of available properties in the Hibernate Search javadoc:

* link:{hibernateSearchJavadocUrl}/org/hibernate/search/backend/lucene/cfg/LuceneBackendSettings.html[org.hibernate.search.backend.lucene.cfg.LuceneBackendSettings].
* link:{hibernateSearchJavadocUrl}/org/hibernate/search/backend/lucene/cfg/LuceneIndexSettings.html[org.hibernate.search.backend.lucene.cfg.LuceneIndexSettings].

[[backend-lucene-field-types]]
== Field types

[NOTE]
====
Some types are not supported directly by the Elasticsearch backend,
but will work anyway because they are "bridged" by the mapper.
For example a `java.util.Date` in your entity model is "bridged" to `java.time.Instant`,
which is supported by the Elasticsearch backend.
See <<mapper-orm-bridge-valuebridge-builtin>> for more information.
====

[cols="l",options="header"]
.Field types supported by the Lucene backend
|====
|Field type
|java.lang.String
|java.lang.Byte
|java.lang.Short
|java.lang.Integer
|java.lang.Long
|java.lang.Double
|java.lang.Float
|java.lang.Boolean
|java.math.BigDecimal
|java.math.BigInteger
|java.time.Instant
|java.time.LocalDate
|java.time.LocalTime
|java.time.LocalDateTime
|java.time.ZonedDateTime
|java.time.OffsetDateTime
|java.time.OffsetTime
|java.time.Year
|java.time.YearMonth
|java.time.MonthDay
|org.hibernate.search.engine.spatial.GeoPoint
|====

[NOTE]
====
Date/time types do not support the whole range of years that can be represented in `java.time` types:

* `java.time` can represent years ranging from `-999.999.999` to `999.999.999`.
* The Lucene backend supports dates ranging from year `-292.275.054` to year `292.278.993`.
====

// TODO also document "extension" types

[[backend-lucene-analysis]]
== Analysis

[IMPORTANT]
====
This section is currently incomplete.
A decent introduction is included in the getting started guide: see <<getting-started-analysis>>.
====

To configure analysis in a Lucene backend, you will need to:

* Implement a bean that implements the `org.hibernate.search.backend.lucene.analysis.LuceneAnalysisConfigurer` interface.
* Configure your backend to use that bean by setting the configuration property
`hibernate.search.backends.<backend name>.analysis_configurer`
to a <<configuration-property-types,bean reference>> pointing to your bean.

// TODO add a simple example: configurer implementation + settings

To know which character filters, tokenizers and token filters are available,
either browse the Lucene Javadoc or read the corresponding section on the
link:http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters[Solr Wiki].

[NOTE]
====
Why the reference to the Apache Solr wiki for Lucene?

The analyzer factory framework was originally created in the Apache Solr project.
Most of these implementations have been moved to Apache Lucene, but the
documentation for these additional analyzers can still be found in the Solr Wiki. You might find
other documentation referring to the "Solr Analyzer Framework"; just remember you don't need to
depend on Apache Solr anymore: the required classes are part of the core Lucene distribution.
====

// TODO add detailed description of each use case: normalizer, analyzer, by instance, by factory, ...

[[backend-lucene-multi-tenancy]]
== Multi-tenancy

Multi-tenancy is supported and handled transparently,
according to the tenant ID defined in the current session:

* documents will be indexed with the appropriate values, allowing later filtering;
* queries will filter results appropriately.

However, multi-tenancy must be enabled explicitly.
To do so, set the `hibernate.search.backends.<backend name>.multi_tenancy_strategy` property:

* to `none` for single-tenancy;
* to `discriminator` for discriminator-based multi-tenancy: adds a "tenant ID" field to every document.
