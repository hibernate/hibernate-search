[[mapper-orm-mapping]]
= Mapping ORM entities to indexes
// Search 5 anchors backward compatibility
[[search-mapping]]

include::todo-placeholder.asciidoc[]

////
TODO The getting started section has a link pointing here and expects the section to
include a description of how to:
 * define a mapping using annotations.
 * define a mapping programmatically.
////

== Configuration

include::todo-placeholder.asciidoc[]

By default, Hibernate Search will automatically process mapping annotations for entity types,
as well as nested types in those entity types, for instance embedded types.
If you want to ignore these annotations, set `hibernate.search.enable_annotation_mapping` to `false`.

To configure the mapping manually, you can set a mapping configurer.
By setting `hibernate.search.mapping_configurer`
to a <<configuration-property-types,bean reference>> of type `org.hibernate.search.mapper.orm.mapping.HibernateOrmSearchMappingConfigurer`,
you can use a programmatic API to define the mapping.

// TODO add an example

See <<mapper-orm-programmatic-mapping>> for more information about the programmatic mapping API.

[[mapper-orm-entityindexmapping]]
== Entity/index mapping

In order to index an entity, it must be annotated with `@Indexed`.
All entities not annotated with `@Indexed` will be ignored by the indexing process.

.Marking a class for indexing with `@Indexed`
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/entityindexmapping/Book.java[tags=indexed-default]
----
====

By default:

* The index name will be the fully qualified name of the entity.
* The index will be created in the default backend.
See <<getting-started-configuration,the getting stated guide>>
or <<configuration-structure>> for more information about how to configure backends.
* The identifier of indexed documents will be generated from the entity identifier.
Most types commonly used for entity identifiers are supported out of the box,
but for more exotic types you may need specific configuration.
See <<mapper-orm-identifiermapping>> for details.
* The index won't have any field.
Fields must be mapped to properties explicitly.
See <<mapper-orm-directfieldmapping>> for details.

You can change the name of the index by setting `@Indexed(index = ...)`.
Note that index names must be unique in a given application.

.Explicit index name with `@Indexed.index`
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/entityindexmapping/Author.java[tags=indexed-explicitindexname]
----
====

If you defined multiple backends, you can map entities to another backend than the default one.
By setting `@Indexed(backend = "backend2")` you inform Hibernate Search that the index
for your entity must be created in the backend named "backend2".
This may be useful if your model has clearly defined sub-parts with very different indexing requirements.

.Explicit backend with `@Indexed.backend`
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/entityindexmapping/User.java[tags=indexed-explicitbackend]
----
====

[NOTE]
====
Entities indexed in different backends cannot be targeted by the same query.
For example, with the mappings defined above,
and assuming "backend2" is not the default backend,
the following code will throw an exception,
because `Author` and `User` are indexed in different backends:

[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/entityindexmapping/HibernateOrmIndexedIT.java[tags=cross-backend-search]
----
====

[[mapper-orm-identifiermapping]]
== Identifier mapping

include::todo-placeholder.asciidoc[]

[[mapper-orm-directfieldmapping]]
== Direct field mapping

include::todo-placeholder.asciidoc[]

////
TODO The getting started section has a link pointing here and expects the section to
include a detailed description of each @*Field annotation.
////

Direct field mapping allows to map a property to an index field directly:
you just need to add an annotation, configure the field through the annotation attributes,
and Hibernate Search will take care of extracting the property value and populating the index field when necessary.

Direct field mapping looks like this:

.Mapping properties to fields directly
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/directfieldmapping/Book.java[tags=direct-field-mapping]
----
<1> Map the `title` property to a full-text field with the same name.
Some options can be set to customize the fields' behavior, in this case the analyzer (for full-text indexing)
and the fact that this field is projectable (its value can be retrieved from the index).
<2> Map the `title` property to *another* field, configured differently:
it is not analyzed, but simply normalized (i.e. it's not split into multiple tokens),
and it is stored in such a way that it can be used in sorts.
+
Mapping a single property to multiple fields is particularly useful when doing full-text search:
at query time, you can use a different field depending on what you need.
You can map a property to as many fields as you want, but each must have a unique name.
<3> Map another property to its own field.
====

Before you map a property, you must consider two things:

The `@*Field` annotation::
In its simplest form, direct field mapping is achieved by applying the `@GenericField` annotation to a property.
This annotation will work for every supported property type, but is rather limited:
it does not allow full-text search in particular.
To go further, you will need to rely on different, more specific annotations,
which offer specific attributes.
The available annotations are described in details in <<mapper-orm-directfieldmapping-annotations>>.
The type of the property::
In order for the `@*Field` annotation to work correctly, the type of the mapped property must be supported by Hibernate Search.
See <<mapper-orm-bridge-valuebridge-builtin>> for a list of all types that are supported out of the box,
and <<mapper-orm-directfieldmapping-custom-types>> for indications on how to handle more complex types,
be it simply containers (`List<String>`, `Map<String, Integer>`, ...)
or custom types.

Each field annotation has its own attributes, but the following ones are common to most annotations:

`name`::
The name of the index field. By default, it is the same as the property name.
You may want to change it in particular when mapping a single property to multiple fields.
+
Value: `String`. Defaults to the name of the property.
[[mapper-orm-directfieldmapping-sortable]] `sortable`::
Whether the field can be <<mapper-orm-query-sort, sorted on>>,
i.e. whether a specific data structure is added to the index to allow efficient sorts when querying.
+
Value: `Sortable.YES`, `Sortable.NO`, `Sortable.DEFAULT`.
+
[IMPORTANT]
====
This option is not available for `@FullTextField`.
See <<mapper-orm-directfieldmapping-annotations-fulltextfield,here>> for an explanation and some solutions.
====
[[mapper-orm-directfieldmapping-projectable]] `projectable`::
Whether the field can be <<mapper-orm-query-projection, projected on>>,
i.e. whether the field value is stored in the index to allow later retrieval when querying.
+
Value: `Projectable.YES`, `Projectable.NO`, `Projectable.DEFAULT`.
[[mapper-orm-directfieldmapping-indexnullas]] `indexNullAs`::
Disabled by default. When set, it defines the value to use as a replacement anytime the property value is null.
+
[IMPORTANT]
====
The replacement is defined as a String. Thus its value has to be parsed.
Look up the column _Parsing method for 'indexNullAs'_ in <<mapper-orm-bridge-valuebridge-builtin>> to find out the format used when parsing.
====

[[mapper-orm-directfieldmapping-annotations]]
=== Available field annotations

Various direct field mapping annotations exist,
each offering its own set of customization options:

`@GenericField`::
A good default choice that will work for every supported property type.
+
Fields mapped using this annotation do not provide any advanced features such as full-text search:
matches on a generic field are exact matches.

[[mapper-orm-directfieldmapping-annotations-fulltextfield]] `@FullTextField`::
A text field whose value is considered as multiple words.
Only works for `String` fields.
+
Matches on a full-text field can be more subtle than exact matches:
match fields which contains a given word,
match fields regardless of case,
match fields ignoring diacritics,
...
+
Full-text fields must be assigned an `analyzer`, referenced by its name.
See <<concepts-analysis>> for more details about analyzers and full-text analysis.
+
IMPORTANT: Full-text fields cannot be sorted on.
If you need to sort on the value of a property,
it is recommended to use `@KeywordField`, with a normalizer if necessary (see below).
Note that multiple fields can be added to the same property,
so you can use both `@FullTextField` and `@KeywordField` if you need both
full-text search and sorting.

`@KeywordField`::
A text field whose value is considered as a single keyword.
Only works for `String` fields.
+
Keyword fields allow subtle matches, similarly to full-text fields,
with the limitation that keyword fields only contain one token.
On the other hand, this limitation allows keyword fields to be <<mapper-orm-directfieldmapping-sortable,sorted on>>.
+
Keyword fields may be assigned a `normalizer`, referenced by its name.
See <<concepts-analysis>> for more details about normalizers and full-text analysis.

[[mapper-orm-directfieldmapping-annotations-scalednumberfield]] `@ScaledNumberField`::
A numeric field for integer or floating-point values
that require a higher precision than doubles
but always have roughly the same scale.
Only works for either `java.math.BigDecimal` or `java.math.BigInteger` fields.
+
Scaled numbers are indexed as integers, typically a long (64 bits),
with a fixed scale that is consistent for all values of the field across all documents.
Because scaled numbers are indexed with a fixed precision, they cannot represent all `BigDecimal` or `BigInteger` values.
Values that are too large to be indexed  will trigger a runtime exception.
Values that have trailing decimal digits will be rounded to the nearest integer.
+
To index numbers that have significant digits after the decimal point, set the `decimalScale` to the number of digits you need indexed.
The decimal point will be shifted that many times to the right before indexing, preserving that many digits from the decimal part.
To index very large numbers that cannot fit in a long, set the decimal point to a negative value.
The decimal point will shifted that many times to the left before indexing, dropping all digits from the decimal part.
+
`decimalScale` with strictly positive values is allowed only for `BigDecimal`, since `BigInteger` values have no decimal digits.
+
Note that shifting of the decimal points is completely transparent and will not affect how you use the search DSL:
you be expected to provide "normal" `BigDecimal` or `BigInteger` values,
and Hibernate Search will apply the `decimalScale` and rounding transparently.
+
As a result of the rounding, search predicates and sorts will only be as precise as what the `decimalScale` allows.
+
Note that rounding does not affect projections, which will return the original value without any loss of precision.
+
NOTE: A typical use case is monetary amounts, with a decimal scale of 2
because only two digits are generally needed beyond the decimal point.
+
NOTE: Using Hibernate ORM mapping,
a default `decimalScale` is taken automatically from the underlying `scale` value of the relative SQL `@Column`,
using the Hibernate ORM metadata. The value could be overridden explicitly using the `decimalScale` attribute.

[[mapper-orm-directfieldmapping-spatial-types]]
=== Mapping spatial types
// Search 5 anchors backward compatibility
[[spatial]]

include::todo-placeholder.asciidoc[]

[[mapper-orm-directfieldmapping-custom-types]]
=== Mapping custom property types

Even types that are not <<mapper-orm-bridge-valuebridge-builtin,supported out of the box>> can be mapped.
There are various solutions, some simple and some more powerful,
but they all come down to extracting data from the unsupported type and convert it to types that are
supported by the backend.

There are two cases to distinguish:

1. If the unsupported type is simply a container (`List<String>`)
or multiple nested containers (`Map<Integer, List<String>>`)
whose elements have a supported type,
then what you need is a container value extractor.
+
By default, built-in extractors are transparently applied to standard container types:
`Iterable` and subtypes, `Map` (extracting the value), `Optional`, `OptionalInt`, ...
If that is all you need, then no extra configuration is necessary.
+
If your container is a custom one, or you need a different behavior than the default
(extract keys instead of values from a `Map`, for example),
then you will need to set a custom extractor chain on the `@*Field` annotation.
All `@*Field` annotations expose an `extraction` attribute to that end.
See <<mapper-orm-containerextractor>> for more information on available extractors and custom extractors.
2. Otherwise, you will have to rely on a custom component, called a bridge, to extract data from your type.
See <<mapper-orm-bridge>> for more information on custom bridges.

[[mapper-orm-bridge]]
== Bridges
// Search 5 anchors backward compatibility
[[search-mapping-bridge]]

include::todo-placeholder.asciidoc[]

////
TODO The getting started section has a link pointing here and expects the section to
include a detailed description of how to define and use bridges.
////

Starting with Hibernate Search 6, there are five separate interfaces for bridges:

* <<mapper-orm-bridge-valuebridge,`ValueBridge`>> can be used for simple use cases when mapping an object's property.
+
The `ValueBridge` is applied at the property level using one of the pre-defined `@*Field` annotations:
`@GenericField`, `@FullTextField`, ...
+
`ValueBridge` is a suitable interface for your custom bridge if:
+
** The property value should be mapped to a single index field.
** The bridge should be applied to a property whose type is effectively immutable.
For example `Integer`, or a custom `enum` type, or a custom bean type whose content never changes would be suitable candidates,
but a custom bean type with setters would most definitely not.
* <<mapper-orm-bridge-typeandpropertybridge,`PropertyBridge`>> can be used for more complex uses cases when mapping an object's property.
+
The `PropertyBridge` is applied at the property level using a custom annotation.
+
`PropertyBridge` can be used even if the property being mapped has a mutable type,
or if its value should be mapped to multiple index fields.
* <<mapper-orm-bridge-typeandpropertybridge,`TypeBridge`>> should be used when mapping multiple properties of an object, potentially combining them in the process.
+
The `TypeBridge` is applied at the type level using a custom annotation.
+
Similarly to `PropertyBridge`, `TypeBridge` can be used even if the properties being mapped have a mutable type,
or if their values should be mapped to multiple index fields.
* <<mapper-orm-bridge-identifierbridge,`IdentifierBridge`>> can be used together with `@DocumentId`
to map an unusual entity identifier to a document identifier.
* <<mapper-orm-bridge-routingkeybridge,`RoutingKeyBridge`>> can be used to define a "routing key",
i.e. a key that will be used to determine the shard where corresponding documents must be stored in the index.

You can find example of custom bridges in the
https://github.com/hibernate/hibernate-search[Hibernate Search source code]:

* `org.hibernate.search.integrationtest.showcase.library.bridge.ISBNBridge` implements `ValueBridge`.
* `org.hibernate.search.integrationtest.showcase.library.bridge.MultiKeywordStringBridge` implements `PropertyBridge`.
The corresponding annotation is `org.hibernate.search.integrationtest.showcase.library.bridge.annotation.MultiKeywordStringBridge`.
* `org.hibernate.search.integrationtest.showcase.library.bridge.AccountBorrowalSummaryBridge` implements `TypeBridge`.
The corresponding annotation is `org.hibernate.search.integrationtest.showcase.library.bridge.annotation.AccountBorrowalSummaryBridge`.

[[mapper-orm-bridge-valuebridge]]
=== Value bridges

include::todo-placeholder.asciidoc[]

[[mapper-orm-bridge-valuebridge-builtin]]
==== Built-in value bridges
// Search 5 anchors backward compatibility
[[section-built-in-bridges]]

Some types have built-in value bridges,
meaning they are supported out-of-the box for <<mapper-orm-directfieldmapping,direct field mapping>> using `@*Field` annotations.

Below is a table listing all types with built-in value bridges,
along with the value assigned to the "raw" fields, i.e. the value passed to the underlying backend.

[NOTE]
====
For information about the underlying indexing and storage used by the backend,
see <<backend-lucene-field-types,Lucene field types>>
or <<backend-elasticsearch-field-types,Elasticsearch field types>> depending on your backend.
====

[cols="l,1,1",options="header"]
.Property types with built-in value bridges
|===
|Property type|Value of "raw" fields (if different)| Parsing method for 'indexNullAs'
|All enum types|`name()` as a `java.lang.String`| `Enum.valueOf(String)`
|java.lang.String|- | -
|java.lang.Character, char|A single-character `java.lang.String`| Accepts any single-character `java.lang.String`
|java.lang.Byte, byte|-| `Byte.parseByte(String)`
|java.lang.Short, short|-| `Short.parseShort(String)`
|java.lang.Integer, int|-| `Integer.parseInt(String)`
|java.lang.Long, long|-| `Long.parseLong(String)`
|java.lang.Double, double|-| `Double.parseDouble(String)`
|java.lang.Float, float|-| `Float.parseFloat(String)`
|java.lang.Boolean, boolean|-| Accepts the strings `true` or `false`, ignoring case
|java.math.BigDecimal|-| `new BigDecimal(String)`
|java.math.BigInteger|-| `new BigInteger(String)`
|java.net.URI|`toString()` as a `java.lang.String` | `new URI(String)`
|java.net.URL|`toExternalForm()` as a `java.lang.String`| `new URL(String)`
|java.time.Instant|- | `Instant.parse(String)`
|java.time.LocalDate|- | `LocalDate.parse(String)`
|java.time.LocalTime|- | `LocalTime.parse(String)`
|java.time.LocalDateTime|- | `LocalDateTime.parse(String)`
|java.time.OffsetDateTime|- | `OffsetDateTime.parse(String)`
|java.time.OffsetTime|- | `OffsetTime.parse(String)`
|java.time.ZonedDateTime|- | `ZonedDateTime.parse(String)`
|java.time.ZoneId|`getId()` as a `java.lang.String` | `ZoneId.of(String)`
|java.time.ZoneOffset|`getTotalSeconds()` as a `java.lang.Integer` | `ZoneOffset.of(String)`
|java.time.Period|A formatted `java.lang.String`: `<years on 11 characters><months on 11 characters><days on 11 characters>` |`Period.parse(String)`
|java.time.Duration|`toNanos()` as a `java.lang.Long` | `Duration.parse(String)`
|java.time.Year|- | `Year.parse(String)`
|java.time.YearMonth|- | `YearMonth.parse(String)`
|java.time.MonthDay|- | `MonthDay.parse(String)`
|java.util.UUID|`toString()` as a `java.lang.String` | `UUID.fromString(String)`
|java.util.Calendar|A `java.time.ZonedDateTime` representing the same date/time and timezone; see <<mapper-orm-legacy-date-time-apis>> | `ZonedDateTime.parse(String)`
|java.util.Date|`toInstant()` as a `java.time.Instant`; see <<mapper-orm-legacy-date-time-apis>> | `Instant.parse(String)`
|java.sql.Timestamp|`toInstant()` as a `java.time.Instant`; see <<mapper-orm-legacy-date-time-apis>> | `Instant.parse(String)`
|java.sql.Date|`toInstant()` as a `java.time.Instant`; see <<mapper-orm-legacy-date-time-apis>> | `Instant.parse(String)`
|java.sql.Time|`toInstant()` as a `java.time.Instant`; see <<mapper-orm-legacy-date-time-apis>> | `Instant.parse(String)`
|===

[[mapper-orm-bridge-typeandpropertybridge]]
=== Type bridges and property bridges

include::todo-placeholder.asciidoc[]

[[mapper-orm-bridge-identifierbridge]]
=== Identifier bridges

include::todo-placeholder.asciidoc[]

Document identifiers have slightly different requirements than index fields,
which is why they are mapped using a different type of bridge.

[[mapper-orm-bridge-identifierbridge-builtin]]
==== Built-in identifier bridges

Some types have built-in identifier bridges,
meaning they are supported out-of-the box for <<mapper-orm-identifiermapping,document ID mapping>>.

Below is a table listing all types with built-in identifier bridges,
along with the value of the document identifier, i.e. the value passed to the underlying backend.

[cols="l,1",options="header"]
.Property types with built-in identifier bridges
|====
|Property type|Value of document identifiers
|java.lang.String|Same
|java.lang.Short, short|`toString()`
|java.lang.Integer, int|`toString()`
|java.lang.Long, long|`toString()`
|java.math.BigInteger|`toString()`
|All enum types|`name()`
|java.util.UUID|`toString()`
|====

[[mapper-orm-bridge-routingkeybridge]]
=== Routing key bridges

include::todo-placeholder.asciidoc[]

[[mapper-orm-legacy-date-time-apis]]
=== Support for legacy java.util date/time APIs

Using legacy date/time types such as `java.util.Calendar`, `java.util.Date`, `java.sql.Timestamp`, `java.sql.Date`, `java.sql.Time`
is not recommended,
due to their numerous quirks and shortcomings.
The https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html[`java.time`] package introduced
in Java 8 should generally be preferred.

That being said, integration constraints may force you to rely on the legacy date/time APIs,
which is why Hibernate Search still attempts to support them on a best effort basis.

Since Hibernate Search uses the `java.time` APIs to represent date/time internally,
the legacy date/time types need to be converted before they can be indexed.
Hibernate Search keeps things simple:
`java.util.Date`, `java.util.Calendar`, etc. will be converted using their time-value (number of milliseconds since the epoch),
which will be assumed to represent the same date/time in Java 8 APIs.
In the case of `java.util.Calendar`, timezone information will be preserved for projections.

For all dates after 1900, this will work exactly as expected.

Before 1900, indexing and searching through Hibernate Search APIs will also work as expected,
but *if you need to access the index natively*, for example through direct HTTP calls to an Elasticsearch server,
you will notice that the indexed values are slightly "off".
This is caused by differences in the implementation of `java.time` and legacy date/time APIs
which lead to slight differences in the interpretation of time-values (number of milliseconds since the epoch).

The "drifts" are consistent: they will also happen when building a predicate,
and they will happen in the opposite direction when projecting.
As a result, the differences will not be visible from an application relying on the Hibernate Search APIs exclusively.
They will, however, be visible when accessing indexes natively.

For the large majority of use cases, this will not be a problem.
If this behavior is not acceptable for your application,
you should look into implementing custom <<mapper-orm-bridge-valuebridge,value bridges>>
and instructing Hibernate Search to use them by default for `java.util.Date`, `java.util.Calendar`, etc.:
see <<mapper-orm-bridge-resolver>>.

[TIP]
====
Technically, conversions are difficult because the `java.time` APIs
and the legacy date/time APIs do not have the same internal calendar.

In particular:

* `java.time` assumes a "Local Mean Time" before 1900, while legacy date/time APIs do not support it
(https://bugs.openjdk.java.net/browse/JDK-6281408[JDK-6281408]),
As a result, time values (number of milliseconds since the epoch) reported by the two APIs
will be different for dates before 1900.
* `java.time` uses a proleptic Gregorian calendar before October 15, 1582,
meaning it acts as if the Gregorian calendar, along with its system of leap years, had always existed.
Legacy date/time APIs, on the other hand, use the Julian calendar before that date (by default),
meaning the leap years are not exactly the same ones.
As a result, some dates that are deemed valid by one API will be deemed invalid by the other,
for example February 29, 1500.

Those are the two main problems, but there may be others.
====

[[mapper-orm-bridge-resolver]]
=== Default bridge resolver

include::todo-placeholder.asciidoc[]

[[mapper-orm-indexedembedded]]
== Indexed-embedded
// Search 5 anchors backward compatibility
[[search-mapping-associated]]

include::todo-placeholder.asciidoc[]

////
TODO The getting started section has a link pointing here and expects the section to
include a detailed description of @IndexedEmbedded
////

[[mapper-orm-containerextractor]]
== Container value extractors

include::todo-placeholder.asciidoc[]

////
TODO Detailed description of container value extractors, list of built-in extractors, instructions to create one's own
////

[[mapper-orm-programmatic-mapping]]
== Programmatic mapping
// Search 5 anchors backward compatibility
[[hsearch-mapping-programmaticapi]]

include::todo-placeholder.asciidoc[]

////
TODO Detailed description of the programmatic mapping API.
////