= Hibernate Search {hibernateSearchVersion}: Migration Guide from {hibernateSearchPreviousStableVersionShort}
:doctype: book
:revdate: {docdate}
:sectanchors:
:anchor:
:toc: left
:toclevels: 4
:docinfodir: {docinfodir}
:docinfo: shared,private
:title-logo-image: image:hibernate_logo_a.png[align=left,pdfwidth=33%]

[[introduction]]
== [[_introduction]] Introduction

The aim of this guide is to assist you migrating
an existing application using any version `{hibernateSearchPreviousStableVersionShort}.x` of Hibernate Search
to the latest of the `{hibernateSearchVersionShort}.x` series.

NOTE: If you think something is missing or something does not work, please link:https://hibernate.org/community[contact us].

If you're looking to migrate from an earlier version,
you should migrate step-by-step, from one minor version to the next,
following the migration guide of link:https://hibernate.org/search/documentation/[each version].

[[requirements]]
== Requirements

Hibernate Search's requirements did not change in version {hibernateSearchVersion}.

[[data-format]]
== Data format and schema changes

Indexes created with Hibernate Search {hibernateSearchPreviousStableVersionShort}
can be read from and written to with Hibernate Search {hibernateSearchVersion}.

[[configuration]]
== Configuration changes

The configuration properties are backward-compatible with Hibernate Search {hibernateSearchPreviousStableVersionShort}.

[[api]]
== API changes

The https://hibernate.org/community/compatibility-policy/#code-categorization[API]
is backward-compatible with Hibernate Search {hibernateSearchPreviousStableVersionShort}.

Parts of the API have been deprecated, and may be removed in the next major version:

* `SearchPredicateFactory#bool(Consumer)`, which enables the syntax `f.bool(b -> { b.must(...); b.must(...); }`:
use the syntax `f.bool().with(b -> { b.must(...); b.must(...); })` instead,
or (if possible) take advantage of the new `.where(BiConsumer)` method in the Search Query DSL:
`.where((f, b) -> { b.must(...); b.must(...); })`.
* `SearchPredicateFactory#nested()`, which enables the syntax `f.nested().objectFieldPath("someField").nest(f.bool().must(...).must(...))`:
use the syntax `f.nested("someField").must(...).must(...)` instead.
* `SearchProjectionFactory#composite((Function, SearchProjection ...)`/`SearchProjectionFactory#composite((Function, ProjectionFinalStep ...)`
which enable the syntax `f.composite(list -> ..., <some projection>, <some projection>, ...)`:
use the (more flexible) syntax `f.composite().from(<some projection>, <some projection>, ...).asList(list -> ...)` instead.
* `SearchProjectionFactory#composite((Function, SearchProjection)`/`SearchProjectionFactory#composite((Function, ProjectionFinalStep)`
which enable the syntax `f.composite(p1 -> ..., <some projection>)`:
use the (more flexible) syntax `f.composite().from(<some projection>).as(p1 -> ...)` instead.
* `SearchProjectionFactory#composite((BiFunction, SearchProjection, SearchProjection)`/`SearchProjectionFactory#composite((BiFunction, ProjectionFinalStep, ProjectionFinalStep)`
which enable the syntax `f.composite((p1, p2) -> ..., <some projection>, <some projection>)`:
use the (more flexible) syntax `f.composite().from(<some projection>, <some projection>).as((p1, p2) -> ...)` instead.
* `SearchProjectionFactory#composite((TriFunction, SearchProjection, SearchProjection, SearchProjection)`/`SearchProjectionFactory#composite((TriFunction, ProjectionFinalStep, ProjectionFinalStep, ProjectionFinalStep)`
which enable the syntax `f.composite((p1, p2, p3) -> ..., <some projection>, <some projection>, <some projection>)`:
use the (more flexible) syntax `f.composite().from(<some projection>, <some projection>, <some projection>).as((p1, p2, p3) -> ...)` instead.

[[spi]]
== SPI changes

The https://hibernate.org/community/compatibility-policy/#code-categorization[SPI]
is backward-compatible with Hibernate Search {hibernateSearchPreviousStableVersionShort}.

[[behavior]]
== Behavior changes

No behavior changes to report.
