<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~  Copyright (c) 2010, Red Hat, Inc. and/or its affiliates or third-party contributors as
  ~  indicated by the @author tags or express copyright attribution
  ~  statements applied by the authors.  All third-party contributions are
  ~  distributed under license by Red Hat, Inc.
  ~
  ~  This copyrighted material is made available to anyone wishing to use, modify,
  ~  copy, or redistribute it subject to the terms and conditions of the GNU
  ~  Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~  This program is distributed in the hope that it will be useful,
  ~  but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~  for more details.
  ~
  ~  You should have received a copy of the GNU Lesser General Public License
  ~  along with this distribution; if not, write to:
  ~  Free Software Foundation, Inc.
  ~  51 Franklin Street, Fifth Floor
  ~  Boston, MA  02110-1301  USA
  -->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../hsearch.ent">
%BOOK_ENTITIES;
]>
<chapter id="search-monitoring">
  <title>Monitoring</title>

  <para>Hibernate Search offers access to a <classname>Statistics</classname>
  object via <methodname>SearchFactory.getStatistics()</methodname>. It allows
  you for example to determine which classes are indexed and how many entities
  are in the index. This information is always available. However, by
  specifying the <literal>hibernate.search.generate_statistics</literal>
  property in your configuration you can also collect total and average Lucene
  query and object loading timings.</para>

  <section>
    <title>JMX</title>

    <para>You can also enable access to the statistics via JMX. Setting the
    property <literal>hibernate.search.jmx_enabled</literal> will
    automatically register the <classname>StatisticsInfoMBean</classname>.
    Depending on your the configuration the
    <classname>IndexControlMBean</classname> and
    <classname>IndexingProgressMonitorMBean</classname> will also be
    registered. In case you are having more than one JMX enabled Hibernate
    Search instance running within a single JVM, you should also set
    <property>hibernate.search.jmx_bean_suffix</property> to a different value
    for each of the instances. The specified suffix will be used to
    distinguish between the different MBean instances. Let's have a closer
    look at the mentioned MBeans. <tip>
        <para>If you want to access your JMX beans remotely via JConsole make
        sure to set the system property
        <varname>com.sun.management.jmxremote</varname> to
        <constant>true</constant>.</para>
      </tip></para>

    <section>
      <title>StatisticsInfoMBean</title>

      <para>This MBean gives you access to <classname>Statistics</classname>
      object as desribed in the previous section.</para>
    </section>

    <section>
      <title>IndexControlMBean</title>

      <para>This MBean allows to build, optimize and purge the index for a
      given entity. Indexing occurs via the mass indexing API (see<xref
      linkend="search-batchindex-massindexer"/>). A requirement for this bean
      to be registered in JMX is, that the Hibernate
      <classname>SessionFactory</classname> is bound to JNDI via the
      <literal>hibernate.session_factory_name</literal> property. Refer to the
      Hibernate Core manual for more information on how to configure JNDI. The
      <classname>IndexControlMBean</classname> and its API are for now
      experimental.</para>
    </section>

    <section>
      <title>IndexingProgressMonitorMBean</title>

      <para>This MBean is an implementation
      <classname>MassIndexerProgressMonitor</classname> interface. If
      <literal>hibernate.search.jmx_enabled</literal> is enabled and the mass
      indexer API is used the indexing progress can be followed via this bean.
      The bean will only be bound to JMX while indexing is in progress. Once
      indexing is completed the MBean is not longer available.</para>
    </section>
  </section>
</chapter>
