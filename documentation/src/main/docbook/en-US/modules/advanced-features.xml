<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~  Copyright (c) 2010, Red Hat, Inc. and/or its affiliates or third-party contributors as
  ~  indicated by the @author tags or express copyright attribution
  ~  statements applied by the authors.  All third-party contributions are
  ~  distributed under license by Red Hat, Inc.
  ~
  ~  This copyrighted material is made available to anyone wishing to use, modify,
  ~  copy, or redistribute it subject to the terms and conditions of the GNU
  ~  Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~  This program is distributed in the hope that it will be useful,
  ~  but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~  for more details.
  ~
  ~  You should have received a copy of the GNU Lesser General Public License
  ~  along with this distribution; if not, write to:
  ~  Free Software Foundation, Inc.
  ~  51 Franklin Street, Fifth Floor
  ~  Boston, MA  02110-1301  USA
  -->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../hsearch.ent">
%BOOK_ENTITIES;
]>
<chapter id="search-lucene-native">
  <title>Advanced features</title>

  <para>In this final chapter we are offering a smorgasbord of tips and tricks
  which might become useful as you dive deeper and deeper into Hibernate
  Search.</para>

  <section>
    <title>Accessing the SearchFactory</title>

    <para>The <classname>SearchFactory</classname> object keeps track of the
    underlying Lucene resources for Hibernate Search. It is a convenient way
    to access Lucene natively. The <literal>SearchFactory</literal> can be
    accessed from a <classname>FullTextSession</classname>:</para>

    <example>
      <title>Accessing the <classname>SearchFactory</classname></title>

      <programlisting language="JAVA" role="JAVA">FullTextSession fullTextSession = Search.getFullTextSession(regularSession);
SearchFactory searchFactory = fullTextSession.getSearchFactory();</programlisting>
    </example>
  </section>

  <section id="IndexReaders">
    <title>Using an IndexReader</title>

    <para>Queries in Lucene are executed on an
    <classname>IndexReader</classname>. Hibernate Search might cache index
    readers to maximize performance, or provide other efficient strategies to
    retrieve an updated <classname>IndexReader</classname> minimizing IO
    operations. Your code can access these cached resources, but you have to
    follow some "good citizen" rules.</para>

    <example>
      <title>Accessing an <classname>IndexReader</classname></title>

      <programlisting language="JAVA" role="JAVA">IndexReader reader = searchFactory.getIndexReaderAccessor().open(Order.class);
try {
   //perform read-only operations on the reader
}
finally {
   searchFactory.getIndexReaderAccessor().close(reader);
}          </programlisting>
    </example>

    <para>In this example the <classname>SearchFactory</classname> figures out
    which indexes are needed to query this entity (considering a Sharding
    strategy). Using the configured <classname>ReaderProvider</classname>
    (described in<xref linkend="search-architecture-readerstrategy"/>) on each
    index, it returns a compound <literal>IndexReader</literal> on top of all
    involved indexes. Because this <classname>IndexReader</classname> is
    shared amongst several clients, you must adhere to the following
    rules:</para>

    <itemizedlist>
      <listitem>
        <para>Never call indexReader.close(), but always call
        readerProvider.closeReader(reader), preferably in a finally
        block.</para>
      </listitem>

      <listitem>
        <para>Don't use this <classname>IndexReader</classname> for
        modification operations (it's a readonly
        <classname>IndexReader</classname>, you would get an
        exception).</para>
      </listitem>
    </itemizedlist>

    <para>Aside from those rules, you can use the
    <classname>IndexReader</classname> freely, especially to do native Lucene
    queries. Using the shared <classname>IndexReader</classname>s will make
    most queries more efficient than by opening one directly from - for
    example - the filesystem.</para>

    <para>As an alternative to the method <methodname>open(Class...
    types)</methodname> you can use <methodname>open(String...
    indexNames)</methodname>; in this case you pass in one or more index
    names; using this strategy you can also select a subset of the indexes for
    any indexed type if sharding is used.</para>

    <example>
      <title>Accessing an <classname>IndexReader by index
      names</classname></title>

      <programlisting language="JAVA" role="JAVA">IndexReader reader = searchFactory
      .getIndexReaderAccessor()
      .open("Products.1", "Products.3");</programlisting>
    </example>
  </section>

  <section>
    <title>Accessing a Lucene Directory</title>

    <para>A <classname>Directory</classname> is the most common abstraction
    used by Lucene to represent the index storage; Hibernate Search doesn't
    interact directly with a Lucene <classname>Directory</classname> but
    abstracts these interactions via an <classname>IndexManager</classname>:
    an index does not necessarily need to be implemented by a
    <classname>Directory</classname>.</para>

    <para>If you know your index is represented as a
    <classname>Directory</classname> and need to access it, you can get a
    reference to the <classname>Directory</classname> via the
    <classname>IndexManager</classname>. Cast the
    <classname>IndexManager</classname> to a
    <classname>DirectoryBasedIndexManager</classname> and then use
    <literal>getDirectoryProvider().getDirectory()</literal> to get a
    reference to the underlying <classname>Directory</classname>. This is not
    recommended, we would encourage to use the
    <classname>IndexReader</classname> instead.</para>
  </section>

  <section id="search-configuration-directory-sharding" revision="1">
    <title>Sharding indexes</title>

    <para>In some cases it can be useful to split (shard) the indexed data of
    a given entity into several Lucene indexes.</para>

    <note>
      <para>This solution is not recommended unless there is a pressing need.
      Searches will be slower as all shards have to be opened for a single
      search. Don't do it until you have a real use case!</para>
    </note>

    <para>Possible use cases for sharding are:</para>

    <itemizedlist>
      <listitem>
        <para>A single index is so huge that index update times are slowing
        the application down.</para>
      </listitem>

      <listitem>
        <para>A typical search will only hit a sub-set of the index, such as
        when data is naturally segmented by customer, region or
        application.</para>
      </listitem>
    </itemizedlist>

    <para>By default sharding is not enabled unless the number of shards is
    configured. To do this use the
    <constant>hibernate.search.&lt;indexName&gt;.sharding_strategy.nbr_of_shards</constant>
    property as seen in <xref linkend="example-index-sharding"/>. In this
    example 5 shards are enabled.</para>

    <example id="example-index-sharding">
      <title>Enabling index sharding</title>

      <programlisting>hibernate.search.&lt;indexName&gt;.sharding_strategy.nbr_of_shards = 5</programlisting>
    </example>

    <para>Responsible for splitting the data into sub-indexes is the
    <classname>IndexShardingStrategy</classname>. The default sharding
    strategy splits the data according to the hash value of the id string
    representation (generated by the <classname>FieldBridge</classname>). This
    ensures a fairly balanced sharding. You can replace the default strategy
    by implementing a custom <classname>IndexShardingStrategy</classname>. To
    use your custom strategy you have to set the
    <constant>hibernate.search.&lt;indexName&gt;.sharding_strategy</constant>
    property.</para>

    <example>
      <title>Specifying a custom sharding strategy</title>

      <programlisting>hibernate.search.&lt;indexName&gt;.sharding_strategy = my.shardingstrategy.Implementation</programlisting>
    </example>

    <para>The <classname>IndexShardingStrategy</classname> also allows for
    optimizing searches by selecting which shard to run the query against. By
    activating a filter (see <xref linkend="query-filter-shard"/>), a sharding
    strategy can select a subset of the shards used to answer a query
    (<classname>IndexShardingStrategy.getIndexManagersForQuery</classname>)
    and thus speed up the query execution.</para>

    <para>Each shard has an independent <classname>IndexManager</classname>
    and so can be configured to use a different directory provider and backend
    configurations. The <classname>IndexManager</classname> index names for
    the Animal entity in <xref linkend="example-sharding-configuration"/> are
    <literal>Animal.0</literal> to <literal>Animal.4</literal>. In other
    words, each shard has the name of it's owning index followed by
    <constant>.</constant> (dot) and its index number (see also <xref
    linkend="search-configuration-directory"/>).</para>

    <example id="example-sharding-configuration">
      <title>Sharding configuration for entity
      <classname>Animal</classname></title>

      <programlisting>hibernate.search.default.indexBase = /usr/lucene/indexes

hibernate.search.Animal.sharding_strategy.nbr_of_shards = 5
hibernate.search.Animal.directory_provider = filesystem
hibernate.search.Animal.0.indexName = Animal00
hibernate.search.Animal.3.indexBase = /usr/lucene/sharded
hibernate.search.Animal.3.indexName = Animal03</programlisting>
    </example>

    <para>In <xref linkend="example-sharding-configuration"/>, the
    configuration uses the default id string hashing strategy and shards the
    <classname>Animal</classname> index into 5 sub-indexes. All sub-indexes
    are filesystem instances and the directory where each sub-index is stored
    is as followed:</para>

    <itemizedlist>
      <listitem>
        <para>for sub-index 0:
        <filename>/usr/lucene/indexes/Animal00</filename> (shared indexBase
        but overridden indexName)</para>
      </listitem>

      <listitem>
        <para>for sub-index 1:
        <filename>/usr/lucene/indexes/Animal.1</filename> (shared indexBase,
        default indexName)</para>
      </listitem>

      <listitem>
        <para>for sub-index 2:
        <filename>/usr/lucene/indexes/Animal.2</filename> (shared indexBase,
        default indexName)</para>
      </listitem>

      <listitem>
        <para>for sub-index 3:
        <filename>/usr/lucene/shared/Animal03</filename> (overridden
        indexBase, overridden indexName)</para>
      </listitem>

      <listitem>
        <para>for sub-index 4:
        <filename>/usr/lucene/indexes/Animal.4</filename> (shared indexBase,
        default indexName)</para>
      </listitem>
    </itemizedlist>

    <para>When implementing a <classname>IndexShardingStrategy</classname> any
    field can be used to determine the sharding selection. Consider that to
    handle deletions, <literal>purge</literal> and <literal>purgeAll</literal>
    operations, the implementation might need to return one or more indexes
    without being able to read all the field values or the primary identifier;
    in case the information is not enough to pick a single index, all indexes
    should be returned, so that the delete operation will be propagated to all
    indexes potentially containing the documents to be deleted.</para>
  </section>

  <section id="section-sharing-indexes">
    <title>Sharing indexes</title>

    <para>It is technically possible to store the information of more than one
    entity into a single Lucene index. There are two ways to accomplish
    this:</para>

    <itemizedlist>
      <listitem>
        <para>Configuring the underlying directory providers to point to the
        same physical index directory. In practice, you set the property
        <literal>hibernate.search.[fully qualified entity
        name].indexName</literal> to the same value. As an example let’s use
        the same index (directory) for the <classname>Furniture</classname>
        and <classname>Animal</classname> entity. We just set
        <literal>indexName</literal> for both entities to for example
        “Animal”. Both entities will then be stored in the Animal
        directory.</para>

        <para><programlisting>hibernate.search.org.hibernate.search.test.shards.Furniture.indexName = Animal
hibernate.search.org.hibernate.search.test.shards.Animal.indexName = Animal</programlisting></para>
      </listitem>

      <listitem>
        <para>Setting the <code>@Indexed</code> annotation’s
        <methodname>index</methodname> attribute of the entities you want to
        merge to the same value. If we again wanted all
        <classname>Furniture</classname> instances to be indexed in the
        <classname>Animal</classname> index along with all instances of
        <classname>Animal</classname> we would specify
        <code>@Indexed(index="Animal")</code> on both
        <classname>Animal</classname> and <classname>Furniture</classname>
        classes.<note>
            <para>This is only presented here so that you know the option is
            available. There is really not much benefit in sharing
            indexes.</para>
          </note></para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Using external services</title>

    <para>Any of the pluggable contracts we have seen so far allows for the
    injection of a service. The most notable example being the
    <classname>DirectoryProvider</classname>. The full list is:</para>

    <itemizedlist>
      <listitem>
        <para><classname>DirectoryProvider</classname></para>
      </listitem>

      <listitem>
        <para><classname>ReaderProvider</classname></para>
      </listitem>

      <listitem>
        <para><classname>OptimizerStrategy</classname></para>
      </listitem>

      <listitem>
        <para><classname>BackendQueueProcessor</classname></para>
      </listitem>

      <listitem>
        <para><classname>Worker</classname></para>
      </listitem>

      <listitem>
        <para><classname>ErrorHandler</classname></para>
      </listitem>

      <listitem>
        <para><classname>MassIndexerProgressMonitor</classname></para>
      </listitem>
    </itemizedlist>

    <para>Some of these components need to access a service which is either
    available in the environment or whose lifecycle is bound to the
    <classname>SearchFactory</classname>. Sometimes, you even want the same
    service to be shared amongst several instances of these contract. One
    example is the ability the share an Infinispan cache instance between
    several directory providers running in different <literal>JVM</literal>s
    to store the various indexes using the same underlying infrastructure;
    this provides real-time replication of indexes across nodes.</para>

    <section>
      <title>Exposing a service</title>

      <para>To expose a service, you need to implement
      <classname>org.hibernate.search.spi.ServiceProvider&lt;T&gt;</classname>.
      <classname>T</classname> is the type of the service you want to use.
      Services are retrieved by components via their
      <classname>ServiceProvider</classname> class implementation.</para>

      <section>
        <title>Managed services</title>

        <para>If your service ought to be started when Hibernate Search starts
        and stopped when Hibernate Search stops, you can use a managed
        service. Make sure to properly implement the
        <methodname>start</methodname> and <methodname>stop</methodname>
        methods of <classname>ServiceProvider</classname>. When the service is
        requested, the <methodname>getService</methodname> method is
        called.</para>

        <example>
          <title>Example of ServiceProvider implementation</title>

          <programlisting language="JAVA" role="JAVA">public class CacheServiceProvider implements ServiceProvider&lt;Cache&gt; {
    private CacheManager manager;

    public void start(Properties properties) {
        //read configuration
        manager = new CacheManager(properties);
    }

    public Cache getService() {
        return manager.getCache(DEFAULT);
    }

    void stop() {
        manager.close();
    }
}</programlisting>
        </example>

        <note>
          <para>The <classname>ServiceProvider</classname> implementation must
          have a no-arg constructor.</para>
        </note>

        <para>To be transparently discoverable, such service should have an
        accompanying
        <filename>META-INF/services/org.hibernate.search.spi.ServiceProvider</filename>
        whose content list the (various) service provider
        implementation(s).</para>

        <example>
          <title>Content of
          META-INF/services/org.hibernate.search.spi.ServiceProvider</title>

          <programlisting>com.acme.infra.hibernate.CacheServiceProvider</programlisting>
        </example>
      </section>

      <section>
        <title>Provided services</title>

        <para>Alternatively, the service can be provided by the environment
        bootstrapping Hibernate Search. For example, Infinispan which uses
        Hibernate Search as its internal search engine can pass the
        <classname>CacheContainer</classname> to Hibernate Search. In this
        case, the <classname>CacheContainer</classname> instance is not
        managed by Hibernate Search and the
        <methodname>start</methodname>/<methodname>stop</methodname> methods
        of its corresponding service provider will not be used.</para>

        <note>
          <para>Provided services have priority over managed services. If a
          provider service is registered with the same
          <classname>ServiceProvider</classname> class as a managed service,
          the provided service will be used.</para>
        </note>

        <para>The provided services are passed to Hibernate Search via the
        <classname>SearchConfiguration</classname> interface
        (<methodname>getProvidedServices</methodname>).</para>

        <important>
          <para>Provided services are used by frameworks controlling the
          lifecycle of Hibernate Search and not by traditional users.</para>
        </important>

        <para>If, as a user, you want to retrieve a service instance from the
        environment, use registry services like JNDI and look the service up
        in the provider.</para>
      </section>
    </section>

    <section>
      <title>Using a service</title>

      <para>Many of of the pluggable contracts of Hibernate Search can use
      services. Services are accessible via the
      <classname>BuildContext</classname> interface.</para>

      <example>
        <title>Example of a directory provider using a cache service</title>

        <programlisting language="JAVA" role="JAVA">public CustomDirectoryProvider implements DirectoryProvider&lt;RAMDirectory&gt; {
    private BuildContext context;

    public void initialize(
        String directoryProviderName, 
        Properties properties, 
        BuildContext context) {
        //initialize
        this.context = context;
    }

    public void start() {
        Cache cache = context.requestService( CacheServiceProvider.class );
        //use cache
    }

    public RAMDirectory getDirectory() {
        // use cache
    }

    public stop() {
        //stop services
        context.releaseService( CacheServiceProvider.class );
    } 
}</programlisting>
      </example>

      <para>When you request a service, an instance of the service is served
      to you. Make sure to then release the service. This is fundamental. Note
      that the service can be released in the
      <methodname>DirectoryProvider.stop</methodname> method if the
      <classname>DirectoryProvider</classname> uses the service during its
      lifetime or could be released right away of the service is simply used
      at initialization time.</para>
    </section>
  </section>

  <section>
    <title>Customizing Lucene's scoring formula</title>

    <para>Lucene allows the user to customize its scoring formula by extending
    <classname>org.apache.lucene.search.Similarity</classname>. The abstract
    methods defined in this class match the factors of the following formula
    calculating the score of query q for document d:</para>

    <para><emphasis role="bold">score(q,d) = coord(q,d) · queryNorm(q) · ∑
    <subscript>t in q</subscript> ( tf(t in d) · idf(t)
    <superscript>2</superscript> · t.getBoost() · norm(t,d) )
    </emphasis></para>

    <para><informaltable align="left" width="">
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Factor</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry align="left">tf(t ind)</entry>

              <entry>Term frequency factor for the term (t) in the document
              (d).</entry>
            </row>

            <row>
              <entry align="left">idf(t)</entry>

              <entry>Inverse document frequency of the term.</entry>
            </row>

            <row>
              <entry align="left">coord(q,d)</entry>

              <entry>Score factor based on how many of the query terms are
              found in the specified document.</entry>
            </row>

            <row>
              <entry align="left">queryNorm(q)</entry>

              <entry>Normalizing factor used to make scores between queries
              comparable.</entry>
            </row>

            <row>
              <entry align="left">t.getBoost()</entry>

              <entry>Field boost.</entry>
            </row>

            <row>
              <entry align="left">norm(t,d)</entry>

              <entry>Encapsulates a few (indexing time) boost and length
              factors.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>It is beyond the scope of this manual to explain this
    formula in more detail. Please refer to
    <classname>Similarity</classname>'s Javadocs for more information.</para>

    <para>Hibernate Search provides three ways to modify Lucene's similarity
    calculation.</para>

    <para>First you can set the default similarity by specifying the fully
    specified classname of your <classname>Similarity</classname>
    implementation using the property
    <constant>hibernate.search.similarity</constant>. The default value is
    <classname>org.apache.lucene.search.DefaultSimilarity</classname>.</para>

    <para>You can also override the similarity used for a specific index by
    setting the <literal>similarity</literal> property</para>

    <programlisting>hibernate.search.default.similarity = my.custom.Similarity</programlisting>

    <para>Finally you can override the default similarity on class level using
    the <literal>@Similarity</literal> annotation. <programlisting>@Entity
@Indexed
<emphasis role="bold">@Similarity(impl = DummySimilarity.class)</emphasis>
public class Book {
...
}           </programlisting> As an example, let's assume it is not important
    how often a term appears in a document. Documents with a single occurrence
    of the term should be scored the same as documents with multiple
    occurrences. In this case your custom implementation of the method
    <methodname>tf(float freq) </methodname> should return 1.0.</para>

    <warning>
      <para>When two entities share the same index they must declare the same
      <classname>Similarity</classname> implementation. Classes in the same
      class hierarchy always share the index, so it's not allowed to override
      the <classname>Similarity</classname> implementation in a
      subtype.</para>

      <para>Likewise, it does not make sense to define the similarity via the
      index setting and the class-level setting as they would conflict. Such a
      configuration will be rejected.</para>
    </warning>
  </section>
</chapter>
