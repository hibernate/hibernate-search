<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~  Copyright (c) 2010, Red Hat, Inc. and/or its affiliates or third-party contributors as
  ~  indicated by the @author tags or express copyright attribution
  ~  statements applied by the authors.  All third-party contributions are
  ~  distributed under license by Red Hat, Inc.
  ~
  ~  This copyrighted material is made available to anyone wishing to use, modify,
  ~  copy, or redistribute it subject to the terms and conditions of the GNU
  ~  Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~  This program is distributed in the hope that it will be useful,
  ~  but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~  for more details.
  ~
  ~  You should have received a copy of the GNU Lesser General Public License
  ~  along with this distribution; if not, write to:
  ~  Free Software Foundation, Inc.
  ~  51 Franklin Street, Fifth Floor
  ~  Boston, MA  02110-1301  USA
  -->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../hsearch.ent">
%BOOK_ENTITIES;
]>
<chapter id="getting-started">
  <title>Getting started</title>

  <para>Welcome to Hibernate Search. The following chapter will guide you
  through the initial steps required to integrate Hibernate Search into an
  existing Hibernate enabled application. In case you are a Hibernate new
  timer we recommend you start <ulink
  url="http://hibernate.org/quick-start.html">here</ulink>.</para>

  <section>
    <title>System Requirements</title>

    <table>
      <title>System requirements</title>

      <tgroup cols="2">
        <tbody>
          <row>
            <entry>Java Runtime</entry>

            <entry>A JDK or JRE version <emphasis>6</emphasis> or greater. You
            can download a Java Runtime for Windows/Linux/Solaris <ulink
            url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">here</ulink>.
            If using Java version <emphasis>7</emphasis> make sure you avoid
            builds 0 and 1: those versions contained an optimisation bug which
            would be triggered by Lucene. Hibernate Search 3.x was compatible
            with Java version <emphasis>5</emphasis>.</entry>
          </row>

          <row>
            <entry>Hibernate Search</entry>

            <entry><literal>hibernate-search-&version;.jar</literal> and all
            runtime dependencies. You can get the jar artifacts either from
            the <literal>dist/lib</literal> directory of the <ulink
            url="http://sourceforge.net/projects/hibernate/files/hibernate-search/">Hibernate
            Search distribution</ulink> or you can download them from the
            <ulink
            url="http://repository.jboss.org/nexus/content/groups/public-jboss/ ">JBoss
            maven repository</ulink>.</entry>
          </row>

          <row>
            <entry>Hibernate Core</entry>

            <entry>These instructions have been tested against Hibernate 4.1.
            You will need
            <literal>hibernate-core-&hibernateVersion;.jar</literal> and its
            transitive dependencies (either from the <ulink
            url="http://sourceforge.net/projects/hibernate/files/hibernate3/">distribution
            bundle</ulink> or the maven repository).</entry>
          </row>

          <row>
            <entry>JPA 2</entry>

            <entry>Even though Hibernate Search can be used without JPA
            annotations the following instructions will use them for basic
            entity configuration (<emphasis>@Entity, @Id,
            @OneToMany,...</emphasis>). This part of the configuration could
            also be expressed in xml or code. <para>Hibernate Search, however,
            has also its own set of annotations (<emphasis>@Indexed,
            @DocumentId, @Field,...</emphasis>) for which there exists so far
            no XML based alternative; a better option is the <xref
            linkend="hsearch-mapping-programmaticapi"/>.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section>
    <title>Using Maven</title>

    <para>The Hibernate Search artifacts can be found in Maven's central
    repository but are released first in the <ulink
    url="http://repository.jboss.org/nexus/content/groups/public-jboss/ ">JBoss
    maven repository</ulink>. So it's not a requirement but we recommend to
    add this repository to your <filename>settings.xml file</filename> (see
    also <ulink
    url="http://community.jboss.org/wiki/MavenGettingStarted-Users">Maven
    Getting Started</ulink> for more details).</para>

    <para>This is all you need to add to your pom.xml to get started:</para>

    <example>
      <title>Maven artifact identifier for Hibernate Search</title>

      <programlisting language="XML" role="XML">&lt;dependency&gt;
   &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
   &lt;artifactId&gt;hibernate-search&lt;/artifactId&gt;
   &lt;version&gt;&version;&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
    </example>

    <example>
      <title>Optional Maven dependencies for Hibernate Search</title>

      <programlisting language="XML" role="XML">&lt;dependency&gt;
&lt;!-- If using JPA (2), add: --&gt;
&lt;dependency&gt;
   &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
   &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt;
   &lt;version&gt;&hibernateVersion;&lt;/version&gt;
&lt;/dependency&gt;
&lt;!-- Additional Analyzers: --&gt;
&lt;dependency&gt;
   &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
   &lt;artifactId&gt;hibernate-search-analyzers&lt;/artifactId&gt;
   &lt;version&gt;&version;&lt;/version&gt;
&lt;/dependency&gt;
&lt;!-- Infinispan integration: --&gt;
&lt;dependency&gt;
   &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
   &lt;artifactId&gt;hibernate-search-infinispan&lt;/artifactId&gt;
   &lt;version&gt;&version;&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
    </example>

    <para>Only the <emphasis>hibernate-search</emphasis> dependency is
    mandatory.<emphasis> hibernate-entitymanager</emphasis> is only required
    if you want to use Hibernate Search in conjunction with JPA.</para>

    <para>To use <emphasis>hibernate-search-infinispan</emphasis>, adding the
    JBoss Maven repository is mandatory, because it contains the needed
    Infinispan dependencies which are currently not mirrored by
    <literal>central</literal>.</para>

    <section>
      <title>Using a Maven Archetype</title>

      <para>Using a Maven Archetype it is possible to generate a Maven project
      from scratch, already containing the basic configuration files and some
      sample code and tests. Most development environments integrating maven
      support a graphical option to do this; the <literal>groupId</literal> is
      <literal>org.hibernate</literal> and the <literal>artifactId</literal>
      is <literal>hibernate-search-quickstart</literal></para>

      <example>
        <title>Generating a sample project using the Maven Archetype</title>

        <programlisting>
mvn archetype:generate                                 \
   -DarchetypeGroupId=org.hibernate                    \
   -DarchetypeArtifactId=hibernate-search-quickstart   \
   -DarchetypeVersion=&version;                          \
   -DarchetypeRepository=http://repository.jboss.org/nexus/content/groups/public-jboss/
</programlisting>
      </example>
    </section>
  </section>

  <section>
    <title>Configuration</title>

    <para>Once you have downloaded and added all required dependencies to your
    application you have to add a couple of properties to your hibernate
    configuration file. If you are using Hibernate directly this can be done
    in <literal>hibernate.properties</literal> or
    <literal>hibernate.cfg.xml</literal>. If you are using Hibernate via JPA
    you can also add the properties to <literal>persistence.xml</literal>. The
    good news is that for standard use most properties offer a sensible
    default. An example <filename>persistence.xml</filename> configuration
    could look like this:</para>

    <example>
      <title>Basic configuration options to be added to
      <literal><filename>hibernate.properties</filename></literal>,
      <literal><filename>hibernate.cfg.xml</filename></literal> or
      <filename>persistence.xml</filename></title>

      <programlisting language="XML" role="XML">...
&lt;property name="hibernate.search.default.directory_provider" 
          value="filesystem"/&gt; 

&lt;property name="hibernate.search.default.indexBase" 
          value="/var/lucene/indexes"/&gt; 
...    </programlisting>
    </example>

    <para>First you have to tell Hibernate Search which
    <classname>DirectoryProvider</classname> to use. This can be achieved by
    setting the <literal>hibernate.search.default.directory_provider</literal>
    property. Apache Lucene has the notion of a <literal>Directory</literal>
    to store the index files. Hibernate Search handles the initialization and
    configuration of a Lucene <literal>Directory</literal> instance via a
    <literal>DirectoryProvider</literal>. In this tutorial we will use a a
    directory provider storing the index in the file system. This will give us
    the ability to physically inspect the Lucene indexes created by Hibernate
    Search (eg via <ulink url="http://code.google.com/p/luke/">Luke</ulink>).
    Once you have a working configuration you can start experimenting with
    other directory providers (see <xref
    linkend="search-configuration-directory"/>). Next to the directory
    provider you also have to specify the default base directory for all
    indexes via <literal>hibernate.search.default.indexBase</literal>.</para>

    <para>Lets assume that your application contains the Hibernate managed
    classes <classname>example.Book</classname> and
    <classname>example.Author</classname> and you want to add free text search
    capabilities to your application in order to search the books contained in
    your database.</para>

    <example>
      <title>Example entities Book and Author before adding Hibernate Search
      specific annotations</title>

      <programlisting language="JAVA" role="JAVA">package example;
...
@Entity
public class Book {

  @Id
  @GeneratedValue
  private Integer id; 

  private String title;  

  private String subtitle; 

  @ManyToMany 
  private Set&lt;Author&gt; authors = new HashSet&lt;Author&gt;();

  private Date publicationDate;
  
  public Book() {} 
  
  // standard getters/setters follow here
  ...
}</programlisting>

      <programlisting language="JAVA" role="JAVA">package example;
...
@Entity
public class Author {

  @Id
  @GeneratedValue
  private Integer id;

  private String name;

  public Author() {} 
 
  // standard getters/setters follow here
  ...
}</programlisting>
    </example>

    <para>To achieve this you have to add a few annotations to the
    <classname>Book</classname> and <classname>Author</classname> class. The
    first annotation <literal>@Indexed</literal> marks
    <classname>Book</classname> as indexable. By design Hibernate Search needs
    to store an untokenized id in the index to ensure index unicity for a
    given entity. <literal>@DocumentId</literal> marks the property to use for
    this purpose and is in most cases the same as the database primary key.
    The <literal>@DocumentId</literal> annotation is optional in the case
    where an <classname>@Id</classname> annotation exists.</para>

    <para>Next you have to mark the fields you want to make searchable. Let's
    start with <literal>title</literal> and <literal>subtitle</literal> and
    annotate both with <literal>@Field</literal>. The parameter
    <literal>index=Index.YES</literal> will ensure that the text will be
    indexed, while <literal>analyze=Analyze.YES</literal> ensures that the
    text will be analyzed using the default Lucene analyzer. Usually,
    analyzing means chunking a sentence into individual words and potentially
    excluding common words like <literal>'a'</literal> or
    '<literal>the</literal>'. We will talk more about analyzers a little later
    on. The third parameter we specify within
    <literal>@Field</literal>,<literal> store=Store.NO</literal>, ensures that
    the actual data will not be stored in the index. Whether this data is
    stored in the index or not has nothing to do with the ability to search
    for it. From Lucene's perspective it is not necessary to keep the data
    once the index is created. The benefit of storing it is the ability to
    retrieve it via projections ( see <xref linkend="projections"/>).</para>

    <para>Without projections, Hibernate Search will per default execute a
    Lucene query in order to find the database identifiers of the entities
    matching the query critera and use these identifiers to retrieve managed
    objects from the database. The decision for or against projection has to
    be made on a case to case basis. The default behaviour is recommended
    since it returns managed objects whereas projections only return object
    arrays.</para>

    <para>Note that <literal>index=Index.YES</literal>,
    <literal>analyze=Analyze.YES</literal> and
    <literal>store=Store.NO</literal> are the default values for these
    paramters and could be ommited.</para>

    <para>After this short look under the hood let's go back to annotating the
    <classname>Book</classname> class. Another annotation we have not yet
    discussed is <literal>@DateBridge</literal>. This annotation is one of the
    built-in field bridges in Hibernate Search. The Lucene index is purely
    string based. For this reason Hibernate Search must convert the data types
    of the indexed fields to strings and vice versa. A range of predefined
    bridges are provided, including the <classname>DateBridge</classname>
    which will convert a <classname>java.util.Date</classname> into a
    <classname>String</classname> with the specified resolution. For more
    details see <xref linkend="search-mapping-bridge"/>.</para>

    <para>This leaves us with <literal>@IndexedEmbedded. </literal>This
    annotation is used to index associated entities
    (<literal>@ManyToMany</literal>, <literal>@*ToOne</literal>,
    <literal>@Embedded</literal> and <literal>@ElementCollection</literal>) as
    part of the owning entity. This is needed since a Lucene index document is
    a flat data structure which does not know anything about object relations.
    To ensure that the authors' name will be searchable you have to make sure
    that the names are indexed as part of the book itself. On top of
    <literal>@IndexedEmbedded</literal> you will also have to mark all fields
    of the associated entity you want to have included in the index with
    <literal>@Indexed</literal>. For more details see <xref
    linkend="search-mapping-associated"/>.</para>

    <para>These settings should be sufficient for now. For more details on
    entity mapping refer to <xref linkend="search-mapping-entity"/>.</para>

    <example>
      <title>Example entities after adding Hibernate Search
      annotations</title>

      <programlisting language="JAVA" role="JAVA">package example;
...
@Entity
<emphasis role="bold">@Indexed</emphasis>
public class Book {

  @Id
  @GeneratedValue
  private Integer id;
  
  <emphasis role="bold">@Field(index=Index.YES, analyze=Analyze.YES, store=Store.NO)</emphasis>
  private String title;
  
  <emphasis role="bold">@Field(index=Index.YES, analyze=Analyze.YES, store=Store.NO)</emphasis>
  private String subtitle; 

<emphasis role="bold">  @Field(index = Index.YES, analyze=Analyze.NO, store = Store.YES)
  @DateBridge(resolution = Resolution.DAY)</emphasis>
  private Date publicationDate;

  <emphasis role="bold">@IndexedEmbedded</emphasis>
  @ManyToMany 
  private Set&lt;Author&gt; authors = new HashSet&lt;Author&gt;();
<emphasis role="bold"/>
  public Book() {
  } 
  
  // standard getters/setters follow here
  ... 
}</programlisting>

      <programlisting language="JAVA" role="JAVA">package example;
...
@Entity
public class Author {

  @Id
  @GeneratedValue
  private Integer id;

  <emphasis role="bold">@Field</emphasis>
  private String name;

  public Author() {
  } 
 
  // standard getters/setters follow here
  ...
}</programlisting>
    </example>
  </section>

  <section>
    <title>Indexing</title>

    <para>Hibernate Search will transparently index every entity persisted,
    updated or removed through Hibernate Core. However, you have to create an
    initial Lucene index for the data already present in your database. Once
    you have added the above properties and annotations it is time to trigger
    an initial batch index of your books. You can achieve this by using one of
    the following code snippets (see also <xref
    linkend="search-batchindex"/>):</para>

    <example>
      <title>Using Hibernate Session to index data</title>

      <programlisting language="JAVA" role="JAVA">FullTextSession fullTextSession = Search.getFullTextSession(session);
fullTextSession.createIndexer().startAndWait();</programlisting>
    </example>

    <example>
      <title>Using JPA to index data</title>

      <programlisting language="JAVA" role="JAVA">EntityManager em = entityManagerFactory.createEntityManager();
FullTextEntityManager fullTextEntityManager = Search.getFullTextEntityManager(em);
fullTextEntityManager.createIndexer().startAndWait();</programlisting>
    </example>

    <para>After executing the above code, you should be able to see a Lucene
    index under <literal>/var/lucene/indexes/example.Book</literal>. Go ahead
    an inspect this index with <ulink
    url="http://code.google.com/p/luke/">Luke</ulink>. It will help you to
    understand how Hibernate Search works.</para>
  </section>

  <section>
    <title>Searching</title>

    <para>Now it is time to execute a first search. The general approach is to
    create a Lucene query (either via the Lucene API (<xref
    linkend="search-query-lucene-api"/>) or via the Hibernate Search query DSL
    (<xref linkend="search-query-querydsl"/>)) and then wrap this query into a
    <classname>org.hibernate.Query</classname> in order to get all the
    functionality one is used to from the Hibernate API. The following code
    will prepare a query against the indexed fields, execute it and return a
    list of <classname>Book</classname>s.</para>

    <example>
      <title>Using Hibernate Session to create and execute a search</title>

      <programlisting language="JAVA" role="JAVA">FullTextSession fullTextSession = Search.getFullTextSession(session);
Transaction tx = fullTextSession.beginTransaction();

// create native Lucene query unsing the query DSL
// alternatively you can write the Lucene query using the Lucene query parser
// or the Lucene programmatic API. The Hibernate Search DSL is recommended though
QueryBuilder qb = fullTextSession.getSearchFactory()
    .buildQueryBuilder().forEntity( Book.class ).get();
org.apache.lucene.search.Query query = qb
  .keyword()
  .onFields("title", "subtitle", "authors.name")
  .matching("Java rocks!")
  .createQuery();

// wrap Lucene query in a org.hibernate.Query
org.hibernate.Query hibQuery = 
    fullTextSession.createFullTextQuery(query, Book.class);

// execute search
List result = hibQuery.list();
  
tx.commit();
session.close();</programlisting>
    </example>

    <example>
      <title>Using JPA to create and execute a search</title>

      <programlisting language="JAVA" role="JAVA">EntityManager em = entityManagerFactory.createEntityManager();
FullTextEntityManager fullTextEntityManager = 
    org.hibernate.search.jpa.Search.getFullTextEntityManager(em);
em.getTransaction().begin();

// create native Lucene query unsing the query DSL
// alternatively you can write the Lucene query using the Lucene query parser
// or the Lucene programmatic API. The Hibernate Search DSL is recommended though
QueryBuilder qb = fullTextEntityManager.getSearchFactory()
    .buildQueryBuilder().forEntity( Book.class ).get();
org.apache.lucene.search.Query query = qb
  .keyword()
  .onFields("title", "subtitle", "authors.name")
  .matching("Java rocks!")
  .createQuery();

// wrap Lucene query in a javax.persistence.Query
javax.persistence.Query persistenceQuery = 
    fullTextEntityManager.createFullTextQuery(query, Book.class);

// execute search
List result = persistenceQuery.getResultList();

em.getTransaction().commit();
em.close();</programlisting>
    </example>
  </section>

  <section>
    <title>Analyzer</title>

    <para>Let's make things a little more interesting now. Assume that one of
    your indexed book entities has the title "Refactoring: Improving the
    Design of Existing Code" and you want to get hits for all of the following
    queries: "refactor", "refactors", "refactored" and "refactoring". In
    Lucene this can be achieved by choosing an analyzer class which applies
    word stemming during the indexing <emphasis role="bold">as well
    as</emphasis> the search process. Hibernate Search offers several ways to
    configure the analyzer to be used (see <xref linkend="analyzer"/>):</para>

    <itemizedlist>
      <listitem>
        <para>Setting the <literal>hibernate.search.analyzer</literal>
        property in the configuration file. The specified class will then be
        the default analyzer.</para>
      </listitem>

      <listitem>
        <para>Setting the <literal><literal>@Analyzer</literal></literal>
        annotation at the entity level.</para>
      </listitem>

      <listitem>
        <para>Setting the <literal>@<literal>Analyzer</literal></literal>
        annotation at the field level.</para>
      </listitem>
    </itemizedlist>

    <para>When using the <literal>@Analyzer</literal> annotation one can
    either specify the fully qualified classname of the analyzer to use or one
    can refer to an analyzer definition defined by the
    <literal>@AnalyzerDef</literal> annotation. In the latter case the Solr
    analyzer framework with its factories approach is utilized. To find out
    more about the factory classes available you can either browse the Solr
    JavaDoc or read the corresponding section on the <ulink
    url="http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters">Solr
    Wiki.</ulink></para>

    <para>In the example below a
    <classname>StandardTokenizerFactory</classname> is used followed by two
    filter factories, <classname>LowerCaseFilterFactory</classname> and
    <classname>SnowballPorterFilterFactory</classname>. The standard tokenizer
    splits words at punctuation characters and hyphens while keeping email
    addresses and internet hostnames intact. It is a good general purpose
    tokenizer. The lowercase filter lowercases the letters in each token
    whereas the snowball filter finally applies language specific
    stemming.</para>

    <para>Generally, when using the Solr framework you have to start with a
    tokenizer followed by an arbitrary number of filters.</para>

    <example>
      <title>Using <classname>@AnalyzerDef</classname> and the Solr framework
      to define and use an analyzer</title>

      <programlisting language="JAVA" role="JAVA">@Entity
@Indexed
<emphasis role="bold">@AnalyzerDef(name = "customanalyzer",
  tokenizer = @TokenizerDef(factory = StandardTokenizerFactory.class),
  filters = {
    @TokenFilterDef(factory = LowerCaseFilterFactory.class),
    @TokenFilterDef(factory = SnowballPorterFilterFactory.class, params = {
      @Parameter(name = "language", value = "English")
    })
  })</emphasis>
public class Book {

  @Id
  @GeneratedValue
  @DocumentId
  private Integer id;
  
  @Field
  <emphasis role="bold">@Analyzer(definition = "customanalyzer")</emphasis>
  private String title;
  
  @Field
  <emphasis role="bold">@Analyzer(definition = "customanalyzer")</emphasis>
  private String subtitle; 

  @IndexedEmbedded
  @ManyToMany 
  private Set&lt;Author&gt; authors = new HashSet&lt;Author&gt;();

<emphasis role="bold"> </emphasis> @Field(index = Index.YES, analyze = Analyze.NO, store = Store.YES)
  @DateBridge(resolution = Resolution.DAY)
  private Date publicationDate;
  
  public Book() {
  } 
  
  // standard getters/setters follow here
  ... 
}</programlisting>
    </example>

    <para>Using <classname>@AnalyzerDef</classname> only defines an Analyzer,
    you still have to apply it to entities and or properties using
    <classname>@Analyzer</classname>. Like in the above example the
    <literal>customanalyzer</literal> is defined but not applied on the
    entity: it's applied on the <literal>title</literal> and
    <literal>subtitle</literal> properties only. An analyzer definition is
    global, so you can define it on any entity and reuse the definition on
    other entities.</para>
  </section>

  <section>
    <title>What's next</title>

    <para>The above paragraphs helped you getting an overview of Hibernate
    Search. The next step after this tutorial is to get more familiar with the
    overall architecture of Hibernate Search (<xref
    linkend="search-architecture"/>) and explore the basic features in more
    detail. Two topics which were only briefly touched in this tutorial were
    analyzer configuration (<xref linkend="analyzer"/>) and field bridges
    (<xref linkend="search-mapping-bridge"/>). Both are important features
    required for more fine-grained indexing. More advanced topics cover
    clustering (<xref linkend="jms-backend"/>, <xref
    linkend="infinispan-directories"/>) and large index handling (<xref
    linkend="search-configuration-directory-sharding"/>).</para>
  </section>
</chapter>
