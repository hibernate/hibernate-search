<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~ Hibernate Search, full-text search for your domain model
 ~
 ~ License: GNU Lesser General Public License (LGPL), version 2.1 or later
 ~ See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>hibernate-search-parent</artifactId>
        <groupId>org.hibernate</groupId>
        <version>5.11.0-SNAPSHOT</version>
        <relativePath>../../pom.xml</relativePath>
    </parent>

    <artifactId>hibernate-search-integrationtest-wildfly</artifactId>

    <name>Hibernate Search WildFly Integration Tests</name>
    <description>Hibernate Search integration tests for WildFly</description>

    <properties>
        <!--
        Disable the dependency convergence rule, because the dependencies of WildFly feature packs do not converge
        -->
        <enforcer.dependencyconvergence.skip>true</enforcer.dependencyconvergence.skip>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <byteman.agent.path>${org.jboss.byteman:byteman:jar}</byteman.agent.path>
        <byteman.agent.options>script:${basedir}${file.separator}src${file.separator}test${file.separator}resources${file.separator}disablejpadapters.btm,script:${basedir}${file.separator}src${file.separator}test${file.separator}resources${file.separator}jsr352${file.separator}JobInterruptor.btm</byteman.agent.options>
        <test.module-slot.org.hibernate.search>main</test.module-slot.org.hibernate.search>
        <test.module-slot.org.hibernate>${parsed-version.org.hibernate.majorVersion}.${parsed-version.org.hibernate.minorVersion}</test.module-slot.org.hibernate>

        <!--
            Relax the JVM restrictions on the client side of Arquillian:
            strict restrictions wouldn't work and it's not what we want to check.
         -->
        <surefire.jvm.args.java-version>${surefire.jvm.args.java-version.lenient}</surefire.jvm.args.java-version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- We override the version of ShrinkWrap Maven Resolver from Arquillian BOM:
             this section must be declared before the Arquillian bom import -->
            <dependency>
                <groupId>org.jboss.shrinkwrap.resolver</groupId>
                <artifactId>shrinkwrap-resolver-bom</artifactId>
                <version>${version.org.jboss.shrinkwrap.resolver}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- Imports compatible versions for each Arquillian module -->
            <dependency>
                <groupId>org.jboss.arquillian</groupId>
                <artifactId>arquillian-bom</artifactId>
                <version>${version.org.jboss.arquillian}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- Hibernate -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-search-orm</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-search-testing</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-search-backend-jms</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-search-elasticsearch</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-search-jsr352-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-search-jsr352-core</artifactId>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>javax.batch</groupId>
            <artifactId>javax.batch-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Take the JGroups testing configuration files from our base tests -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-search-backend-jgroups</artifactId>
            <version>${project.version}</version>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>

        <!-- Tika -->
        <dependency>
            <groupId>org.apache.tika</groupId>
            <artifactId>tika-parsers</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- test -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-container</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap.resolver</groupId>
            <artifactId>shrinkwrap-resolver-depchain</artifactId>
            <scope>test</scope>
            <type>pom</type>
        </dependency>
        <dependency>
            <groupId>org.wildfly.arquillian</groupId>
            <artifactId>wildfly-arquillian-container-managed</artifactId>
            <version>${version.org.wildfly.arquillian}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.jboss.logmanager</groupId>
                    <artifactId>jboss-logmanager</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.jboss.logmanager</groupId>
                    <artifactId>log4j-jboss-logmanager</artifactId>
                </exclusion>
                <!-- This exclusion is needed to be able to setup the project in Windows:
                     it otherwise includes transitive dependency to the JDK JConsole -->
                <exclusion>
                    <artifactId>wildfly-patching</artifactId>
                    <groupId>org.wildfly</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap.descriptors</groupId>
            <artifactId>shrinkwrap-descriptors-impl-javaee</artifactId>
            <scope>test</scope>
            <exclusions>
                <!-- This exclusion is needed to be able to setup the project in Windows:
                     it otherwise includes transitive dependency to the JDK JConsole -->
                <exclusion>
                    <artifactId>wildfly-patching</artifactId>
                    <groupId>org.wildfly</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.jboss.byteman</groupId>
            <artifactId>byteman</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.spec.javax.ejb</groupId>
            <artifactId>jboss-ejb-api_3.2_spec</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.ejb3</groupId>
            <artifactId>jboss-ejb3-ext-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.enterprise</groupId>
            <artifactId>cdi-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.spec.javax.jms</groupId>
            <artifactId>jboss-jms-api_2.0_spec</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.spec.javax.transaction</groupId>
            <artifactId>jboss-transaction-api_1.2_spec</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.spec.javax.annotation</groupId>
            <artifactId>jboss-annotations-api_1.2_spec</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Avoid warnings during build -->
        <dependency>
            <groupId>org.jboss.logging</groupId>
            <artifactId>jboss-logging-annotations</artifactId>
        </dependency>

        <!-- Enable extracting shared test build resources -->
        <!-- See how maven-dependency-plugin is configured in the parent pom -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-search-sharedtestresources</artifactId>
            <classifier>build-resources</classifier>
            <type>zip</type>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <testResources>
            <testResource>
                <filtering>true</filtering>
                <directory>src/test/resources</directory>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <!-- Allows to find the absolute path to dependencies -->
                <groupId>org.bitstrings.maven.plugins</groupId>
                <artifactId>dependencypath-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>set-all</id>
                        <goals>
                            <goal>set</goal>
                        </goals>
                        <configuration>
                        <propertySets>
                            <propertySet>
                                <includes>
                                    <include>org.jboss.byteman:byteman:jar</include>
                                </includes>
                            </propertySet>
                        </propertySets>
                    </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-javadoc-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <!-- Copy the AS configuration files so we can use our custom configurations -->
                    <execution>
                        <id>configure-as-node-node1</id>
                        <!-- Must execute after "generate-test-resources", during which we create the WildFly directory -->
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <skip>${skipWildFlyPreparation}</skip>
                            <outputDirectory>${jbossHome.node1}</outputDirectory>
                            <overwrite>true</overwrite>
                            <resources>
                                <resource>
                                    <directory>${basedir}/src/wildflyConfig</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>configure-as-node-node2</id>
                        <!-- Must execute after "generate-test-resources", during which we create the WildFly directory -->
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <skip>${skipWildFlyPreparation}</skip>
                            <outputDirectory>${jbossHome.node2}</outputDirectory>
                            <overwrite>true</overwrite>
                            <resources>
                                <resource>
                                    <directory>${basedir}/src/wildflyConfig</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.github.alexcojocaru</groupId>
                <artifactId>elasticsearch-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <!--
                With this testing profile, the TS will automatically unzip WildFly distributions obtained via
                Maven's dependency resolution mechanisms, as opposed to the mode where
                the user is expected to prepare the distributions beforehand.
                This is active by default, unless you specify a value for jbossHome.node1.
            -->
            <id>unzipWildFly</id>
            <activation>
                <property>
                    <name>!jbossHome.node1</name>
                </property>
            </activation>
            <properties>
                <jbossHome.node1>${project.build.directory}/wildfly-node1</jbossHome.node1>
                <jbossHome.node2>${project.build.directory}/wildfly-node2</jbossHome.node2>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.wildfly.build</groupId>
                        <artifactId>wildfly-server-provisioning-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>server-provisioning-node1</id>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                                <phase>generate-test-resources</phase>
                                <configuration>
                                    <skip>${skipWildFlyPreparation}</skip>
                                    <config-file>server-provisioning.xml</config-file>
                                    <server-name>wildfly-node1</server-name>
                                </configuration>
                            </execution>
                            <execution>
                                <id>server-provisioning-node2</id>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                                <phase>generate-test-resources</phase>
                                <configuration>
                                    <skip>${skipWildFlyPreparation}</skip>
                                    <config-file>server-provisioning.xml</config-file>
                                    <server-name>wildfly-node2</server-name>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <!--
                                  This allows to run mvn clean install -am -pl :thismodule
                                  and have Maven re-build WildFly modules automatically.
                                  Otherwise the plugin would simply try to fetch the
                                  version in the local repository.
                             -->
                            <dependency>
                                <groupId>${project.groupId}</groupId>
                                <artifactId>hibernate-search-jbossmodules-engine</artifactId>
                                <type>zip</type>
                                <version>${project.version}</version>
                            </dependency>
                            <dependency>
                                <groupId>${project.groupId}</groupId>
                                <artifactId>hibernate-search-jbossmodules-orm</artifactId>
                                <type>zip</type>
                                <version>${project.version}</version>
                            </dependency>
                            <dependency>
                                <groupId>${project.groupId}</groupId>
                                <artifactId>hibernate-search-jbossmodules-backend-jgroups</artifactId>
                                <type>zip</type>
                                <version>${project.version}</version>
                            </dependency>
                            <dependency>
                                <groupId>${project.groupId}</groupId>
                                <artifactId>hibernate-search-jbossmodules-testing</artifactId>
                                <type>zip</type>
                                <version>${project.version}</version>
                            </dependency>
                            <dependency>
                                <groupId>${project.groupId}</groupId>
                                <artifactId>hibernate-search-jbossmodules-elasticsearch</artifactId>
                                <type>zip</type>
                                <version>${project.version}</version>
                            </dependency>
                            <dependency>
                                <groupId>${project.groupId}</groupId>
                                <artifactId>hibernate-search-jbossmodules-elasticsearch-aws</artifactId>
                                <type>zip</type>
                                <version>${project.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!--
                With this profile, the TS will create Hibernate Search modules by itself, as opposed to testing the
                modules already included in WildFly distribution (org.hibernate.search.orm:main).
                This is active by default.
             -->
            <id>createModules</id>
            <activation>
                <property>
                    <name>!useBuiltinModules</name>
                </property>
            </activation>
            <properties>
                <!-- the slot will be inferred at runtime -->
                <test.module-slot.org.hibernate.search/>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-drivers</id>
                                <!-- Must execute after "generate-test-resources", during which we create the WildFly directory -->
                                <phase>process-test-resources</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <configuration>
                                    <skip>${skipWildFlyPreparation}</skip>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>${jdbc.driver.groupId}</groupId>
                                            <artifactId>${jdbc.driver.artifactId}</artifactId>
                                            <version>${jdbc.driver.version}</version>
                                            <overWrite>false</overWrite>
                                            <outputDirectory>${jbossHome.node1}/standalone/deployments</outputDirectory>
                                        </artifactItem>
                                        <artifactItem>
                                            <groupId>${jdbc.driver.groupId}</groupId>
                                            <artifactId>${jdbc.driver.artifactId}</artifactId>
                                            <version>${jdbc.driver.version}</version>
                                            <overWrite>false</overWrite>
                                            <outputDirectory>${jbossHome.node2}/standalone/deployments</outputDirectory>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
        <!--
            When using built-in modules, set the correct Hibernate ORM module slot (main).
         -->
            <id>useBuiltinModules</id>
            <activation>
                <property>
                    <name>useBuiltinModules</name>
                </property>
            </activation>
            <properties>
                <test.module-slot.org.hibernate>main</test.module-slot.org.hibernate>
            </properties>
        </profile>
    </profiles>

    <!--
        Enable a hard-coded JBoss repository configuration in WildFly-related tests.
        This allows us to run a CI job with default Maven settings,
        checking that any other module only relies on dependencies available in Maven Central.
     -->
    <repositories>
        <!-- Use Central first -->
        <repository>
            <id>central</id>
            <name>Maven Central</name>
            <url>http://repo.maven.apache.org/maven2/</url>
            <snapshots>
                <enabled>false</enabled>
                <updatePolicy>never</updatePolicy>
            </snapshots>
        </repository>
        <repository>
            <id>${jboss.public.repo.id}</id>
            <name>JBoss Public Maven Repository Group</name>
            <url>${jboss.public.repo.url}</url>
            <layout>default</layout>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>never</updatePolicy>
            </releases>
            <snapshots>
                <enabled>true</enabled>
                <updatePolicy>never</updatePolicy>
            </snapshots>
        </repository>
    </repositories>
    <pluginRepositories>
        <!-- Use Central first -->
        <pluginRepository>
            <id>central</id>
            <name>Maven Central</name>
            <url>http://repo.maven.apache.org/maven2/</url>
            <snapshots>
                <enabled>false</enabled>
                <updatePolicy>never</updatePolicy>
            </snapshots>
        </pluginRepository>
        <pluginRepository>
            <id>${jboss.public.repo.id}</id>
            <name>JBoss Public Maven Repository Group</name>
            <url>${jboss.public.repo.url}</url>
            <layout>default</layout>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>never</updatePolicy>
            </releases>
            <snapshots>
                <enabled>true</enabled>
                <updatePolicy>never</updatePolicy>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>
</project>
