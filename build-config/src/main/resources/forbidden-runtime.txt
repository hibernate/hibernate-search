# Hibernate Search, full-text search for your domain model
#
# License: GNU Lesser General Public License (LGPL), version 2.1 or later
# See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.

# This file contains forbidden API signatures common to all modules

@ignoreUnresolvable
@defaultMessage Should not be used

################################################################################################################
# Some packages that should not be used
java.awt.**
sun.**
org.slf4j.**
junit.framework.** @ Use the classes from org.junit, junit.framework is deprecated
java.beans.** @ It will be removed from future versions of the JDK

################################################################################################################
# Nobody should be using java.lang.StringBuffer anymore
java.lang.StringBuffer @ Do not use java.lang.StringBuffer: use java.lang.StringBuilder

################################################################################################################
# Probably meant the other Objects:

org.jboss.logging.processor.util.Objects @ Bad import, use java.util.Objects

################################################################################################################
# Methods from Hibernate ORM :
org.hibernate.SharedSessionContract#getTransaction() @ Using this method is often unsafe
org.hibernate.SharedSessionContract#createCriteria(java.lang.Class) @ Native Criteria are deprecated
org.hibernate.SharedSessionContract#createCriteria(java.lang.Class, java.lang.String) @ Native Criteria are deprecated
org.hibernate.SharedSessionContract#createCriteria(java.lang.String) @ Native Criteria are deprecated
org.hibernate.SharedSessionContract#createCriteria(java.lang.String, java.lang.String) @ Native Criteria are deprecated
org.hibernate.criterion.** @ Native Criteria are deprecated

################################################################################################################
# Use our Contracts class instead
com.google.common.base.Preconditions @ Use our Contracts class instead
java.util.Objects#requireNonNull(java.lang.Object, java.lang.String) @ Use our Contracts class instead

################################################################################################################
# We want all SearchExceptions to be internationalized
@defaultMessage Use a method on the Log interface (JBoss Logger) to create SearchExceptions
org.hibernate.search.util.SearchException#<init>(java.lang.String)
org.hibernate.search.util.SearchException#<init>(java.lang.String, java.lang.Throwable)
org.hibernate.search.util.SearchException#<init>(java.lang.Throwable)
org.hibernate.search.util.SearchException#<init>(java.lang.String, java.lang.Throwable, org.hibernate.search.util.EventContext)
org.hibernate.search.util.SearchException#<init>(java.lang.String, org.hibernate.search.util.EventContext)
org.hibernate.search.util.SearchException#<init>(java.lang.Throwable, org.hibernate.search.util.EventContext)

################################################################################################################
@defaultMessage ZonedDateTime.parse is buggy, use TimeHelper.parseZoneDateTime instead. See https://bugs.openjdk.java.net/browse/JDK-8066982
java.time.ZonedDateTime#parse(java.lang.CharSequence)
java.time.ZonedDateTime#parse(java.lang.CharSequence, java.time.format.DateTimeFormatter)

################################################################################################################
@defaultMessage Avoid to use Hibernate ORM internals
org.hibernate.internal.**
org.hibernate.**.internal.**

################################################################################################################
@defaultMessage MethodHandles do not work on GraalVM. Make sure to expose configuration options so that integrators can force the use of java.reflect instead. Once it's done, add your class to the forbiddenApis whitelist.
java.lang.invoke.MethodHandles$Lookup#in(java.lang.Class)
java.lang.invoke.MethodHandles$Lookup#findVirtual(java.lang.Class, java.lang.String, java.lang.invoke.MethodType)
java.lang.invoke.MethodHandles$Lookup#findConstructor(java.lang.Class, java.lang.invoke.MethodType)
java.lang.invoke.MethodHandles$Lookup#findSpecial(java.lang.Class, java.lang.String, java.lang.invoke.MethodType, java.lang.Class)
java.lang.invoke.MethodHandles$Lookup#findGetter(java.lang.Class, java.lang.String, java.lang.Class)
java.lang.invoke.MethodHandles$Lookup#findSetter(java.lang.Class, java.lang.String, java.lang.Class)
java.lang.invoke.MethodHandles$Lookup#findStaticGetter(java.lang.Class, java.lang.String, java.lang.Class)
java.lang.invoke.MethodHandles$Lookup#findStaticSetter(java.lang.Class, java.lang.String, java.lang.Class)
java.lang.invoke.MethodHandles$Lookup#bind(java.lang.Object, java.lang.String, java.lang.invoke.MethodType)
java.lang.invoke.MethodHandles$Lookup#unreflect(java.lang.reflect.Method)
java.lang.invoke.MethodHandles$Lookup#unreflectSpecial(java.lang.reflect.Method, java.lang.Class)
java.lang.invoke.MethodHandles$Lookup#unreflectConstructor(java.lang.reflect.Constructor)
java.lang.invoke.MethodHandles$Lookup#unreflectGetter(java.lang.reflect.Field)
java.lang.invoke.MethodHandles$Lookup#unreflectSetter(java.lang.reflect.Field)
java.lang.invoke.MethodHandles$Lookup#revealDirect(java.lang.invoke.MethodHandle)
java.lang.invoke.MethodHandles$Lookup#findStatic(java.lang.Class, java.lang.String, java.lang.invoke.MethodType)
