
/*
 * Hibernate Search, full-text search for your domain model
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later
 * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
 */

@Library('hibernate-jenkins-pipeline-helpers@1.5')
import org.hibernate.jenkins.pipeline.helpers.job.JobHelper

@Field JobHelper helper = new JobHelper(this)

// NOTE: Remember to update the matrix axes below when adding/removing entries here.
Map settings() {
    // This should not include every JDK; in particular let's not care too much about EOL'd JDKs like version 9
    // See http://www.oracle.com/technetwork/java/javase/eol-135779.html
    boolean incrementalBuild
    if (helper.scmSource.pullRequest) {
        incrementalBuild = true
    }
    switch (env.NON_DEFAULT_ENV_NAME) {
        case 'jdk11':
            return [
                    version: '11',
                    testCompilerTool: 'OpenJDK 11 Latest',
                    testLauncherArgs: '',
                    condition: TestCondition.BEFORE_MERGE,
                    incrementalBuild: incrementalBuild
            ]
        // We want to enable preview features when testing newer builds of OpenJDK:
        // even if we don't use these features, just enabling them can cause side effects
        // and it's useful to test that.
        case 'jdk20':
            return [
                    version: '20',
                    testCompilerTool: 'OpenJDK 20 Latest',
                    testLauncherArgs: '--enable-preview',
                    condition: TestCondition.AFTER_MERGE,
                    incrementalBuild: incrementalBuild
            ]
        case 'jdk21':
            return [
                    version: '21',
                    testCompilerTool: 'OpenJDK 21 Latest',
                    testLauncherArgs: '--enable-preview',
                    condition: TestCondition.AFTER_MERGE,
                    incrementalBuild: incrementalBuild
            ]
        case 'jdk22':
            return [
                    version: '22',
                    testCompilerTool: 'OpenJDK 22 Latest',
                    testLauncherArgs: '--enable-preview',
                    condition: TestCondition.AFTER_MERGE,
                    incrementalBuild: incrementalBuild
            ]
        default:
            return [:]
    }
}

// Perform authenticated pulls of container images, to avoid failure due to download throttling on dockerhub.
def pullContainerImages(String mavenArgs) {
    String containerImageRefsString = ((String) sh( script: "./ci/list-container-images.sh ${mavenArgs}", returnStdout: true ) )
    String[] containerImageRefs = containerImageRefsString ? containerImageRefsString.split( '\\s+' ) : new String[0]
    echo 'Container images to be used in tests: ' + Arrays.toString( containerImageRefs )
    if ( containerImageRefs.length == 0 ) {
        return
    }
    docker.withRegistry('https://index.docker.io/v1/', 'hibernateci.hub.docker.com') {
        // Cannot use a foreach loop because then Jenkins wants to serialize the iterator,
        // and obviously the iterator is not serializable.
        for (int i = 0; i < containerImageRefs.length; i++) {
            containerImageRef = containerImageRefs[i]
            docker.image( containerImageRef ).pull()
        }
    }
}

def withMavenWorkspace(Closure body) {
    withMaven(jdk: 'OpenJDK 17 Latest', maven: 'Apache Maven 3.9',
            mavenLocalRepo: env.WORKSPACE_TMP + '/.m2repository',
            options: [artifactsPublisher(disabled: true)]) {
        body()
    }
}

String normalize(String string) {
    return string.replaceAll('[^\\w]', '_')
}

// env is shared between parallel executions,
// so if we want a variable that is local to a given execution branch,
// we have to qualify its name to avoid conflicts...
String qualify(String radical) {
    return '_' + normalize(env.NON_DEFAULT_ENV_NAME) + '_' + radical
}

String toTestJdkArg(String version, String testCompilerTool, String testLauncherArgs) {
    String args = ''

    def testCompilerToolPath = tool(name: testCompilerTool, type: 'jdk')
    args += " -Djava-version.test.compiler.java_home=$testCompilerToolPath"
    args += " -Djava-version.test.launcher.java_home=$testCompilerToolPath"
    args += " -Djava-version.test.release=$version"
    args += " -Dtest.launcher.args=${testLauncherArgs}"

    return args
}

enum TestCondition {
    // For environments that are expected to work correctly
    // before merging into main or maintenance branches.
    // Tested on main and maintenance branches, on feature branches, and for PRs.
    BEFORE_MERGE,
    // For environments that are expected to work correctly,
    // but are considered too resource-intensive to test them on pull requests.
    // Tested on main and maintenance branches only.
    // Not tested on feature branches or PRs.
    AFTER_MERGE;

    // Work around JENKINS-33023
    // See https://issues.jenkins-ci.org/browse/JENKINS-33023?focusedCommentId=325738&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-325738
    public TestCondition() {}
}

// TODO: on properties... maybe it'd make sense to have a multi-choice property to pick envs from the list?
//  from what I see in the docs, Jenkins provides a single choice properties by default,
//  and any of those multi-select ones are form additional plugins,
//  It's probably better not add more plugins, unless we are already using it somewhere else...

pipeline {
    agent none
    triggers {
        // TODO: how would we want to trigger this job?
        //  Should this be just triggered in parallel to the default build...
        //  Or after the default build finishes successfully... I've found that there's an upstream trigger:
        //  upstream: Accepts a comma-separated string of jobs and a threshold.
        //  When any job in the string finishes with the minimum threshold, the Pipeline will be re-triggered.
        //  For example: triggers { upstream(upstreamProjects: 'job1,job2', threshold: hudson.model.Result.SUCCESS) }
    }
    options {
        buildDiscarder logRotator(daysToKeepStr: '10', numToKeepStr: '3')
        disableConcurrentBuilds(abortPrevious: true)
        // Run at most twice per week, to preserve CI workers for more urgent tasks.
        rateLimitBuilds(throttle: [count: 2, durationName: 'week', userBoost: true])
    }
    stages {
        // This allows testing the original artifacts, against non-default JDKs
        stage('Pre-build original code') {
            agent {
                label 'Worker&&Containers'
            }
            post {
                cleanup {
                    sh 'ci/docker-cleanup.sh'
                }
            }
            steps {
                // The timeout cannot be in stage options, because that would
                // include the time needed to provision a node.
                timeout(time: 30, unit: 'MINUTES') {
                    withMavenWorkspace {
                        sh """ \
							mvn clean install -U -Pdist -DskipTests -DskipITs \
						"""
                        dir(env.WORKSPACE_TMP + '/.m2repository') {
                            stash name: 'original-build-result', includes: "org/hibernate/search/**"
                        }
                    }
                }
            }
        }
        stage('Test') {
            matrix {
                agent {
                    label 'Worker&&Containers'
                }
                post {
                    cleanup {
                        sh 'ci/docker-cleanup.sh'
                    }
                }
                axes {
                    axis {
                        name 'NON_DEFAULT_ENV_NAME'
                        // NOTE: Remember to update the settings() method above when changing this.
                        values 'jdk11', 'jdk20', 'jdk21', 'jdk22'
                    }
                }
                stages {
                    stage('Init') {
                        steps {
                            sh 'ci/docker-cleanup.sh'
                            dir(env.WORKSPACE_TMP + '/.m2repository') {
                                unstash name: 'original-build-result'
                            }
                        }
                    }
                    stage('Test') {
                        when {
                            expression {
                                return !helper.scmSource.pullRequest || settings().condition == TestCondition.BEFORE_MERGE;
                            }
                        }
                        options {
                            timeout(time: 1, unit: 'HOURS')
                        }
                        steps {
                            withMavenWorkspace {
                                String mavenArgsDefiningModulesToTest = '-f integrationtest'
                                // Re-run integration tests against the JARs produced by the default build,
                                // but using a different JDK to build and run the tests.
                                pullContainerImages( mavenArgsDefiningModulesToTest )

                                // Add a suffix to tests to distinguish between different executions
                                // of the same test in different environments in reports
                                def testSuffix = env.NON_DEFAULT_ENV_NAME

                                sh """ \
                                    mvn clean install -Dsurefire.environment=$testSuffix \
                                            ${toTestJdkArg(settings().version, settings().testCompilerTool, settings().testLauncherArgs)} \
                                            --fail-at-end \
                                            $mavenArgsDefiningModulesToTest \
                                            ${settings().incrementalBuild ? ('-Dincremental -Dgib.referenceBranch=refs/remotes/origin/' + helper.scmSource.pullRequest.target.name) : ''} \
                                    """
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            notifyBuildResult maintainers: 'yoann@hibernate.org marko@hibernate.org'
        }
    }
}
