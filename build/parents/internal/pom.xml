<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~ Hibernate Search, full-text search for your domain model
 ~
 ~ License: GNU Lesser General Public License (LGPL), version 2.1 or later
 ~ See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.hibernate.search</groupId>
        <artifactId>hibernate-search-parent</artifactId>
        <version>6.2.0-SNAPSHOT</version>
        <relativePath>../../..</relativePath>
    </parent>
    <artifactId>hibernate-search-parent-internal</artifactId>
    <packaging>pom</packaging>

    <name>Hibernate Search Parent POM for Internal Artifacts</name>
    <description>Common build configuration for all internal (non-published) artifacts</description>

    <properties>
        <!-- Do not publish internal modules -->
        <skipNexusStagingDeployMojo>true</skipNexusStagingDeployMojo>
        <!--
             Skip javadoc generation for internal modules: we don't want to publish them.
             Note this shouldn't be necessary because we don't even use the maven-javadoc-plugin
             in these modules.
             However, the maven-javadoc-plugin sometimes invokes the javadoc goal on these modules explicitly
             from other (published) modules; probably because it tries to generate the javadoc of dependencies,
             even test dependencies.
             Whatever the reason, this triggers errors, so we better just disable the plugin explicitly.
         -->
        <maven.javadoc.skip>true</maven.javadoc.skip>

        <!-- Disable the dependency convergence rule in internal artifacts because it's a lost cause:
             a lot of our test dependencies have *themselves* diverging dependencies.
             For example, many Jakarta API artifacts depend on two versions of another API
             (an RC1 directly and a final version indirectly),
             Wiremock depends on multiple versions of the servlet API, ... -->
        <enforcer.dependencyconvergence.skip>true</enforcer.dependencyconvergence.skip>

        <!--
            In all internal modules, especially but not only test modules,
            consider all sources as tests during Sonar analysis.
            This is important because some analysis rules do not apply to test code.
         -->
        <sonar.sources>${rootProject.emptySubdirectory}</sonar.sources>
        <sonar.tests>${project.basedir}/src</sonar.tests>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.hibernate.search</groupId>
                <artifactId>hibernate-search-util-internal-integrationtest-common</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.search</groupId>
                <artifactId>hibernate-search-util-internal-integrationtest-backend-elasticsearch</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.search</groupId>
                <artifactId>hibernate-search-util-internal-integrationtest-backend-lucene</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.search</groupId>
                <artifactId>hibernate-search-util-internal-integrationtest-mapper-stub</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.search</groupId>
                <artifactId>hibernate-search-util-internal-integrationtest-mapper-pojo-standalone</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.search</groupId>
                <artifactId>hibernate-search-util-internal-integrationtest-mapper-orm</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.search</groupId>
                <artifactId>hibernate-search-util-internal-integrationtest-v5migrationhelper</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.search</groupId>
                <artifactId>hibernate-search-util-internal-integrationtest-jbatch-runtime</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.search</groupId>
                <artifactId>hibernate-search-util-internal-integrationtest-jberet-se</artifactId>
                <version>${project.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>de.thetaphi</groupId>
                    <artifactId>forbiddenapis</artifactId>
                    <!-- Override the executions defined in the parent module -->
                    <executions>
                        <execution>
                            <id>verify-forbidden-apis-main-public</id>
                            <!-- Do not use the main rules at all in internal modules, see below -->
                            <phase>none</phase>
                        </execution>
                        <execution>
                            <id>verify-forbidden-apis-main-internal</id>
                            <!-- Use specific rules for internal modules -->
                            <phase>compile</phase>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>

