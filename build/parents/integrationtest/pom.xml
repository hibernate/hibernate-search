<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~ Hibernate Search, full-text search for your domain model
 ~
 ~ License: GNU Lesser General Public License (LGPL), version 2.1 or later
 ~ See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.hibernate.search</groupId>
        <artifactId>hibernate-search-parent-internal</artifactId>
        <version>7.0.0-SNAPSHOT</version>
        <relativePath>../internal</relativePath>
    </parent>
    <artifactId>hibernate-search-parent-integrationtest</artifactId>
    <packaging>pom</packaging>

    <name>Hibernate Search Parent POM for Integration Test Artifacts</name>
    <description>Common build configuration for all integration test artifacts (including documentation)</description>

    <properties>
        <!-- Apply the test JDK release settings to all code in integration tests, even code in src/main -->
        <java-version.main.release>${java-version.test.release}</java-version.main.release>
        <java-version.main.compiler.java_home>${java-version.test.compiler.java_home}</java-version.main.compiler.java_home>
        <java-version.main.compiler>${java-version.test.compiler}</java-version.main.compiler>
        <java-version.test.java17.add-main-source-phase.default>generate-sources</java-version.test.java17.add-main-source-phase.default>

        <!-- For some reason, the failsafe plugin uses the modulepath
             even when we didn't define a module-info.java,
             and many things fail because of the modulepath.
             In particular, the backend TCK fails to retrieve TckBackendHelper,
             and Spring Boot ITs fail to detect configuration defined in the main (non-test) code.
             So, disable the modulepath explicitly. -->
        <failsafe.useModulePath>false</failsafe.useModulePath>
    </properties>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${version.compiler.plugin}</version>
                    <executions>
                        <execution>
                            <id>default-compile</id>
                            <!-- Use the -parameters for all code in src/main. -->
                            <configuration>
                                <compilerArgs combine.children="append">
                                    <compilerArg>-parameters</compilerArg>
                                </compilerArgs>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <profiles>
        <!-- =============================== -->
        <!-- Elasticsearch IT profiles       -->
        <!-- =============================== -->
        <!--
             To run tests against a different version of Elasticsearch, see CONTRIBUTING.md.
          -->
        <!-- Profile enabled when an Elasticsearch instance must be pulled -->
        <profile>
            <id>elasticsearch-run</id>
            <activation>
                <!-- Activate by default, i.e. if test.elasticsearch.connection.uris has not been defined explicitly -->
                <property>
                    <name>!test.elasticsearch.connection.uris</name>
                </property>
            </activation>
            <properties>
                <test.elasticsearch.run.image.name>${test.elasticsearch.run.elastic.image.name}</test.elasticsearch.run.image.name>
                <test.elasticsearch.run.image.tag>${test.elasticsearch.run.elastic.image.tag}</test.elasticsearch.run.image.tag>
            </properties>
        </profile>
        <!-- Profile enabled when an Elasticsearch instance must NOT be run by Maven -->
        <profile>
            <id>elasticsearch-do-not-run</id>
            <activation>
                <!-- Activate if test.elasticsearch.connection.uris has been defined explicitly -->
                <property>
                    <name>test.elasticsearch.connection.uris</name>
                </property>
            </activation>
            <properties>
                <test.elasticsearch.run.image.pull>false</test.elasticsearch.run.image.pull>
            </properties>
        </profile>

        <profile>
            <id>aws</id>
            <activation>
                <property>
                    <name>test.elasticsearch.connection.aws.signing.enabled</name>
                    <value>true</value>
                </property>
            </activation>
            <properties>
                <!-- Tests may fail unexpectedly with AWS Elasticsearch.
                     In particular, we sometimes get timeouts, seemingly for no particular reason.
                     Thus we need to retry tests when they fail, to be sure it's not just a transient failure.
                     Note that this will not re-run tests when they fail in @BeforeAll/@AfterAll in particular,
                     so we also have retry steps in the Jenkinsfile.
                 -->
                <failsafe.rerunFailingTestsCount>4</failsafe.rerunFailingTestsCount>
            </properties>
        </profile>

        <profile>
            <id>opensearch</id>
            <activation>
                <property>
                    <name>test.elasticsearch.distribution</name>
                    <value>opensearch</value>
                </property>
            </activation>
            <properties>
                <test.elasticsearch.run.image.name>${test.elasticsearch.run.opensearch.image.name}</test.elasticsearch.run.image.name>
                <test.elasticsearch.run.image.tag>${test.elasticsearch.run.opensearch.image.tag}</test.elasticsearch.run.image.tag>
            </properties>
        </profile>

        <!-- =============================== -->
        <!-- Database profiles               -->
        <!-- =============================== -->
        <!-- H2 is the default -->
        <profile>
            <id>h2</id>
            <activation>
                <property>
                    <name>inMemoryTests</name>
                    <value>!true</value>
                </property>
            </activation>
            <properties>
                <jdbc.driver.groupId>com.h2database</jdbc.driver.groupId>
                <jdbc.driver.artifactId>h2</jdbc.driver.artifactId>
            </properties>
        </profile>

        <!-- PostgreSQL Docker container for tests -->
        <!-- See test.database.run.postgresql.image.tag for the server version in use -->
        <profile>
            <id>ci-postgresql</id>
            <properties>
                <jdbc.driver.groupId>org.postgresql</jdbc.driver.groupId>
                <jdbc.driver.artifactId>postgresql</jdbc.driver.artifactId>
                <test.database.run.kind>postgresql</test.database.run.kind>
            </properties>
        </profile>

        <!-- MariaDB Docker container for tests -->
        <!-- See test.database.run.mariadb.image.tag for the server version in use -->
        <profile>
            <id>ci-mariadb</id>
            <properties>
                <jdbc.driver.groupId>org.mariadb.jdbc</jdbc.driver.groupId>
                <jdbc.driver.artifactId>mariadb-java-client</jdbc.driver.artifactId>
                <test.database.run.kind>mariadb</test.database.run.kind>
            </properties>
        </profile>

        <!-- MySQL Docker container for tests -->
        <!-- See test.database.run.mysql.image.tag for the server version in use -->
        <profile>
            <id>ci-mysql</id>
            <properties>
                <jdbc.driver.groupId>com.mysql</jdbc.driver.groupId>
                <jdbc.driver.artifactId>mysql-connector-j</jdbc.driver.artifactId>
                <test.database.run.kind>mysql</test.database.run.kind>
            </properties>
        </profile>

        <!-- DB2 Docker container for tests -->
        <!-- See test.database.run.db2.image.tag for the server version in use -->
        <profile>
            <id>ci-db2</id>
            <properties>
                <jdbc.driver.groupId>com.ibm.db2</jdbc.driver.groupId>
                <jdbc.driver.artifactId>jcc</jdbc.driver.artifactId>
                <test.database.run.kind>db2</test.database.run.kind>
            </properties>
        </profile>

        <!-- Oracle Docker container for tests -->
        <!-- See test.database.run.oracle.image.tag for the server version in use -->
        <profile>
            <id>ci-oracle</id>
            <properties>
                <jdbc.driver.groupId>com.oracle.database.jdbc</jdbc.driver.groupId>
                <jdbc.driver.artifactId>ojdbc11</jdbc.driver.artifactId>
                <test.database.run.kind>oracle</test.database.run.kind>
                <!-- avoid `ORA-01882: timezone region not found` exception on CI -->
                <failsafe.jvm.args.jdbc>-Doracle.jdbc.timezoneAsRegion=false</failsafe.jvm.args.jdbc>
            </properties>
        </profile>

        <!-- SQL Server Docker container for tests -->
        <!-- See test.database.run.mssql.image.tag for the server version in use -->
        <profile>
            <id>ci-mssql</id>
            <properties>
                <jdbc.driver.groupId>com.microsoft.sqlserver</jdbc.driver.groupId>
                <jdbc.driver.artifactId>mssql-jdbc</jdbc.driver.artifactId>
                <test.database.run.kind>mssql</test.database.run.kind>
            </properties>
        </profile>

        <!-- CockroachDB Docker container for tests -->
        <!-- See test.database.run.cockroachdb.image.tag for the server version in use -->
        <profile>
            <id>ci-cockroachdb</id>
            <properties>
                <!-- CockroachDB uses the same client protocol as PostgreSQL (pgwire), so the driver is the same. -->
                <jdbc.driver.groupId>org.postgresql</jdbc.driver.groupId>
                <jdbc.driver.artifactId>postgresql</jdbc.driver.artifactId>
                <test.database.run.kind>cockroachdb</test.database.run.kind>
            </properties>
        </profile>
    </profiles>
</project>

