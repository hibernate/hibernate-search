/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DirtinessDescriptorDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 908077749791457060L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DirtinessDescriptorDto\",\"namespace\":\"org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl\",\"fields\":[{\"name\":\"forceSelfDirty\",\"type\":\"boolean\"},{\"name\":\"forceContainingDirty\",\"type\":\"boolean\"},{\"name\":\"dirtyPaths\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"updateBecauseOfContained\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DirtinessDescriptorDto> ENCODER =
      new BinaryMessageEncoder<DirtinessDescriptorDto>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DirtinessDescriptorDto> DECODER =
      new BinaryMessageDecoder<DirtinessDescriptorDto>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DirtinessDescriptorDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DirtinessDescriptorDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DirtinessDescriptorDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DirtinessDescriptorDto>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DirtinessDescriptorDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DirtinessDescriptorDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DirtinessDescriptorDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DirtinessDescriptorDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private boolean forceSelfDirty;
  private boolean forceContainingDirty;
  private java.util.List<java.lang.CharSequence> dirtyPaths;
  private boolean updateBecauseOfContained;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DirtinessDescriptorDto() {}

  /**
   * All-args constructor.
   * @param forceSelfDirty The new value for forceSelfDirty
   * @param forceContainingDirty The new value for forceContainingDirty
   * @param dirtyPaths The new value for dirtyPaths
   * @param updateBecauseOfContained The new value for updateBecauseOfContained
   */
  public DirtinessDescriptorDto(java.lang.Boolean forceSelfDirty, java.lang.Boolean forceContainingDirty, java.util.List<java.lang.CharSequence> dirtyPaths, java.lang.Boolean updateBecauseOfContained) {
    this.forceSelfDirty = forceSelfDirty;
    this.forceContainingDirty = forceContainingDirty;
    this.dirtyPaths = dirtyPaths;
    this.updateBecauseOfContained = updateBecauseOfContained;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return forceSelfDirty;
    case 1: return forceContainingDirty;
    case 2: return dirtyPaths;
    case 3: return updateBecauseOfContained;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: forceSelfDirty = (java.lang.Boolean)value$; break;
    case 1: forceContainingDirty = (java.lang.Boolean)value$; break;
    case 2: dirtyPaths = (java.util.List<java.lang.CharSequence>)value$; break;
    case 3: updateBecauseOfContained = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'forceSelfDirty' field.
   * @return The value of the 'forceSelfDirty' field.
   */
  public boolean getForceSelfDirty() {
    return forceSelfDirty;
  }


  /**
   * Sets the value of the 'forceSelfDirty' field.
   * @param value the value to set.
   */
  public void setForceSelfDirty(boolean value) {
    this.forceSelfDirty = value;
  }

  /**
   * Gets the value of the 'forceContainingDirty' field.
   * @return The value of the 'forceContainingDirty' field.
   */
  public boolean getForceContainingDirty() {
    return forceContainingDirty;
  }


  /**
   * Sets the value of the 'forceContainingDirty' field.
   * @param value the value to set.
   */
  public void setForceContainingDirty(boolean value) {
    this.forceContainingDirty = value;
  }

  /**
   * Gets the value of the 'dirtyPaths' field.
   * @return The value of the 'dirtyPaths' field.
   */
  public java.util.List<java.lang.CharSequence> getDirtyPaths() {
    return dirtyPaths;
  }


  /**
   * Sets the value of the 'dirtyPaths' field.
   * @param value the value to set.
   */
  public void setDirtyPaths(java.util.List<java.lang.CharSequence> value) {
    this.dirtyPaths = value;
  }

  /**
   * Gets the value of the 'updateBecauseOfContained' field.
   * @return The value of the 'updateBecauseOfContained' field.
   */
  public boolean getUpdateBecauseOfContained() {
    return updateBecauseOfContained;
  }


  /**
   * Sets the value of the 'updateBecauseOfContained' field.
   * @param value the value to set.
   */
  public void setUpdateBecauseOfContained(boolean value) {
    this.updateBecauseOfContained = value;
  }

  /**
   * Creates a new DirtinessDescriptorDto RecordBuilder.
   * @return A new DirtinessDescriptorDto RecordBuilder
   */
  public static org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto.Builder newBuilder() {
    return new org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto.Builder();
  }

  /**
   * Creates a new DirtinessDescriptorDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DirtinessDescriptorDto RecordBuilder
   */
  public static org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto.Builder newBuilder(org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto.Builder other) {
    if (other == null) {
      return new org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto.Builder();
    } else {
      return new org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto.Builder(other);
    }
  }

  /**
   * Creates a new DirtinessDescriptorDto RecordBuilder by copying an existing DirtinessDescriptorDto instance.
   * @param other The existing instance to copy.
   * @return A new DirtinessDescriptorDto RecordBuilder
   */
  public static org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto.Builder newBuilder(org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto other) {
    if (other == null) {
      return new org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto.Builder();
    } else {
      return new org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for DirtinessDescriptorDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DirtinessDescriptorDto>
    implements org.apache.avro.data.RecordBuilder<DirtinessDescriptorDto> {

    private boolean forceSelfDirty;
    private boolean forceContainingDirty;
    private java.util.List<java.lang.CharSequence> dirtyPaths;
    private boolean updateBecauseOfContained;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.forceSelfDirty)) {
        this.forceSelfDirty = data().deepCopy(fields()[0].schema(), other.forceSelfDirty);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.forceContainingDirty)) {
        this.forceContainingDirty = data().deepCopy(fields()[1].schema(), other.forceContainingDirty);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.dirtyPaths)) {
        this.dirtyPaths = data().deepCopy(fields()[2].schema(), other.dirtyPaths);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.updateBecauseOfContained)) {
        this.updateBecauseOfContained = data().deepCopy(fields()[3].schema(), other.updateBecauseOfContained);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing DirtinessDescriptorDto instance
     * @param other The existing instance to copy.
     */
    private Builder(org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.forceSelfDirty)) {
        this.forceSelfDirty = data().deepCopy(fields()[0].schema(), other.forceSelfDirty);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.forceContainingDirty)) {
        this.forceContainingDirty = data().deepCopy(fields()[1].schema(), other.forceContainingDirty);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dirtyPaths)) {
        this.dirtyPaths = data().deepCopy(fields()[2].schema(), other.dirtyPaths);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.updateBecauseOfContained)) {
        this.updateBecauseOfContained = data().deepCopy(fields()[3].schema(), other.updateBecauseOfContained);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'forceSelfDirty' field.
      * @return The value.
      */
    public boolean getForceSelfDirty() {
      return forceSelfDirty;
    }


    /**
      * Sets the value of the 'forceSelfDirty' field.
      * @param value The value of 'forceSelfDirty'.
      * @return This builder.
      */
    public org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto.Builder setForceSelfDirty(boolean value) {
      validate(fields()[0], value);
      this.forceSelfDirty = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'forceSelfDirty' field has been set.
      * @return True if the 'forceSelfDirty' field has been set, false otherwise.
      */
    public boolean hasForceSelfDirty() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'forceSelfDirty' field.
      * @return This builder.
      */
    public org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto.Builder clearForceSelfDirty() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'forceContainingDirty' field.
      * @return The value.
      */
    public boolean getForceContainingDirty() {
      return forceContainingDirty;
    }


    /**
      * Sets the value of the 'forceContainingDirty' field.
      * @param value The value of 'forceContainingDirty'.
      * @return This builder.
      */
    public org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto.Builder setForceContainingDirty(boolean value) {
      validate(fields()[1], value);
      this.forceContainingDirty = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'forceContainingDirty' field has been set.
      * @return True if the 'forceContainingDirty' field has been set, false otherwise.
      */
    public boolean hasForceContainingDirty() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'forceContainingDirty' field.
      * @return This builder.
      */
    public org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto.Builder clearForceContainingDirty() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'dirtyPaths' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getDirtyPaths() {
      return dirtyPaths;
    }


    /**
      * Sets the value of the 'dirtyPaths' field.
      * @param value The value of 'dirtyPaths'.
      * @return This builder.
      */
    public org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto.Builder setDirtyPaths(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.dirtyPaths = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'dirtyPaths' field has been set.
      * @return True if the 'dirtyPaths' field has been set, false otherwise.
      */
    public boolean hasDirtyPaths() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'dirtyPaths' field.
      * @return This builder.
      */
    public org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto.Builder clearDirtyPaths() {
      dirtyPaths = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'updateBecauseOfContained' field.
      * @return The value.
      */
    public boolean getUpdateBecauseOfContained() {
      return updateBecauseOfContained;
    }


    /**
      * Sets the value of the 'updateBecauseOfContained' field.
      * @param value The value of 'updateBecauseOfContained'.
      * @return This builder.
      */
    public org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto.Builder setUpdateBecauseOfContained(boolean value) {
      validate(fields()[3], value);
      this.updateBecauseOfContained = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'updateBecauseOfContained' field has been set.
      * @return True if the 'updateBecauseOfContained' field has been set, false otherwise.
      */
    public boolean hasUpdateBecauseOfContained() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'updateBecauseOfContained' field.
      * @return This builder.
      */
    public org.hibernate.search.mapper.orm.coordination.outboxpolling.avro.generated.impl.DirtinessDescriptorDto.Builder clearUpdateBecauseOfContained() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DirtinessDescriptorDto build() {
      try {
        DirtinessDescriptorDto record = new DirtinessDescriptorDto();
        record.forceSelfDirty = fieldSetFlags()[0] ? this.forceSelfDirty : (java.lang.Boolean) defaultValue(fields()[0]);
        record.forceContainingDirty = fieldSetFlags()[1] ? this.forceContainingDirty : (java.lang.Boolean) defaultValue(fields()[1]);
        record.dirtyPaths = fieldSetFlags()[2] ? this.dirtyPaths : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        record.updateBecauseOfContained = fieldSetFlags()[3] ? this.updateBecauseOfContained : (java.lang.Boolean) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DirtinessDescriptorDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<DirtinessDescriptorDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DirtinessDescriptorDto>
    READER$ = (org.apache.avro.io.DatumReader<DirtinessDescriptorDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeBoolean(this.forceSelfDirty);

    out.writeBoolean(this.forceContainingDirty);

    long size0 = this.dirtyPaths.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.dirtyPaths) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeBoolean(this.updateBecauseOfContained);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.forceSelfDirty = in.readBoolean();

      this.forceContainingDirty = in.readBoolean();

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.dirtyPaths;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("dirtyPaths").schema());
        this.dirtyPaths = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      this.updateBecauseOfContained = in.readBoolean();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.forceSelfDirty = in.readBoolean();
          break;

        case 1:
          this.forceContainingDirty = in.readBoolean();
          break;

        case 2:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.dirtyPaths;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("dirtyPaths").schema());
            this.dirtyPaths = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 3:
          this.updateBecauseOfContained = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










